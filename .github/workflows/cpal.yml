name: cpal

on: [push, pull_request]

jobs:

  clippy-and-fmt:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install Linux audio dependencies
      run: |
        sudo apt update
        sudo apt-get install -y libasound2-dev libjack-jackd2-dev libjack-jackd2-0 libdbus-1-dev
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy, rustfmt
        targets: armv7-linux-androideabi
    - name: Run rustfmt
      run: cargo fmt --all -- --check
    - name: Run clippy
      run: cargo clippy --all --all-features
    - name: Run clippy for Android target
      run: cargo clippy --all --features asio --target armv7-linux-androideabi

  cargo-publish:
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install Linux audio dependencies
      run: |
        sudo apt update
        sudo apt-get install -y libasound2-dev
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    - name: Verify publish crate
      uses: katyo/publish-crates@v2
      with:
        dry-run: true
        ignore-unpublished-changes: true
    - name: Publish crate
      uses: katyo/publish-crates@v2
      with:
        ignore-unpublished-changes: true
        registry-token: ${{ secrets.CRATESIO_TOKEN }}

  # Native platform testing
  test-native:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            name: linux-x64
            deps: |
              sudo apt update
              sudo apt-get install -y libasound2-dev libjack-jackd2-dev libjack-jackd2-0 libdbus-1-dev

          # Linux ARM64 native
          - os: ubuntu-24.04-arm
            name: linux-arm64
            deps: |
              sudo apt update
              sudo apt-get install -y libasound2-dev libjack-jackd2-dev libjack-jackd2-0 libdbus-1-dev

          # Windows x86_64
          - os: windows-latest
            name: windows-x64
            target: x86_64-pc-windows-msvc
            deps: |
              curl -L -o asio.zip https://www.steinberg.net/asiosdk
              7z x -oasio asio.zip
              move asio\*\* asio\
              choco install asio4all
              choco install llvm
            asio-env: true

          # Windows i686
          - os: windows-latest
            name: windows-x86
            target: i686-pc-windows-msvc
            deps: |
              curl -L -o asio.zip https://www.steinberg.net/asiosdk
              7z x -oasio asio.zip
              move asio\*\* asio\
              choco install asio4all
              choco install llvm
            asio-env: true

          # macOS (ARM64 M1/M2)
          - os: macOS-latest
            name: macos-arm64
            deps: brew install llvm
            build-beep: true

    runs-on: ${{ matrix.os }}
    name: test-${{ matrix.name }}
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: ${{ matrix.deps }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}

      - name: Build beep example (macOS only)
        if: matrix.build-beep
        run: cargo build --example beep

      - name: Run tests without features
        run: cargo test --all --no-default-features --verbose

      - name: Run tests with all features
        shell: bash
        run: |
          if [[ "${{ matrix.asio-env }}" == "true" ]]; then
            export CPAL_ASIO_DIR="$GITHUB_WORKSPACE/asio"
          fi
          cargo test --all --all-features --verbose

  # Cross-compilation for architectures without native runners
  test-cross:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [armv7-unknown-linux-gnueabihf]

    name: test-cross-${{ matrix.target }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}

      - name: Install cross
        run: cargo install cross

      - name: Check without features
        run: cross check --target ${{ matrix.target }} --workspace --no-default-features --verbose

      - name: Test without features
        run: cross test --target ${{ matrix.target }} --workspace --no-default-features --verbose

      - name: Check all features
        run: cross check --target ${{ matrix.target }} --workspace --all-features --verbose

      - name: Test all features
        run: cross test --target ${{ matrix.target }} --workspace --all-features --verbose

  # WebAssembly builds
  test-wasm:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: wasm32-unknown-emscripten
            setup-emscripten: true
            args: --release
          - target: wasm32-unknown-unknown
            setup-emscripten: false
            args: --features=wasm-bindgen
            build-wasm-beep: true
          - target: wasm32-wasip1
            setup-emscripten: false
            args: ""

    name: test-wasm-${{ matrix.target }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Emscripten toolchain
        if: matrix.setup-emscripten
        uses: mymindstorm/setup-emsdk@v14

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}

      - name: Build beep example
        run: cargo build --example beep --target ${{ matrix.target }} ${{ matrix.args }}

      - name: Build wasm-beep example
        if: matrix.build-wasm-beep
        working-directory: ./examples/wasm-beep
        run: cargo build --target ${{ matrix.target }}


  # Android cross-compilation
  test-android:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain (Android targets)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: armv7-linux-androideabi,aarch64-linux-android,i686-linux-android,x86_64-linux-android

      - name: Check Android examples
        run: |
          cargo check --example beep --target armv7-linux-androideabi --verbose
          cargo check --example enumerate --target armv7-linux-androideabi --verbose
          cargo check --example feedback --target armv7-linux-androideabi --verbose
          cargo check --example record_wav --target armv7-linux-androideabi --verbose

      - name: Check Android project
        working-directory: examples/android
        run: cargo check --target armv7-linux-androideabi --verbose

      - name: Set up Android SDK
        run: |
          ${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROID_SDK_ROOT --install "build-tools;30.0.2" "platforms;android-30"

      - name: Install Cargo APK
        run: cargo install cargo-apk

      - name: Build APK
        working-directory: examples/android
        run: cargo apk build

  # iOS cross-compilation
  test-ios:
    runs-on: macOS-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: brew install llvm

      - name: Install Rust toolchain (iOS targets)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-ios,x86_64-apple-ios

      - name: Install cargo lipo
        run: cargo install cargo-lipo

      - name: Build iOS example
        run: cd examples/ios-feedback && xcodebuild -scheme cpal-ios-example -configuration Debug -derivedDataPath build -sdk iphonesimulator

