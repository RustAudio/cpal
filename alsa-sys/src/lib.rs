/* automatically generated by rust-bindgen */

#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align> {
    storage: Storage,
    align: [Align; 0],
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const _UNISTD_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 27;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _POSIX_VERSION: u32 = 200809;
pub const __POSIX2_THIS_VERSION: u32 = 200809;
pub const _POSIX2_VERSION: u32 = 200809;
pub const _POSIX2_C_VERSION: u32 = 200809;
pub const _POSIX2_C_BIND: u32 = 200809;
pub const _POSIX2_C_DEV: u32 = 200809;
pub const _POSIX2_SW_DEV: u32 = 200809;
pub const _POSIX2_LOCALEDEF: u32 = 200809;
pub const _XOPEN_VERSION: u32 = 700;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _XOPEN_XPG2: u32 = 1;
pub const _XOPEN_XPG3: u32 = 1;
pub const _XOPEN_XPG4: u32 = 1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _XOPEN_CRYPT: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: u32 = 1;
pub const _BITS_POSIX_OPT_H: u32 = 1;
pub const _POSIX_JOB_CONTROL: u32 = 1;
pub const _POSIX_SAVED_IDS: u32 = 1;
pub const _POSIX_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_SYNCHRONIZED_IO: u32 = 200809;
pub const _POSIX_FSYNC: u32 = 200809;
pub const _POSIX_MAPPED_FILES: u32 = 200809;
pub const _POSIX_MEMLOCK: u32 = 200809;
pub const _POSIX_MEMLOCK_RANGE: u32 = 200809;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200809;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 0;
pub const _POSIX_VDISABLE: u8 = 0u8;
pub const _POSIX_NO_TRUNC: u32 = 1;
pub const _XOPEN_REALTIME: u32 = 1;
pub const _XOPEN_REALTIME_THREADS: u32 = 1;
pub const _XOPEN_SHM: u32 = 1;
pub const _POSIX_THREADS: u32 = 200809;
pub const _POSIX_REENTRANT_FUNCTIONS: u32 = 1;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200809;
pub const _POSIX_THREAD_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_PRIO_PROTECT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: i32 = -1;
pub const _POSIX_SEMAPHORES: u32 = 200809;
pub const _POSIX_REALTIME_SIGNALS: u32 = 200809;
pub const _POSIX_ASYNCHRONOUS_IO: u32 = 200809;
pub const _POSIX_ASYNC_IO: u32 = 1;
pub const _LFS_ASYNCHRONOUS_IO: u32 = 1;
pub const _POSIX_PRIORITIZED_IO: u32 = 200809;
pub const _LFS64_ASYNCHRONOUS_IO: u32 = 1;
pub const _LFS_LARGEFILE: u32 = 1;
pub const _LFS64_LARGEFILE: u32 = 1;
pub const _LFS64_STDIO: u32 = 1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: u32 = 200809;
pub const _POSIX_CPUTIME: u32 = 0;
pub const _POSIX_THREAD_CPUTIME: u32 = 0;
pub const _POSIX_REGEXP: u32 = 1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
pub const _POSIX_SHELL: u32 = 1;
pub const _POSIX_TIMEOUTS: u32 = 200809;
pub const _POSIX_SPIN_LOCKS: u32 = 200809;
pub const _POSIX_SPAWN: u32 = 200809;
pub const _POSIX_TIMERS: u32 = 200809;
pub const _POSIX_BARRIERS: u32 = 200809;
pub const _POSIX_MESSAGE_PASSING: u32 = 200809;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200809;
pub const _POSIX_MONOTONIC_CLOCK: u32 = 0;
pub const _POSIX_CLOCK_SELECTION: u32 = 200809;
pub const _POSIX_ADVISORY_INFO: u32 = 200809;
pub const _POSIX_IPV6: u32 = 200809;
pub const _POSIX_RAW_SOCKETS: u32 = 200809;
pub const _POSIX2_CHAR_TERM: u32 = 200809;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_V7_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V6_LPBIG_OFFBIG: i32 = -1;
pub const _XBS5_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const __ILP32_OFF32_CFLAGS: &'static [u8; 5usize] = b"-m32\0";
pub const __ILP32_OFF32_LDFLAGS: &'static [u8; 5usize] = b"-m32\0";
pub const __ILP32_OFFBIG_CFLAGS: &'static [u8; 48usize] =
    b"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\0";
pub const __ILP32_OFFBIG_LDFLAGS: &'static [u8; 5usize] = b"-m32\0";
pub const __LP64_OFF64_CFLAGS: &'static [u8; 5usize] = b"-m64\0";
pub const __LP64_OFF64_LDFLAGS: &'static [u8; 5usize] = b"-m64\0";
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const R_OK: u32 = 4;
pub const W_OK: u32 = 2;
pub const X_OK: u32 = 1;
pub const F_OK: u32 = 0;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const _GETOPT_POSIX_H: u32 = 1;
pub const _GETOPT_CORE_H: u32 = 1;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const _STDIO_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const _BITS_LIBIO_H: u32 = 1;
pub const _BITS_G_CONFIG_H: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _G_HAVE_MMAP: u32 = 1;
pub const _G_HAVE_MREMAP: u32 = 1;
pub const _G_IO_IO_FILE_VERSION: u32 = 131073;
pub const _G_BUFSIZ: u32 = 8192;
pub const _IO_BUFSIZ: u32 = 8192;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _IO_UNIFIED_JUMPTABLES: u32 = 1;
pub const EOF: i32 = -1;
pub const _IOS_INPUT: u32 = 1;
pub const _IOS_OUTPUT: u32 = 2;
pub const _IOS_ATEND: u32 = 4;
pub const _IOS_APPEND: u32 = 8;
pub const _IOS_TRUNC: u32 = 16;
pub const _IOS_NOCREATE: u32 = 32;
pub const _IOS_NOREPLACE: u32 = 64;
pub const _IOS_BIN: u32 = 128;
pub const _IO_MAGIC: u32 = 4222418944;
pub const _OLD_STDIO_MAGIC: u32 = 4206624768;
pub const _IO_MAGIC_MASK: u32 = 4294901760;
pub const _IO_USER_BUF: u32 = 1;
pub const _IO_UNBUFFERED: u32 = 2;
pub const _IO_NO_READS: u32 = 4;
pub const _IO_NO_WRITES: u32 = 8;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_DELETE_DONT_CLOSE: u32 = 64;
pub const _IO_LINKED: u32 = 128;
pub const _IO_IN_BACKUP: u32 = 256;
pub const _IO_LINE_BUF: u32 = 512;
pub const _IO_TIED_PUT_GET: u32 = 1024;
pub const _IO_CURRENTLY_PUTTING: u32 = 2048;
pub const _IO_IS_APPENDING: u32 = 4096;
pub const _IO_IS_FILEBUF: u32 = 8192;
pub const _IO_BAD_SEEN: u32 = 16384;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IO_FLAGS2_MMAP: u32 = 1;
pub const _IO_FLAGS2_NOTCANCEL: u32 = 2;
pub const _IO_FLAGS2_USER_WBUF: u32 = 8;
pub const _IO_SKIPWS: u32 = 1;
pub const _IO_LEFT: u32 = 2;
pub const _IO_RIGHT: u32 = 4;
pub const _IO_INTERNAL: u32 = 8;
pub const _IO_DEC: u32 = 16;
pub const _IO_OCT: u32 = 32;
pub const _IO_HEX: u32 = 64;
pub const _IO_SHOWBASE: u32 = 128;
pub const _IO_SHOWPOINT: u32 = 256;
pub const _IO_UPPERCASE: u32 = 512;
pub const _IO_SHOWPOS: u32 = 1024;
pub const _IO_SCIENTIFIC: u32 = 2048;
pub const _IO_FIXED: u32 = 4096;
pub const _IO_UNITBUF: u32 = 8192;
pub const _IO_STDIO: u32 = 16384;
pub const _IO_DONT_CLOSE: u32 = 32768;
pub const _IO_BOOLALPHA: u32 = 65536;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const __timespec_defined: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _SYS_SYSMACROS_H: u32 = 1;
pub const _BITS_SYSMACROS_H: u32 = 1;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const __PTHREAD_MUTEX_LOCK_ELISION: u32 = 1;
pub const __PTHREAD_MUTEX_NUSERS_AFTER_KIND: u32 = 0;
pub const __PTHREAD_MUTEX_USE_UNION: u32 = 0;
pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const _STRING_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _FCNTL_H: u32 = 1;
pub const __O_LARGEFILE: u32 = 0;
pub const F_GETLK64: u32 = 5;
pub const F_SETLK64: u32 = 6;
pub const F_SETLKW64: u32 = 7;
pub const O_ACCMODE: u32 = 3;
pub const O_RDONLY: u32 = 0;
pub const O_WRONLY: u32 = 1;
pub const O_RDWR: u32 = 2;
pub const O_CREAT: u32 = 64;
pub const O_EXCL: u32 = 128;
pub const O_NOCTTY: u32 = 256;
pub const O_TRUNC: u32 = 512;
pub const O_APPEND: u32 = 1024;
pub const O_NONBLOCK: u32 = 2048;
pub const O_NDELAY: u32 = 2048;
pub const O_SYNC: u32 = 1052672;
pub const O_FSYNC: u32 = 1052672;
pub const O_ASYNC: u32 = 8192;
pub const __O_DIRECTORY: u32 = 65536;
pub const __O_NOFOLLOW: u32 = 131072;
pub const __O_CLOEXEC: u32 = 524288;
pub const __O_DIRECT: u32 = 16384;
pub const __O_NOATIME: u32 = 262144;
pub const __O_PATH: u32 = 2097152;
pub const __O_DSYNC: u32 = 4096;
pub const __O_TMPFILE: u32 = 4259840;
pub const F_GETLK: u32 = 5;
pub const F_SETLK: u32 = 6;
pub const F_SETLKW: u32 = 7;
pub const O_DIRECTORY: u32 = 65536;
pub const O_NOFOLLOW: u32 = 131072;
pub const O_CLOEXEC: u32 = 524288;
pub const O_DSYNC: u32 = 4096;
pub const O_RSYNC: u32 = 1052672;
pub const F_DUPFD: u32 = 0;
pub const F_GETFD: u32 = 1;
pub const F_SETFD: u32 = 2;
pub const F_GETFL: u32 = 3;
pub const F_SETFL: u32 = 4;
pub const __F_SETOWN: u32 = 8;
pub const __F_GETOWN: u32 = 9;
pub const F_SETOWN: u32 = 8;
pub const F_GETOWN: u32 = 9;
pub const __F_SETSIG: u32 = 10;
pub const __F_GETSIG: u32 = 11;
pub const __F_SETOWN_EX: u32 = 15;
pub const __F_GETOWN_EX: u32 = 16;
pub const F_DUPFD_CLOEXEC: u32 = 1030;
pub const FD_CLOEXEC: u32 = 1;
pub const F_RDLCK: u32 = 0;
pub const F_WRLCK: u32 = 1;
pub const F_UNLCK: u32 = 2;
pub const F_EXLCK: u32 = 4;
pub const F_SHLCK: u32 = 8;
pub const LOCK_SH: u32 = 1;
pub const LOCK_EX: u32 = 2;
pub const LOCK_NB: u32 = 4;
pub const LOCK_UN: u32 = 8;
pub const FAPPEND: u32 = 1024;
pub const FFSYNC: u32 = 1052672;
pub const FASYNC: u32 = 8192;
pub const FNONBLOCK: u32 = 2048;
pub const FNDELAY: u32 = 2048;
pub const __POSIX_FADV_DONTNEED: u32 = 4;
pub const __POSIX_FADV_NOREUSE: u32 = 5;
pub const POSIX_FADV_NORMAL: u32 = 0;
pub const POSIX_FADV_RANDOM: u32 = 1;
pub const POSIX_FADV_SEQUENTIAL: u32 = 2;
pub const POSIX_FADV_WILLNEED: u32 = 3;
pub const POSIX_FADV_DONTNEED: u32 = 4;
pub const POSIX_FADV_NOREUSE: u32 = 5;
pub const _BITS_STAT_H: u32 = 1;
pub const _STAT_VER_KERNEL: u32 = 0;
pub const _STAT_VER_LINUX: u32 = 1;
pub const _MKNOD_VER_LINUX: u32 = 0;
pub const _STAT_VER: u32 = 1;
pub const __S_IFMT: u32 = 61440;
pub const __S_IFDIR: u32 = 16384;
pub const __S_IFCHR: u32 = 8192;
pub const __S_IFBLK: u32 = 24576;
pub const __S_IFREG: u32 = 32768;
pub const __S_IFIFO: u32 = 4096;
pub const __S_IFLNK: u32 = 40960;
pub const __S_IFSOCK: u32 = 49152;
pub const __S_ISUID: u32 = 2048;
pub const __S_ISGID: u32 = 1024;
pub const __S_ISVTX: u32 = 512;
pub const __S_IREAD: u32 = 256;
pub const __S_IWRITE: u32 = 128;
pub const __S_IEXEC: u32 = 64;
pub const UTIME_NOW: u32 = 1073741823;
pub const UTIME_OMIT: u32 = 1073741822;
pub const S_IFMT: u32 = 61440;
pub const S_IFDIR: u32 = 16384;
pub const S_IFCHR: u32 = 8192;
pub const S_IFBLK: u32 = 24576;
pub const S_IFREG: u32 = 32768;
pub const S_IFIFO: u32 = 4096;
pub const S_IFLNK: u32 = 40960;
pub const S_IFSOCK: u32 = 49152;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXU: u32 = 448;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXG: u32 = 56;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const S_IRWXO: u32 = 7;
pub const AT_FDCWD: i32 = -100;
pub const AT_SYMLINK_NOFOLLOW: u32 = 256;
pub const AT_REMOVEDIR: u32 = 512;
pub const AT_SYMLINK_FOLLOW: u32 = 1024;
pub const AT_EACCESS: u32 = 512;
pub const _ASSERT_H: u32 = 1;
pub const _SYS_POLL_H: u32 = 1;
pub const POLLIN: u32 = 1;
pub const POLLPRI: u32 = 2;
pub const POLLOUT: u32 = 4;
pub const POLLRDNORM: u32 = 64;
pub const POLLRDBAND: u32 = 128;
pub const POLLWRNORM: u32 = 256;
pub const POLLWRBAND: u32 = 512;
pub const POLLERR: u32 = 8;
pub const POLLHUP: u32 = 16;
pub const POLLNVAL: u32 = 32;
pub const _ERRNO_H: u32 = 1;
pub const _BITS_ERRNO_H: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EDEADLK: u32 = 35;
pub const ENAMETOOLONG: u32 = 36;
pub const ENOLCK: u32 = 37;
pub const ENOSYS: u32 = 38;
pub const ENOTEMPTY: u32 = 39;
pub const ELOOP: u32 = 40;
pub const EWOULDBLOCK: u32 = 11;
pub const ENOMSG: u32 = 42;
pub const EIDRM: u32 = 43;
pub const ECHRNG: u32 = 44;
pub const EL2NSYNC: u32 = 45;
pub const EL3HLT: u32 = 46;
pub const EL3RST: u32 = 47;
pub const ELNRNG: u32 = 48;
pub const EUNATCH: u32 = 49;
pub const ENOCSI: u32 = 50;
pub const EL2HLT: u32 = 51;
pub const EBADE: u32 = 52;
pub const EBADR: u32 = 53;
pub const EXFULL: u32 = 54;
pub const ENOANO: u32 = 55;
pub const EBADRQC: u32 = 56;
pub const EBADSLT: u32 = 57;
pub const EDEADLOCK: u32 = 35;
pub const EBFONT: u32 = 59;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENONET: u32 = 64;
pub const ENOPKG: u32 = 65;
pub const EREMOTE: u32 = 66;
pub const ENOLINK: u32 = 67;
pub const EADV: u32 = 68;
pub const ESRMNT: u32 = 69;
pub const ECOMM: u32 = 70;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 72;
pub const EDOTDOT: u32 = 73;
pub const EBADMSG: u32 = 74;
pub const EOVERFLOW: u32 = 75;
pub const ENOTUNIQ: u32 = 76;
pub const EBADFD: u32 = 77;
pub const EREMCHG: u32 = 78;
pub const ELIBACC: u32 = 79;
pub const ELIBBAD: u32 = 80;
pub const ELIBSCN: u32 = 81;
pub const ELIBMAX: u32 = 82;
pub const ELIBEXEC: u32 = 83;
pub const EILSEQ: u32 = 84;
pub const ERESTART: u32 = 85;
pub const ESTRPIPE: u32 = 86;
pub const EUSERS: u32 = 87;
pub const ENOTSOCK: u32 = 88;
pub const EDESTADDRREQ: u32 = 89;
pub const EMSGSIZE: u32 = 90;
pub const EPROTOTYPE: u32 = 91;
pub const ENOPROTOOPT: u32 = 92;
pub const EPROTONOSUPPORT: u32 = 93;
pub const ESOCKTNOSUPPORT: u32 = 94;
pub const EOPNOTSUPP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const EAFNOSUPPORT: u32 = 97;
pub const EADDRINUSE: u32 = 98;
pub const EADDRNOTAVAIL: u32 = 99;
pub const ENETDOWN: u32 = 100;
pub const ENETUNREACH: u32 = 101;
pub const ENETRESET: u32 = 102;
pub const ECONNABORTED: u32 = 103;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EISCONN: u32 = 106;
pub const ENOTCONN: u32 = 107;
pub const ESHUTDOWN: u32 = 108;
pub const ETOOMANYREFS: u32 = 109;
pub const ETIMEDOUT: u32 = 110;
pub const ECONNREFUSED: u32 = 111;
pub const EHOSTDOWN: u32 = 112;
pub const EHOSTUNREACH: u32 = 113;
pub const EALREADY: u32 = 114;
pub const EINPROGRESS: u32 = 115;
pub const ESTALE: u32 = 116;
pub const EUCLEAN: u32 = 117;
pub const ENOTNAM: u32 = 118;
pub const ENAVAIL: u32 = 119;
pub const EISNAM: u32 = 120;
pub const EREMOTEIO: u32 = 121;
pub const EDQUOT: u32 = 122;
pub const ENOMEDIUM: u32 = 123;
pub const EMEDIUMTYPE: u32 = 124;
pub const ECANCELED: u32 = 125;
pub const ENOKEY: u32 = 126;
pub const EKEYEXPIRED: u32 = 127;
pub const EKEYREVOKED: u32 = 128;
pub const EKEYREJECTED: u32 = 129;
pub const EOWNERDEAD: u32 = 130;
pub const ENOTRECOVERABLE: u32 = 131;
pub const ERFKILL: u32 = 132;
pub const EHWPOISON: u32 = 133;
pub const ENOTSUP: u32 = 95;
pub const IEC958_AES0_PROFESSIONAL: u32 = 1;
pub const IEC958_AES0_NONAUDIO: u32 = 2;
pub const IEC958_AES0_PRO_EMPHASIS: u32 = 28;
pub const IEC958_AES0_PRO_EMPHASIS_NOTID: u32 = 0;
pub const IEC958_AES0_PRO_EMPHASIS_NONE: u32 = 4;
pub const IEC958_AES0_PRO_EMPHASIS_5015: u32 = 12;
pub const IEC958_AES0_PRO_EMPHASIS_CCITT: u32 = 28;
pub const IEC958_AES0_PRO_FREQ_UNLOCKED: u32 = 32;
pub const IEC958_AES0_PRO_FS: u32 = 192;
pub const IEC958_AES0_PRO_FS_NOTID: u32 = 0;
pub const IEC958_AES0_PRO_FS_44100: u32 = 64;
pub const IEC958_AES0_PRO_FS_48000: u32 = 128;
pub const IEC958_AES0_PRO_FS_32000: u32 = 192;
pub const IEC958_AES0_CON_NOT_COPYRIGHT: u32 = 4;
pub const IEC958_AES0_CON_EMPHASIS: u32 = 56;
pub const IEC958_AES0_CON_EMPHASIS_NONE: u32 = 0;
pub const IEC958_AES0_CON_EMPHASIS_5015: u32 = 8;
pub const IEC958_AES0_CON_MODE: u32 = 192;
pub const IEC958_AES1_PRO_MODE: u32 = 15;
pub const IEC958_AES1_PRO_MODE_NOTID: u32 = 0;
pub const IEC958_AES1_PRO_MODE_STEREOPHONIC: u32 = 2;
pub const IEC958_AES1_PRO_MODE_SINGLE: u32 = 4;
pub const IEC958_AES1_PRO_MODE_TWO: u32 = 8;
pub const IEC958_AES1_PRO_MODE_PRIMARY: u32 = 12;
pub const IEC958_AES1_PRO_MODE_BYTE3: u32 = 15;
pub const IEC958_AES1_PRO_USERBITS: u32 = 240;
pub const IEC958_AES1_PRO_USERBITS_NOTID: u32 = 0;
pub const IEC958_AES1_PRO_USERBITS_192: u32 = 128;
pub const IEC958_AES1_PRO_USERBITS_UDEF: u32 = 192;
pub const IEC958_AES1_CON_CATEGORY: u32 = 127;
pub const IEC958_AES1_CON_GENERAL: u32 = 0;
pub const IEC958_AES1_CON_LASEROPT_MASK: u32 = 7;
pub const IEC958_AES1_CON_LASEROPT_ID: u32 = 1;
pub const IEC958_AES1_CON_IEC908_CD: u32 = 1;
pub const IEC958_AES1_CON_NON_IEC908_CD: u32 = 9;
pub const IEC958_AES1_CON_MINI_DISC: u32 = 73;
pub const IEC958_AES1_CON_DVD: u32 = 25;
pub const IEC958_AES1_CON_LASTEROPT_OTHER: u32 = 121;
pub const IEC958_AES1_CON_DIGDIGCONV_MASK: u32 = 7;
pub const IEC958_AES1_CON_DIGDIGCONV_ID: u32 = 2;
pub const IEC958_AES1_CON_PCM_CODER: u32 = 2;
pub const IEC958_AES1_CON_MIXER: u32 = 18;
pub const IEC958_AES1_CON_RATE_CONVERTER: u32 = 26;
pub const IEC958_AES1_CON_SAMPLER: u32 = 34;
pub const IEC958_AES1_CON_DSP: u32 = 42;
pub const IEC958_AES1_CON_DIGDIGCONV_OTHER: u32 = 122;
pub const IEC958_AES1_CON_MAGNETIC_MASK: u32 = 7;
pub const IEC958_AES1_CON_MAGNETIC_ID: u32 = 3;
pub const IEC958_AES1_CON_DAT: u32 = 3;
pub const IEC958_AES1_CON_VCR: u32 = 11;
pub const IEC958_AES1_CON_DCC: u32 = 67;
pub const IEC958_AES1_CON_MAGNETIC_DISC: u32 = 27;
pub const IEC958_AES1_CON_MAGNETIC_OTHER: u32 = 123;
pub const IEC958_AES1_CON_BROADCAST1_MASK: u32 = 7;
pub const IEC958_AES1_CON_BROADCAST1_ID: u32 = 4;
pub const IEC958_AES1_CON_DAB_JAPAN: u32 = 4;
pub const IEC958_AES1_CON_DAB_EUROPE: u32 = 12;
pub const IEC958_AES1_CON_DAB_USA: u32 = 100;
pub const IEC958_AES1_CON_SOFTWARE: u32 = 68;
pub const IEC958_AES1_CON_IEC62105: u32 = 36;
pub const IEC958_AES1_CON_BROADCAST1_OTHER: u32 = 124;
pub const IEC958_AES1_CON_BROADCAST2_MASK: u32 = 15;
pub const IEC958_AES1_CON_BROADCAST2_ID: u32 = 14;
pub const IEC958_AES1_CON_MUSICAL_MASK: u32 = 7;
pub const IEC958_AES1_CON_MUSICAL_ID: u32 = 5;
pub const IEC958_AES1_CON_SYNTHESIZER: u32 = 5;
pub const IEC958_AES1_CON_MICROPHONE: u32 = 13;
pub const IEC958_AES1_CON_MUSICAL_OTHER: u32 = 125;
pub const IEC958_AES1_CON_ADC_MASK: u32 = 31;
pub const IEC958_AES1_CON_ADC_ID: u32 = 6;
pub const IEC958_AES1_CON_ADC: u32 = 6;
pub const IEC958_AES1_CON_ADC_OTHER: u32 = 102;
pub const IEC958_AES1_CON_ADC_COPYRIGHT_MASK: u32 = 31;
pub const IEC958_AES1_CON_ADC_COPYRIGHT_ID: u32 = 22;
pub const IEC958_AES1_CON_ADC_COPYRIGHT: u32 = 22;
pub const IEC958_AES1_CON_ADC_COPYRIGHT_OTHER: u32 = 118;
pub const IEC958_AES1_CON_SOLIDMEM_MASK: u32 = 15;
pub const IEC958_AES1_CON_SOLIDMEM_ID: u32 = 8;
pub const IEC958_AES1_CON_SOLIDMEM_DIGITAL_RECORDER_PLAYER: u32 = 8;
pub const IEC958_AES1_CON_SOLIDMEM_OTHER: u32 = 120;
pub const IEC958_AES1_CON_EXPERIMENTAL: u32 = 64;
pub const IEC958_AES1_CON_ORIGINAL: u32 = 128;
pub const IEC958_AES2_PRO_SBITS: u32 = 7;
pub const IEC958_AES2_PRO_SBITS_20: u32 = 2;
pub const IEC958_AES2_PRO_SBITS_24: u32 = 4;
pub const IEC958_AES2_PRO_SBITS_UDEF: u32 = 6;
pub const IEC958_AES2_PRO_WORDLEN: u32 = 56;
pub const IEC958_AES2_PRO_WORDLEN_NOTID: u32 = 0;
pub const IEC958_AES2_PRO_WORDLEN_22_18: u32 = 16;
pub const IEC958_AES2_PRO_WORDLEN_23_19: u32 = 32;
pub const IEC958_AES2_PRO_WORDLEN_24_20: u32 = 40;
pub const IEC958_AES2_PRO_WORDLEN_20_16: u32 = 48;
pub const IEC958_AES2_CON_SOURCE: u32 = 15;
pub const IEC958_AES2_CON_SOURCE_UNSPEC: u32 = 0;
pub const IEC958_AES2_CON_CHANNEL: u32 = 240;
pub const IEC958_AES2_CON_CHANNEL_UNSPEC: u32 = 0;
pub const IEC958_AES3_CON_FS: u32 = 15;
pub const IEC958_AES3_CON_FS_44100: u32 = 0;
pub const IEC958_AES3_CON_FS_NOTID: u32 = 1;
pub const IEC958_AES3_CON_FS_48000: u32 = 2;
pub const IEC958_AES3_CON_FS_32000: u32 = 3;
pub const IEC958_AES3_CON_FS_22050: u32 = 4;
pub const IEC958_AES3_CON_FS_24000: u32 = 6;
pub const IEC958_AES3_CON_FS_88200: u32 = 8;
pub const IEC958_AES3_CON_FS_768000: u32 = 9;
pub const IEC958_AES3_CON_FS_96000: u32 = 10;
pub const IEC958_AES3_CON_FS_176400: u32 = 12;
pub const IEC958_AES3_CON_FS_192000: u32 = 14;
pub const IEC958_AES3_CON_CLOCK: u32 = 48;
pub const IEC958_AES3_CON_CLOCK_1000PPM: u32 = 0;
pub const IEC958_AES3_CON_CLOCK_50PPM: u32 = 16;
pub const IEC958_AES3_CON_CLOCK_VARIABLE: u32 = 32;
pub const IEC958_AES4_CON_MAX_WORDLEN_24: u32 = 1;
pub const IEC958_AES4_CON_WORDLEN: u32 = 14;
pub const IEC958_AES4_CON_WORDLEN_NOTID: u32 = 0;
pub const IEC958_AES4_CON_WORDLEN_20_16: u32 = 2;
pub const IEC958_AES4_CON_WORDLEN_22_18: u32 = 4;
pub const IEC958_AES4_CON_WORDLEN_23_19: u32 = 8;
pub const IEC958_AES4_CON_WORDLEN_24_20: u32 = 10;
pub const IEC958_AES4_CON_WORDLEN_21_17: u32 = 12;
pub const IEC958_AES4_CON_ORIGFS: u32 = 240;
pub const IEC958_AES4_CON_ORIGFS_NOTID: u32 = 0;
pub const IEC958_AES4_CON_ORIGFS_192000: u32 = 16;
pub const IEC958_AES4_CON_ORIGFS_12000: u32 = 32;
pub const IEC958_AES4_CON_ORIGFS_176400: u32 = 48;
pub const IEC958_AES4_CON_ORIGFS_96000: u32 = 80;
pub const IEC958_AES4_CON_ORIGFS_8000: u32 = 96;
pub const IEC958_AES4_CON_ORIGFS_88200: u32 = 112;
pub const IEC958_AES4_CON_ORIGFS_16000: u32 = 128;
pub const IEC958_AES4_CON_ORIGFS_24000: u32 = 144;
pub const IEC958_AES4_CON_ORIGFS_11025: u32 = 160;
pub const IEC958_AES4_CON_ORIGFS_22050: u32 = 176;
pub const IEC958_AES4_CON_ORIGFS_32000: u32 = 192;
pub const IEC958_AES4_CON_ORIGFS_48000: u32 = 208;
pub const IEC958_AES4_CON_ORIGFS_44100: u32 = 240;
pub const IEC958_AES5_CON_CGMSA: u32 = 3;
pub const IEC958_AES5_CON_CGMSA_COPYFREELY: u32 = 0;
pub const IEC958_AES5_CON_CGMSA_COPYONCE: u32 = 1;
pub const IEC958_AES5_CON_CGMSA_COPYNOMORE: u32 = 2;
pub const IEC958_AES5_CON_CGMSA_COPYNEVER: u32 = 3;
pub const MIDI_CHANNELS: u32 = 16;
pub const MIDI_GM_DRUM_CHANNEL: u32 = 9;
pub const MIDI_CMD_NOTE_OFF: u32 = 128;
pub const MIDI_CMD_NOTE_ON: u32 = 144;
pub const MIDI_CMD_NOTE_PRESSURE: u32 = 160;
pub const MIDI_CMD_CONTROL: u32 = 176;
pub const MIDI_CMD_PGM_CHANGE: u32 = 192;
pub const MIDI_CMD_CHANNEL_PRESSURE: u32 = 208;
pub const MIDI_CMD_BENDER: u32 = 224;
pub const MIDI_CMD_COMMON_SYSEX: u32 = 240;
pub const MIDI_CMD_COMMON_MTC_QUARTER: u32 = 241;
pub const MIDI_CMD_COMMON_SONG_POS: u32 = 242;
pub const MIDI_CMD_COMMON_SONG_SELECT: u32 = 243;
pub const MIDI_CMD_COMMON_TUNE_REQUEST: u32 = 246;
pub const MIDI_CMD_COMMON_SYSEX_END: u32 = 247;
pub const MIDI_CMD_COMMON_CLOCK: u32 = 248;
pub const MIDI_CMD_COMMON_START: u32 = 250;
pub const MIDI_CMD_COMMON_CONTINUE: u32 = 251;
pub const MIDI_CMD_COMMON_STOP: u32 = 252;
pub const MIDI_CMD_COMMON_SENSING: u32 = 254;
pub const MIDI_CMD_COMMON_RESET: u32 = 255;
pub const MIDI_CTL_MSB_BANK: u32 = 0;
pub const MIDI_CTL_MSB_MODWHEEL: u32 = 1;
pub const MIDI_CTL_MSB_BREATH: u32 = 2;
pub const MIDI_CTL_MSB_FOOT: u32 = 4;
pub const MIDI_CTL_MSB_PORTAMENTO_TIME: u32 = 5;
pub const MIDI_CTL_MSB_DATA_ENTRY: u32 = 6;
pub const MIDI_CTL_MSB_MAIN_VOLUME: u32 = 7;
pub const MIDI_CTL_MSB_BALANCE: u32 = 8;
pub const MIDI_CTL_MSB_PAN: u32 = 10;
pub const MIDI_CTL_MSB_EXPRESSION: u32 = 11;
pub const MIDI_CTL_MSB_EFFECT1: u32 = 12;
pub const MIDI_CTL_MSB_EFFECT2: u32 = 13;
pub const MIDI_CTL_MSB_GENERAL_PURPOSE1: u32 = 16;
pub const MIDI_CTL_MSB_GENERAL_PURPOSE2: u32 = 17;
pub const MIDI_CTL_MSB_GENERAL_PURPOSE3: u32 = 18;
pub const MIDI_CTL_MSB_GENERAL_PURPOSE4: u32 = 19;
pub const MIDI_CTL_LSB_BANK: u32 = 32;
pub const MIDI_CTL_LSB_MODWHEEL: u32 = 33;
pub const MIDI_CTL_LSB_BREATH: u32 = 34;
pub const MIDI_CTL_LSB_FOOT: u32 = 36;
pub const MIDI_CTL_LSB_PORTAMENTO_TIME: u32 = 37;
pub const MIDI_CTL_LSB_DATA_ENTRY: u32 = 38;
pub const MIDI_CTL_LSB_MAIN_VOLUME: u32 = 39;
pub const MIDI_CTL_LSB_BALANCE: u32 = 40;
pub const MIDI_CTL_LSB_PAN: u32 = 42;
pub const MIDI_CTL_LSB_EXPRESSION: u32 = 43;
pub const MIDI_CTL_LSB_EFFECT1: u32 = 44;
pub const MIDI_CTL_LSB_EFFECT2: u32 = 45;
pub const MIDI_CTL_LSB_GENERAL_PURPOSE1: u32 = 48;
pub const MIDI_CTL_LSB_GENERAL_PURPOSE2: u32 = 49;
pub const MIDI_CTL_LSB_GENERAL_PURPOSE3: u32 = 50;
pub const MIDI_CTL_LSB_GENERAL_PURPOSE4: u32 = 51;
pub const MIDI_CTL_SUSTAIN: u32 = 64;
pub const MIDI_CTL_PORTAMENTO: u32 = 65;
pub const MIDI_CTL_SOSTENUTO: u32 = 66;
pub const MIDI_CTL_SUSTENUTO: u32 = 66;
pub const MIDI_CTL_SOFT_PEDAL: u32 = 67;
pub const MIDI_CTL_LEGATO_FOOTSWITCH: u32 = 68;
pub const MIDI_CTL_HOLD2: u32 = 69;
pub const MIDI_CTL_SC1_SOUND_VARIATION: u32 = 70;
pub const MIDI_CTL_SC2_TIMBRE: u32 = 71;
pub const MIDI_CTL_SC3_RELEASE_TIME: u32 = 72;
pub const MIDI_CTL_SC4_ATTACK_TIME: u32 = 73;
pub const MIDI_CTL_SC5_BRIGHTNESS: u32 = 74;
pub const MIDI_CTL_SC6: u32 = 75;
pub const MIDI_CTL_SC7: u32 = 76;
pub const MIDI_CTL_SC8: u32 = 77;
pub const MIDI_CTL_SC9: u32 = 78;
pub const MIDI_CTL_SC10: u32 = 79;
pub const MIDI_CTL_GENERAL_PURPOSE5: u32 = 80;
pub const MIDI_CTL_GENERAL_PURPOSE6: u32 = 81;
pub const MIDI_CTL_GENERAL_PURPOSE7: u32 = 82;
pub const MIDI_CTL_GENERAL_PURPOSE8: u32 = 83;
pub const MIDI_CTL_PORTAMENTO_CONTROL: u32 = 84;
pub const MIDI_CTL_E1_REVERB_DEPTH: u32 = 91;
pub const MIDI_CTL_E2_TREMOLO_DEPTH: u32 = 92;
pub const MIDI_CTL_E3_CHORUS_DEPTH: u32 = 93;
pub const MIDI_CTL_E4_DETUNE_DEPTH: u32 = 94;
pub const MIDI_CTL_E5_PHASER_DEPTH: u32 = 95;
pub const MIDI_CTL_DATA_INCREMENT: u32 = 96;
pub const MIDI_CTL_DATA_DECREMENT: u32 = 97;
pub const MIDI_CTL_NONREG_PARM_NUM_LSB: u32 = 98;
pub const MIDI_CTL_NONREG_PARM_NUM_MSB: u32 = 99;
pub const MIDI_CTL_REGIST_PARM_NUM_LSB: u32 = 100;
pub const MIDI_CTL_REGIST_PARM_NUM_MSB: u32 = 101;
pub const MIDI_CTL_ALL_SOUNDS_OFF: u32 = 120;
pub const MIDI_CTL_RESET_CONTROLLERS: u32 = 121;
pub const MIDI_CTL_LOCAL_CONTROL_SWITCH: u32 = 122;
pub const MIDI_CTL_ALL_NOTES_OFF: u32 = 123;
pub const MIDI_CTL_OMNI_OFF: u32 = 124;
pub const MIDI_CTL_OMNI_ON: u32 = 125;
pub const MIDI_CTL_MONO1: u32 = 126;
pub const MIDI_CTL_MONO2: u32 = 127;
pub const SND_LIB_MAJOR: u32 = 1;
pub const SND_LIB_MINOR: u32 = 1;
pub const SND_LIB_SUBMINOR: u32 = 9;
pub const SND_LIB_EXTRAVER: u32 = 1000000;
pub const SND_LIB_VERSION: u32 = 65801;
pub const SND_LIB_VERSION_STR: &'static [u8; 6usize] = b"1.1.9\0";
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const __struct_tm_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const SND_ERROR_BEGIN: u32 = 500000;
pub const SND_ERROR_INCOMPATIBLE_VERSION: u32 = 500000;
pub const SND_ERROR_ALISP_NIL: u32 = 500001;
pub const _STDINT_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const SND_PCM_NONBLOCK: u32 = 1;
pub const SND_PCM_ASYNC: u32 = 2;
pub const SND_PCM_ABORT: u32 = 32768;
pub const SND_PCM_NO_AUTO_RESAMPLE: u32 = 65536;
pub const SND_PCM_NO_AUTO_CHANNELS: u32 = 131072;
pub const SND_PCM_NO_AUTO_FORMAT: u32 = 262144;
pub const SND_PCM_NO_SOFTVOL: u32 = 524288;
pub const SND_CHMAP_API_VERSION: u32 = 65537;
pub const SND_CHMAP_POSITION_MASK: u32 = 65535;
pub const SND_CHMAP_PHASE_INVERSE: u32 = 65536;
pub const SND_CHMAP_DRIVER_SPEC: u32 = 131072;
pub const SND_RAWMIDI_APPEND: u32 = 1;
pub const SND_RAWMIDI_NONBLOCK: u32 = 2;
pub const SND_RAWMIDI_SYNC: u32 = 4;
pub const SND_TIMER_GLOBAL_SYSTEM: u32 = 0;
pub const SND_TIMER_GLOBAL_RTC: u32 = 1;
pub const SND_TIMER_GLOBAL_HPET: u32 = 2;
pub const SND_TIMER_GLOBAL_HRTIMER: u32 = 3;
pub const SND_TIMER_OPEN_NONBLOCK: u32 = 1;
pub const SND_TIMER_OPEN_TREAD: u32 = 2;
pub const SND_HWDEP_OPEN_READ: u32 = 0;
pub const SND_HWDEP_OPEN_WRITE: u32 = 1;
pub const SND_HWDEP_OPEN_DUPLEX: u32 = 2;
pub const SND_HWDEP_OPEN_NONBLOCK: u32 = 2048;
pub const SND_CTL_EVENT_MASK_REMOVE: i32 = -1;
pub const SND_CTL_EVENT_MASK_VALUE: u32 = 1;
pub const SND_CTL_EVENT_MASK_INFO: u32 = 2;
pub const SND_CTL_EVENT_MASK_ADD: u32 = 4;
pub const SND_CTL_EVENT_MASK_TLV: u32 = 8;
pub const SND_CTL_NAME_NONE: &'static [u8; 1usize] = b"\0";
pub const SND_CTL_NAME_PLAYBACK: &'static [u8; 10usize] = b"Playback \0";
pub const SND_CTL_NAME_CAPTURE: &'static [u8; 9usize] = b"Capture \0";
pub const SND_CTL_NAME_IEC958_NONE: &'static [u8; 1usize] = b"\0";
pub const SND_CTL_NAME_IEC958_SWITCH: &'static [u8; 7usize] = b"Switch\0";
pub const SND_CTL_NAME_IEC958_VOLUME: &'static [u8; 7usize] = b"Volume\0";
pub const SND_CTL_NAME_IEC958_DEFAULT: &'static [u8; 8usize] = b"Default\0";
pub const SND_CTL_NAME_IEC958_MASK: &'static [u8; 5usize] = b"Mask\0";
pub const SND_CTL_NAME_IEC958_CON_MASK: &'static [u8; 9usize] = b"Con Mask\0";
pub const SND_CTL_NAME_IEC958_PRO_MASK: &'static [u8; 9usize] = b"Pro Mask\0";
pub const SND_CTL_NAME_IEC958_PCM_STREAM: &'static [u8; 11usize] = b"PCM Stream\0";
pub const SND_CTL_POWER_MASK: u32 = 65280;
pub const SND_CTL_POWER_D0: u32 = 0;
pub const SND_CTL_POWER_D1: u32 = 256;
pub const SND_CTL_POWER_D2: u32 = 512;
pub const SND_CTL_POWER_D3: u32 = 768;
pub const SND_CTL_POWER_D3hot: u32 = 768;
pub const SND_CTL_POWER_D3cold: u32 = 769;
pub const SND_CTL_TLVT_CONTAINER: u32 = 0;
pub const SND_CTL_TLVT_DB_SCALE: u32 = 1;
pub const SND_CTL_TLVT_DB_LINEAR: u32 = 2;
pub const SND_CTL_TLVT_DB_RANGE: u32 = 3;
pub const SND_CTL_TLVT_DB_MINMAX: u32 = 4;
pub const SND_CTL_TLVT_DB_MINMAX_MUTE: u32 = 5;
pub const SND_CTL_TLV_DB_GAIN_MUTE: i32 = -9999999;
pub const SND_CTL_TLVT_CHMAP_FIXED: u32 = 257;
pub const SND_CTL_TLVT_CHMAP_VAR: u32 = 258;
pub const SND_CTL_TLVT_CHMAP_PAIRED: u32 = 259;
pub const SND_CTL_NONBLOCK: u32 = 1;
pub const SND_CTL_ASYNC: u32 = 2;
pub const SND_CTL_READONLY: u32 = 4;
pub const SND_SCTL_NOFREE: u32 = 1;
pub const SND_SEQ_TIME_STAMP_TICK: u32 = 0;
pub const SND_SEQ_TIME_STAMP_REAL: u32 = 1;
pub const SND_SEQ_TIME_STAMP_MASK: u32 = 1;
pub const SND_SEQ_TIME_MODE_ABS: u32 = 0;
pub const SND_SEQ_TIME_MODE_REL: u32 = 2;
pub const SND_SEQ_TIME_MODE_MASK: u32 = 2;
pub const SND_SEQ_EVENT_LENGTH_FIXED: u32 = 0;
pub const SND_SEQ_EVENT_LENGTH_VARIABLE: u32 = 4;
pub const SND_SEQ_EVENT_LENGTH_VARUSR: u32 = 8;
pub const SND_SEQ_EVENT_LENGTH_MASK: u32 = 12;
pub const SND_SEQ_PRIORITY_NORMAL: u32 = 0;
pub const SND_SEQ_PRIORITY_HIGH: u32 = 16;
pub const SND_SEQ_PRIORITY_MASK: u32 = 16;
pub const SND_SEQ_OPEN_OUTPUT: u32 = 1;
pub const SND_SEQ_OPEN_INPUT: u32 = 2;
pub const SND_SEQ_OPEN_DUPLEX: u32 = 3;
pub const SND_SEQ_NONBLOCK: u32 = 1;
pub const SND_SEQ_ADDRESS_UNKNOWN: u32 = 253;
pub const SND_SEQ_ADDRESS_SUBSCRIBERS: u32 = 254;
pub const SND_SEQ_ADDRESS_BROADCAST: u32 = 255;
pub const SND_SEQ_CLIENT_SYSTEM: u32 = 0;
pub const SND_SEQ_PORT_SYSTEM_TIMER: u32 = 0;
pub const SND_SEQ_PORT_SYSTEM_ANNOUNCE: u32 = 1;
pub const SND_SEQ_PORT_CAP_READ: u32 = 1;
pub const SND_SEQ_PORT_CAP_WRITE: u32 = 2;
pub const SND_SEQ_PORT_CAP_SYNC_READ: u32 = 4;
pub const SND_SEQ_PORT_CAP_SYNC_WRITE: u32 = 8;
pub const SND_SEQ_PORT_CAP_DUPLEX: u32 = 16;
pub const SND_SEQ_PORT_CAP_SUBS_READ: u32 = 32;
pub const SND_SEQ_PORT_CAP_SUBS_WRITE: u32 = 64;
pub const SND_SEQ_PORT_CAP_NO_EXPORT: u32 = 128;
pub const SND_SEQ_PORT_TYPE_SPECIFIC: u32 = 1;
pub const SND_SEQ_PORT_TYPE_MIDI_GENERIC: u32 = 2;
pub const SND_SEQ_PORT_TYPE_MIDI_GM: u32 = 4;
pub const SND_SEQ_PORT_TYPE_MIDI_GS: u32 = 8;
pub const SND_SEQ_PORT_TYPE_MIDI_XG: u32 = 16;
pub const SND_SEQ_PORT_TYPE_MIDI_MT32: u32 = 32;
pub const SND_SEQ_PORT_TYPE_MIDI_GM2: u32 = 64;
pub const SND_SEQ_PORT_TYPE_SYNTH: u32 = 1024;
pub const SND_SEQ_PORT_TYPE_DIRECT_SAMPLE: u32 = 2048;
pub const SND_SEQ_PORT_TYPE_SAMPLE: u32 = 4096;
pub const SND_SEQ_PORT_TYPE_HARDWARE: u32 = 65536;
pub const SND_SEQ_PORT_TYPE_SOFTWARE: u32 = 131072;
pub const SND_SEQ_PORT_TYPE_SYNTHESIZER: u32 = 262144;
pub const SND_SEQ_PORT_TYPE_PORT: u32 = 524288;
pub const SND_SEQ_PORT_TYPE_APPLICATION: u32 = 1048576;
pub const SND_SEQ_QUEUE_DIRECT: u32 = 253;
pub const SND_SEQ_REMOVE_INPUT: u32 = 1;
pub const SND_SEQ_REMOVE_OUTPUT: u32 = 2;
pub const SND_SEQ_REMOVE_DEST: u32 = 4;
pub const SND_SEQ_REMOVE_DEST_CHANNEL: u32 = 8;
pub const SND_SEQ_REMOVE_TIME_BEFORE: u32 = 16;
pub const SND_SEQ_REMOVE_TIME_AFTER: u32 = 32;
pub const SND_SEQ_REMOVE_TIME_TICK: u32 = 64;
pub const SND_SEQ_REMOVE_EVENT_TYPE: u32 = 128;
pub const SND_SEQ_REMOVE_IGNORE_OFF: u32 = 256;
pub const SND_SEQ_REMOVE_TAG_MATCH: u32 = 512;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type gid_t = __gid_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type useconds_t = __useconds_t;
pub type pid_t = __pid_t;
pub type socklen_t = __socklen_t;
extern "C" {
    pub fn access(
        __name: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn faccessat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lseek(
        __fd: ::std::os::raw::c_int,
        __offset: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> __off_t;
}
extern "C" {
    pub fn close(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: usize,
    ) -> isize;
}
extern "C" {
    pub fn write(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> isize;
}
extern "C" {
    pub fn pread(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: usize,
        __offset: __off_t,
    ) -> isize;
}
extern "C" {
    pub fn pwrite(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __offset: __off_t,
    ) -> isize;
}
extern "C" {
    pub fn pipe(__pipedes: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alarm(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sleep(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ualarm(__value: __useconds_t, __interval: __useconds_t) -> __useconds_t;
}
extern "C" {
    pub fn usleep(__useconds: __useconds_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pause() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchown(
        __fd: ::std::os::raw::c_int,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchownat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchdir(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getcwd(__buf: *mut ::std::os::raw::c_char, __size: usize)
        -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwd(__buf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dup(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup2(__fd: ::std::os::raw::c_int, __fd2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __environ: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn execve(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fexecve(
        __fd: ::std::os::raw::c_int,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execv(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execle(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execl(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvp(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execlp(
        __file: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nice(__inc: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _exit(__status: ::std::os::raw::c_int);
}
pub const _PC_LINK_MAX: _bindgen_ty_1 = _bindgen_ty_1::_PC_LINK_MAX;
pub const _PC_MAX_CANON: _bindgen_ty_1 = _bindgen_ty_1::_PC_MAX_CANON;
pub const _PC_MAX_INPUT: _bindgen_ty_1 = _bindgen_ty_1::_PC_MAX_INPUT;
pub const _PC_NAME_MAX: _bindgen_ty_1 = _bindgen_ty_1::_PC_NAME_MAX;
pub const _PC_PATH_MAX: _bindgen_ty_1 = _bindgen_ty_1::_PC_PATH_MAX;
pub const _PC_PIPE_BUF: _bindgen_ty_1 = _bindgen_ty_1::_PC_PIPE_BUF;
pub const _PC_CHOWN_RESTRICTED: _bindgen_ty_1 = _bindgen_ty_1::_PC_CHOWN_RESTRICTED;
pub const _PC_NO_TRUNC: _bindgen_ty_1 = _bindgen_ty_1::_PC_NO_TRUNC;
pub const _PC_VDISABLE: _bindgen_ty_1 = _bindgen_ty_1::_PC_VDISABLE;
pub const _PC_SYNC_IO: _bindgen_ty_1 = _bindgen_ty_1::_PC_SYNC_IO;
pub const _PC_ASYNC_IO: _bindgen_ty_1 = _bindgen_ty_1::_PC_ASYNC_IO;
pub const _PC_PRIO_IO: _bindgen_ty_1 = _bindgen_ty_1::_PC_PRIO_IO;
pub const _PC_SOCK_MAXBUF: _bindgen_ty_1 = _bindgen_ty_1::_PC_SOCK_MAXBUF;
pub const _PC_FILESIZEBITS: _bindgen_ty_1 = _bindgen_ty_1::_PC_FILESIZEBITS;
pub const _PC_REC_INCR_XFER_SIZE: _bindgen_ty_1 = _bindgen_ty_1::_PC_REC_INCR_XFER_SIZE;
pub const _PC_REC_MAX_XFER_SIZE: _bindgen_ty_1 = _bindgen_ty_1::_PC_REC_MAX_XFER_SIZE;
pub const _PC_REC_MIN_XFER_SIZE: _bindgen_ty_1 = _bindgen_ty_1::_PC_REC_MIN_XFER_SIZE;
pub const _PC_REC_XFER_ALIGN: _bindgen_ty_1 = _bindgen_ty_1::_PC_REC_XFER_ALIGN;
pub const _PC_ALLOC_SIZE_MIN: _bindgen_ty_1 = _bindgen_ty_1::_PC_ALLOC_SIZE_MIN;
pub const _PC_SYMLINK_MAX: _bindgen_ty_1 = _bindgen_ty_1::_PC_SYMLINK_MAX;
pub const _PC_2_SYMLINKS: _bindgen_ty_1 = _bindgen_ty_1::_PC_2_SYMLINKS;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_1 {
    _PC_LINK_MAX = 0,
    _PC_MAX_CANON = 1,
    _PC_MAX_INPUT = 2,
    _PC_NAME_MAX = 3,
    _PC_PATH_MAX = 4,
    _PC_PIPE_BUF = 5,
    _PC_CHOWN_RESTRICTED = 6,
    _PC_NO_TRUNC = 7,
    _PC_VDISABLE = 8,
    _PC_SYNC_IO = 9,
    _PC_ASYNC_IO = 10,
    _PC_PRIO_IO = 11,
    _PC_SOCK_MAXBUF = 12,
    _PC_FILESIZEBITS = 13,
    _PC_REC_INCR_XFER_SIZE = 14,
    _PC_REC_MAX_XFER_SIZE = 15,
    _PC_REC_MIN_XFER_SIZE = 16,
    _PC_REC_XFER_ALIGN = 17,
    _PC_ALLOC_SIZE_MIN = 18,
    _PC_SYMLINK_MAX = 19,
    _PC_2_SYMLINKS = 20,
}
pub const _SC_ARG_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_ARG_MAX;
pub const _SC_CHILD_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_CHILD_MAX;
pub const _SC_CLK_TCK: _bindgen_ty_2 = _bindgen_ty_2::_SC_CLK_TCK;
pub const _SC_NGROUPS_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_NGROUPS_MAX;
pub const _SC_OPEN_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_OPEN_MAX;
pub const _SC_STREAM_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_STREAM_MAX;
pub const _SC_TZNAME_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_TZNAME_MAX;
pub const _SC_JOB_CONTROL: _bindgen_ty_2 = _bindgen_ty_2::_SC_JOB_CONTROL;
pub const _SC_SAVED_IDS: _bindgen_ty_2 = _bindgen_ty_2::_SC_SAVED_IDS;
pub const _SC_REALTIME_SIGNALS: _bindgen_ty_2 = _bindgen_ty_2::_SC_REALTIME_SIGNALS;
pub const _SC_PRIORITY_SCHEDULING: _bindgen_ty_2 = _bindgen_ty_2::_SC_PRIORITY_SCHEDULING;
pub const _SC_TIMERS: _bindgen_ty_2 = _bindgen_ty_2::_SC_TIMERS;
pub const _SC_ASYNCHRONOUS_IO: _bindgen_ty_2 = _bindgen_ty_2::_SC_ASYNCHRONOUS_IO;
pub const _SC_PRIORITIZED_IO: _bindgen_ty_2 = _bindgen_ty_2::_SC_PRIORITIZED_IO;
pub const _SC_SYNCHRONIZED_IO: _bindgen_ty_2 = _bindgen_ty_2::_SC_SYNCHRONIZED_IO;
pub const _SC_FSYNC: _bindgen_ty_2 = _bindgen_ty_2::_SC_FSYNC;
pub const _SC_MAPPED_FILES: _bindgen_ty_2 = _bindgen_ty_2::_SC_MAPPED_FILES;
pub const _SC_MEMLOCK: _bindgen_ty_2 = _bindgen_ty_2::_SC_MEMLOCK;
pub const _SC_MEMLOCK_RANGE: _bindgen_ty_2 = _bindgen_ty_2::_SC_MEMLOCK_RANGE;
pub const _SC_MEMORY_PROTECTION: _bindgen_ty_2 = _bindgen_ty_2::_SC_MEMORY_PROTECTION;
pub const _SC_MESSAGE_PASSING: _bindgen_ty_2 = _bindgen_ty_2::_SC_MESSAGE_PASSING;
pub const _SC_SEMAPHORES: _bindgen_ty_2 = _bindgen_ty_2::_SC_SEMAPHORES;
pub const _SC_SHARED_MEMORY_OBJECTS: _bindgen_ty_2 = _bindgen_ty_2::_SC_SHARED_MEMORY_OBJECTS;
pub const _SC_AIO_LISTIO_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_AIO_LISTIO_MAX;
pub const _SC_AIO_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_AIO_MAX;
pub const _SC_AIO_PRIO_DELTA_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_AIO_PRIO_DELTA_MAX;
pub const _SC_DELAYTIMER_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_DELAYTIMER_MAX;
pub const _SC_MQ_OPEN_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_MQ_OPEN_MAX;
pub const _SC_MQ_PRIO_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_MQ_PRIO_MAX;
pub const _SC_VERSION: _bindgen_ty_2 = _bindgen_ty_2::_SC_VERSION;
pub const _SC_PAGESIZE: _bindgen_ty_2 = _bindgen_ty_2::_SC_PAGESIZE;
pub const _SC_RTSIG_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_RTSIG_MAX;
pub const _SC_SEM_NSEMS_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_SEM_NSEMS_MAX;
pub const _SC_SEM_VALUE_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_SEM_VALUE_MAX;
pub const _SC_SIGQUEUE_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_SIGQUEUE_MAX;
pub const _SC_TIMER_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_TIMER_MAX;
pub const _SC_BC_BASE_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_BC_BASE_MAX;
pub const _SC_BC_DIM_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_BC_DIM_MAX;
pub const _SC_BC_SCALE_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_BC_SCALE_MAX;
pub const _SC_BC_STRING_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_BC_STRING_MAX;
pub const _SC_COLL_WEIGHTS_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_COLL_WEIGHTS_MAX;
pub const _SC_EQUIV_CLASS_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_EQUIV_CLASS_MAX;
pub const _SC_EXPR_NEST_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_EXPR_NEST_MAX;
pub const _SC_LINE_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_LINE_MAX;
pub const _SC_RE_DUP_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_RE_DUP_MAX;
pub const _SC_CHARCLASS_NAME_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_CHARCLASS_NAME_MAX;
pub const _SC_2_VERSION: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_VERSION;
pub const _SC_2_C_BIND: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_C_BIND;
pub const _SC_2_C_DEV: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_C_DEV;
pub const _SC_2_FORT_DEV: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_FORT_DEV;
pub const _SC_2_FORT_RUN: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_FORT_RUN;
pub const _SC_2_SW_DEV: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_SW_DEV;
pub const _SC_2_LOCALEDEF: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_LOCALEDEF;
pub const _SC_PII: _bindgen_ty_2 = _bindgen_ty_2::_SC_PII;
pub const _SC_PII_XTI: _bindgen_ty_2 = _bindgen_ty_2::_SC_PII_XTI;
pub const _SC_PII_SOCKET: _bindgen_ty_2 = _bindgen_ty_2::_SC_PII_SOCKET;
pub const _SC_PII_INTERNET: _bindgen_ty_2 = _bindgen_ty_2::_SC_PII_INTERNET;
pub const _SC_PII_OSI: _bindgen_ty_2 = _bindgen_ty_2::_SC_PII_OSI;
pub const _SC_POLL: _bindgen_ty_2 = _bindgen_ty_2::_SC_POLL;
pub const _SC_SELECT: _bindgen_ty_2 = _bindgen_ty_2::_SC_SELECT;
pub const _SC_UIO_MAXIOV: _bindgen_ty_2 = _bindgen_ty_2::_SC_UIO_MAXIOV;
pub const _SC_IOV_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_UIO_MAXIOV;
pub const _SC_PII_INTERNET_STREAM: _bindgen_ty_2 = _bindgen_ty_2::_SC_PII_INTERNET_STREAM;
pub const _SC_PII_INTERNET_DGRAM: _bindgen_ty_2 = _bindgen_ty_2::_SC_PII_INTERNET_DGRAM;
pub const _SC_PII_OSI_COTS: _bindgen_ty_2 = _bindgen_ty_2::_SC_PII_OSI_COTS;
pub const _SC_PII_OSI_CLTS: _bindgen_ty_2 = _bindgen_ty_2::_SC_PII_OSI_CLTS;
pub const _SC_PII_OSI_M: _bindgen_ty_2 = _bindgen_ty_2::_SC_PII_OSI_M;
pub const _SC_T_IOV_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_T_IOV_MAX;
pub const _SC_THREADS: _bindgen_ty_2 = _bindgen_ty_2::_SC_THREADS;
pub const _SC_THREAD_SAFE_FUNCTIONS: _bindgen_ty_2 = _bindgen_ty_2::_SC_THREAD_SAFE_FUNCTIONS;
pub const _SC_GETGR_R_SIZE_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_GETGR_R_SIZE_MAX;
pub const _SC_GETPW_R_SIZE_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_GETPW_R_SIZE_MAX;
pub const _SC_LOGIN_NAME_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_LOGIN_NAME_MAX;
pub const _SC_TTY_NAME_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_TTY_NAME_MAX;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_THREAD_DESTRUCTOR_ITERATIONS;
pub const _SC_THREAD_KEYS_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_THREAD_KEYS_MAX;
pub const _SC_THREAD_STACK_MIN: _bindgen_ty_2 = _bindgen_ty_2::_SC_THREAD_STACK_MIN;
pub const _SC_THREAD_THREADS_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_THREAD_THREADS_MAX;
pub const _SC_THREAD_ATTR_STACKADDR: _bindgen_ty_2 = _bindgen_ty_2::_SC_THREAD_ATTR_STACKADDR;
pub const _SC_THREAD_ATTR_STACKSIZE: _bindgen_ty_2 = _bindgen_ty_2::_SC_THREAD_ATTR_STACKSIZE;
pub const _SC_THREAD_PRIORITY_SCHEDULING: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_THREAD_PRIORITY_SCHEDULING;
pub const _SC_THREAD_PRIO_INHERIT: _bindgen_ty_2 = _bindgen_ty_2::_SC_THREAD_PRIO_INHERIT;
pub const _SC_THREAD_PRIO_PROTECT: _bindgen_ty_2 = _bindgen_ty_2::_SC_THREAD_PRIO_PROTECT;
pub const _SC_THREAD_PROCESS_SHARED: _bindgen_ty_2 = _bindgen_ty_2::_SC_THREAD_PROCESS_SHARED;
pub const _SC_NPROCESSORS_CONF: _bindgen_ty_2 = _bindgen_ty_2::_SC_NPROCESSORS_CONF;
pub const _SC_NPROCESSORS_ONLN: _bindgen_ty_2 = _bindgen_ty_2::_SC_NPROCESSORS_ONLN;
pub const _SC_PHYS_PAGES: _bindgen_ty_2 = _bindgen_ty_2::_SC_PHYS_PAGES;
pub const _SC_AVPHYS_PAGES: _bindgen_ty_2 = _bindgen_ty_2::_SC_AVPHYS_PAGES;
pub const _SC_ATEXIT_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_ATEXIT_MAX;
pub const _SC_PASS_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_PASS_MAX;
pub const _SC_XOPEN_VERSION: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_VERSION;
pub const _SC_XOPEN_XCU_VERSION: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_XCU_VERSION;
pub const _SC_XOPEN_UNIX: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_UNIX;
pub const _SC_XOPEN_CRYPT: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_CRYPT;
pub const _SC_XOPEN_ENH_I18N: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_ENH_I18N;
pub const _SC_XOPEN_SHM: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_SHM;
pub const _SC_2_CHAR_TERM: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_CHAR_TERM;
pub const _SC_2_C_VERSION: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_C_VERSION;
pub const _SC_2_UPE: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_UPE;
pub const _SC_XOPEN_XPG2: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_XPG2;
pub const _SC_XOPEN_XPG3: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_XPG3;
pub const _SC_XOPEN_XPG4: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_XPG4;
pub const _SC_CHAR_BIT: _bindgen_ty_2 = _bindgen_ty_2::_SC_CHAR_BIT;
pub const _SC_CHAR_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_CHAR_MAX;
pub const _SC_CHAR_MIN: _bindgen_ty_2 = _bindgen_ty_2::_SC_CHAR_MIN;
pub const _SC_INT_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_INT_MAX;
pub const _SC_INT_MIN: _bindgen_ty_2 = _bindgen_ty_2::_SC_INT_MIN;
pub const _SC_LONG_BIT: _bindgen_ty_2 = _bindgen_ty_2::_SC_LONG_BIT;
pub const _SC_WORD_BIT: _bindgen_ty_2 = _bindgen_ty_2::_SC_WORD_BIT;
pub const _SC_MB_LEN_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_MB_LEN_MAX;
pub const _SC_NZERO: _bindgen_ty_2 = _bindgen_ty_2::_SC_NZERO;
pub const _SC_SSIZE_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_SSIZE_MAX;
pub const _SC_SCHAR_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_SCHAR_MAX;
pub const _SC_SCHAR_MIN: _bindgen_ty_2 = _bindgen_ty_2::_SC_SCHAR_MIN;
pub const _SC_SHRT_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_SHRT_MAX;
pub const _SC_SHRT_MIN: _bindgen_ty_2 = _bindgen_ty_2::_SC_SHRT_MIN;
pub const _SC_UCHAR_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_UCHAR_MAX;
pub const _SC_UINT_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_UINT_MAX;
pub const _SC_ULONG_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_ULONG_MAX;
pub const _SC_USHRT_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_USHRT_MAX;
pub const _SC_NL_ARGMAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_NL_ARGMAX;
pub const _SC_NL_LANGMAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_NL_LANGMAX;
pub const _SC_NL_MSGMAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_NL_MSGMAX;
pub const _SC_NL_NMAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_NL_NMAX;
pub const _SC_NL_SETMAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_NL_SETMAX;
pub const _SC_NL_TEXTMAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_NL_TEXTMAX;
pub const _SC_XBS5_ILP32_OFF32: _bindgen_ty_2 = _bindgen_ty_2::_SC_XBS5_ILP32_OFF32;
pub const _SC_XBS5_ILP32_OFFBIG: _bindgen_ty_2 = _bindgen_ty_2::_SC_XBS5_ILP32_OFFBIG;
pub const _SC_XBS5_LP64_OFF64: _bindgen_ty_2 = _bindgen_ty_2::_SC_XBS5_LP64_OFF64;
pub const _SC_XBS5_LPBIG_OFFBIG: _bindgen_ty_2 = _bindgen_ty_2::_SC_XBS5_LPBIG_OFFBIG;
pub const _SC_XOPEN_LEGACY: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_LEGACY;
pub const _SC_XOPEN_REALTIME: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_REALTIME;
pub const _SC_XOPEN_REALTIME_THREADS: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_REALTIME_THREADS;
pub const _SC_ADVISORY_INFO: _bindgen_ty_2 = _bindgen_ty_2::_SC_ADVISORY_INFO;
pub const _SC_BARRIERS: _bindgen_ty_2 = _bindgen_ty_2::_SC_BARRIERS;
pub const _SC_BASE: _bindgen_ty_2 = _bindgen_ty_2::_SC_BASE;
pub const _SC_C_LANG_SUPPORT: _bindgen_ty_2 = _bindgen_ty_2::_SC_C_LANG_SUPPORT;
pub const _SC_C_LANG_SUPPORT_R: _bindgen_ty_2 = _bindgen_ty_2::_SC_C_LANG_SUPPORT_R;
pub const _SC_CLOCK_SELECTION: _bindgen_ty_2 = _bindgen_ty_2::_SC_CLOCK_SELECTION;
pub const _SC_CPUTIME: _bindgen_ty_2 = _bindgen_ty_2::_SC_CPUTIME;
pub const _SC_THREAD_CPUTIME: _bindgen_ty_2 = _bindgen_ty_2::_SC_THREAD_CPUTIME;
pub const _SC_DEVICE_IO: _bindgen_ty_2 = _bindgen_ty_2::_SC_DEVICE_IO;
pub const _SC_DEVICE_SPECIFIC: _bindgen_ty_2 = _bindgen_ty_2::_SC_DEVICE_SPECIFIC;
pub const _SC_DEVICE_SPECIFIC_R: _bindgen_ty_2 = _bindgen_ty_2::_SC_DEVICE_SPECIFIC_R;
pub const _SC_FD_MGMT: _bindgen_ty_2 = _bindgen_ty_2::_SC_FD_MGMT;
pub const _SC_FIFO: _bindgen_ty_2 = _bindgen_ty_2::_SC_FIFO;
pub const _SC_PIPE: _bindgen_ty_2 = _bindgen_ty_2::_SC_PIPE;
pub const _SC_FILE_ATTRIBUTES: _bindgen_ty_2 = _bindgen_ty_2::_SC_FILE_ATTRIBUTES;
pub const _SC_FILE_LOCKING: _bindgen_ty_2 = _bindgen_ty_2::_SC_FILE_LOCKING;
pub const _SC_FILE_SYSTEM: _bindgen_ty_2 = _bindgen_ty_2::_SC_FILE_SYSTEM;
pub const _SC_MONOTONIC_CLOCK: _bindgen_ty_2 = _bindgen_ty_2::_SC_MONOTONIC_CLOCK;
pub const _SC_MULTI_PROCESS: _bindgen_ty_2 = _bindgen_ty_2::_SC_MULTI_PROCESS;
pub const _SC_SINGLE_PROCESS: _bindgen_ty_2 = _bindgen_ty_2::_SC_SINGLE_PROCESS;
pub const _SC_NETWORKING: _bindgen_ty_2 = _bindgen_ty_2::_SC_NETWORKING;
pub const _SC_READER_WRITER_LOCKS: _bindgen_ty_2 = _bindgen_ty_2::_SC_READER_WRITER_LOCKS;
pub const _SC_SPIN_LOCKS: _bindgen_ty_2 = _bindgen_ty_2::_SC_SPIN_LOCKS;
pub const _SC_REGEXP: _bindgen_ty_2 = _bindgen_ty_2::_SC_REGEXP;
pub const _SC_REGEX_VERSION: _bindgen_ty_2 = _bindgen_ty_2::_SC_REGEX_VERSION;
pub const _SC_SHELL: _bindgen_ty_2 = _bindgen_ty_2::_SC_SHELL;
pub const _SC_SIGNALS: _bindgen_ty_2 = _bindgen_ty_2::_SC_SIGNALS;
pub const _SC_SPAWN: _bindgen_ty_2 = _bindgen_ty_2::_SC_SPAWN;
pub const _SC_SPORADIC_SERVER: _bindgen_ty_2 = _bindgen_ty_2::_SC_SPORADIC_SERVER;
pub const _SC_THREAD_SPORADIC_SERVER: _bindgen_ty_2 = _bindgen_ty_2::_SC_THREAD_SPORADIC_SERVER;
pub const _SC_SYSTEM_DATABASE: _bindgen_ty_2 = _bindgen_ty_2::_SC_SYSTEM_DATABASE;
pub const _SC_SYSTEM_DATABASE_R: _bindgen_ty_2 = _bindgen_ty_2::_SC_SYSTEM_DATABASE_R;
pub const _SC_TIMEOUTS: _bindgen_ty_2 = _bindgen_ty_2::_SC_TIMEOUTS;
pub const _SC_TYPED_MEMORY_OBJECTS: _bindgen_ty_2 = _bindgen_ty_2::_SC_TYPED_MEMORY_OBJECTS;
pub const _SC_USER_GROUPS: _bindgen_ty_2 = _bindgen_ty_2::_SC_USER_GROUPS;
pub const _SC_USER_GROUPS_R: _bindgen_ty_2 = _bindgen_ty_2::_SC_USER_GROUPS_R;
pub const _SC_2_PBS: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_PBS;
pub const _SC_2_PBS_ACCOUNTING: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_PBS_ACCOUNTING;
pub const _SC_2_PBS_LOCATE: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_PBS_LOCATE;
pub const _SC_2_PBS_MESSAGE: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_PBS_MESSAGE;
pub const _SC_2_PBS_TRACK: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_PBS_TRACK;
pub const _SC_SYMLOOP_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_SYMLOOP_MAX;
pub const _SC_STREAMS: _bindgen_ty_2 = _bindgen_ty_2::_SC_STREAMS;
pub const _SC_2_PBS_CHECKPOINT: _bindgen_ty_2 = _bindgen_ty_2::_SC_2_PBS_CHECKPOINT;
pub const _SC_V6_ILP32_OFF32: _bindgen_ty_2 = _bindgen_ty_2::_SC_V6_ILP32_OFF32;
pub const _SC_V6_ILP32_OFFBIG: _bindgen_ty_2 = _bindgen_ty_2::_SC_V6_ILP32_OFFBIG;
pub const _SC_V6_LP64_OFF64: _bindgen_ty_2 = _bindgen_ty_2::_SC_V6_LP64_OFF64;
pub const _SC_V6_LPBIG_OFFBIG: _bindgen_ty_2 = _bindgen_ty_2::_SC_V6_LPBIG_OFFBIG;
pub const _SC_HOST_NAME_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_HOST_NAME_MAX;
pub const _SC_TRACE: _bindgen_ty_2 = _bindgen_ty_2::_SC_TRACE;
pub const _SC_TRACE_EVENT_FILTER: _bindgen_ty_2 = _bindgen_ty_2::_SC_TRACE_EVENT_FILTER;
pub const _SC_TRACE_INHERIT: _bindgen_ty_2 = _bindgen_ty_2::_SC_TRACE_INHERIT;
pub const _SC_TRACE_LOG: _bindgen_ty_2 = _bindgen_ty_2::_SC_TRACE_LOG;
pub const _SC_LEVEL1_ICACHE_SIZE: _bindgen_ty_2 = _bindgen_ty_2::_SC_LEVEL1_ICACHE_SIZE;
pub const _SC_LEVEL1_ICACHE_ASSOC: _bindgen_ty_2 = _bindgen_ty_2::_SC_LEVEL1_ICACHE_ASSOC;
pub const _SC_LEVEL1_ICACHE_LINESIZE: _bindgen_ty_2 = _bindgen_ty_2::_SC_LEVEL1_ICACHE_LINESIZE;
pub const _SC_LEVEL1_DCACHE_SIZE: _bindgen_ty_2 = _bindgen_ty_2::_SC_LEVEL1_DCACHE_SIZE;
pub const _SC_LEVEL1_DCACHE_ASSOC: _bindgen_ty_2 = _bindgen_ty_2::_SC_LEVEL1_DCACHE_ASSOC;
pub const _SC_LEVEL1_DCACHE_LINESIZE: _bindgen_ty_2 = _bindgen_ty_2::_SC_LEVEL1_DCACHE_LINESIZE;
pub const _SC_LEVEL2_CACHE_SIZE: _bindgen_ty_2 = _bindgen_ty_2::_SC_LEVEL2_CACHE_SIZE;
pub const _SC_LEVEL2_CACHE_ASSOC: _bindgen_ty_2 = _bindgen_ty_2::_SC_LEVEL2_CACHE_ASSOC;
pub const _SC_LEVEL2_CACHE_LINESIZE: _bindgen_ty_2 = _bindgen_ty_2::_SC_LEVEL2_CACHE_LINESIZE;
pub const _SC_LEVEL3_CACHE_SIZE: _bindgen_ty_2 = _bindgen_ty_2::_SC_LEVEL3_CACHE_SIZE;
pub const _SC_LEVEL3_CACHE_ASSOC: _bindgen_ty_2 = _bindgen_ty_2::_SC_LEVEL3_CACHE_ASSOC;
pub const _SC_LEVEL3_CACHE_LINESIZE: _bindgen_ty_2 = _bindgen_ty_2::_SC_LEVEL3_CACHE_LINESIZE;
pub const _SC_LEVEL4_CACHE_SIZE: _bindgen_ty_2 = _bindgen_ty_2::_SC_LEVEL4_CACHE_SIZE;
pub const _SC_LEVEL4_CACHE_ASSOC: _bindgen_ty_2 = _bindgen_ty_2::_SC_LEVEL4_CACHE_ASSOC;
pub const _SC_LEVEL4_CACHE_LINESIZE: _bindgen_ty_2 = _bindgen_ty_2::_SC_LEVEL4_CACHE_LINESIZE;
pub const _SC_IPV6: _bindgen_ty_2 = _bindgen_ty_2::_SC_IPV6;
pub const _SC_RAW_SOCKETS: _bindgen_ty_2 = _bindgen_ty_2::_SC_RAW_SOCKETS;
pub const _SC_V7_ILP32_OFF32: _bindgen_ty_2 = _bindgen_ty_2::_SC_V7_ILP32_OFF32;
pub const _SC_V7_ILP32_OFFBIG: _bindgen_ty_2 = _bindgen_ty_2::_SC_V7_ILP32_OFFBIG;
pub const _SC_V7_LP64_OFF64: _bindgen_ty_2 = _bindgen_ty_2::_SC_V7_LP64_OFF64;
pub const _SC_V7_LPBIG_OFFBIG: _bindgen_ty_2 = _bindgen_ty_2::_SC_V7_LPBIG_OFFBIG;
pub const _SC_SS_REPL_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_SS_REPL_MAX;
pub const _SC_TRACE_EVENT_NAME_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_TRACE_EVENT_NAME_MAX;
pub const _SC_TRACE_NAME_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_TRACE_NAME_MAX;
pub const _SC_TRACE_SYS_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_TRACE_SYS_MAX;
pub const _SC_TRACE_USER_EVENT_MAX: _bindgen_ty_2 = _bindgen_ty_2::_SC_TRACE_USER_EVENT_MAX;
pub const _SC_XOPEN_STREAMS: _bindgen_ty_2 = _bindgen_ty_2::_SC_XOPEN_STREAMS;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_THREAD_ROBUST_PRIO_INHERIT;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: _bindgen_ty_2 =
    _bindgen_ty_2::_SC_THREAD_ROBUST_PRIO_PROTECT;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_2 {
    _SC_ARG_MAX = 0,
    _SC_CHILD_MAX = 1,
    _SC_CLK_TCK = 2,
    _SC_NGROUPS_MAX = 3,
    _SC_OPEN_MAX = 4,
    _SC_STREAM_MAX = 5,
    _SC_TZNAME_MAX = 6,
    _SC_JOB_CONTROL = 7,
    _SC_SAVED_IDS = 8,
    _SC_REALTIME_SIGNALS = 9,
    _SC_PRIORITY_SCHEDULING = 10,
    _SC_TIMERS = 11,
    _SC_ASYNCHRONOUS_IO = 12,
    _SC_PRIORITIZED_IO = 13,
    _SC_SYNCHRONIZED_IO = 14,
    _SC_FSYNC = 15,
    _SC_MAPPED_FILES = 16,
    _SC_MEMLOCK = 17,
    _SC_MEMLOCK_RANGE = 18,
    _SC_MEMORY_PROTECTION = 19,
    _SC_MESSAGE_PASSING = 20,
    _SC_SEMAPHORES = 21,
    _SC_SHARED_MEMORY_OBJECTS = 22,
    _SC_AIO_LISTIO_MAX = 23,
    _SC_AIO_MAX = 24,
    _SC_AIO_PRIO_DELTA_MAX = 25,
    _SC_DELAYTIMER_MAX = 26,
    _SC_MQ_OPEN_MAX = 27,
    _SC_MQ_PRIO_MAX = 28,
    _SC_VERSION = 29,
    _SC_PAGESIZE = 30,
    _SC_RTSIG_MAX = 31,
    _SC_SEM_NSEMS_MAX = 32,
    _SC_SEM_VALUE_MAX = 33,
    _SC_SIGQUEUE_MAX = 34,
    _SC_TIMER_MAX = 35,
    _SC_BC_BASE_MAX = 36,
    _SC_BC_DIM_MAX = 37,
    _SC_BC_SCALE_MAX = 38,
    _SC_BC_STRING_MAX = 39,
    _SC_COLL_WEIGHTS_MAX = 40,
    _SC_EQUIV_CLASS_MAX = 41,
    _SC_EXPR_NEST_MAX = 42,
    _SC_LINE_MAX = 43,
    _SC_RE_DUP_MAX = 44,
    _SC_CHARCLASS_NAME_MAX = 45,
    _SC_2_VERSION = 46,
    _SC_2_C_BIND = 47,
    _SC_2_C_DEV = 48,
    _SC_2_FORT_DEV = 49,
    _SC_2_FORT_RUN = 50,
    _SC_2_SW_DEV = 51,
    _SC_2_LOCALEDEF = 52,
    _SC_PII = 53,
    _SC_PII_XTI = 54,
    _SC_PII_SOCKET = 55,
    _SC_PII_INTERNET = 56,
    _SC_PII_OSI = 57,
    _SC_POLL = 58,
    _SC_SELECT = 59,
    _SC_UIO_MAXIOV = 60,
    _SC_PII_INTERNET_STREAM = 61,
    _SC_PII_INTERNET_DGRAM = 62,
    _SC_PII_OSI_COTS = 63,
    _SC_PII_OSI_CLTS = 64,
    _SC_PII_OSI_M = 65,
    _SC_T_IOV_MAX = 66,
    _SC_THREADS = 67,
    _SC_THREAD_SAFE_FUNCTIONS = 68,
    _SC_GETGR_R_SIZE_MAX = 69,
    _SC_GETPW_R_SIZE_MAX = 70,
    _SC_LOGIN_NAME_MAX = 71,
    _SC_TTY_NAME_MAX = 72,
    _SC_THREAD_DESTRUCTOR_ITERATIONS = 73,
    _SC_THREAD_KEYS_MAX = 74,
    _SC_THREAD_STACK_MIN = 75,
    _SC_THREAD_THREADS_MAX = 76,
    _SC_THREAD_ATTR_STACKADDR = 77,
    _SC_THREAD_ATTR_STACKSIZE = 78,
    _SC_THREAD_PRIORITY_SCHEDULING = 79,
    _SC_THREAD_PRIO_INHERIT = 80,
    _SC_THREAD_PRIO_PROTECT = 81,
    _SC_THREAD_PROCESS_SHARED = 82,
    _SC_NPROCESSORS_CONF = 83,
    _SC_NPROCESSORS_ONLN = 84,
    _SC_PHYS_PAGES = 85,
    _SC_AVPHYS_PAGES = 86,
    _SC_ATEXIT_MAX = 87,
    _SC_PASS_MAX = 88,
    _SC_XOPEN_VERSION = 89,
    _SC_XOPEN_XCU_VERSION = 90,
    _SC_XOPEN_UNIX = 91,
    _SC_XOPEN_CRYPT = 92,
    _SC_XOPEN_ENH_I18N = 93,
    _SC_XOPEN_SHM = 94,
    _SC_2_CHAR_TERM = 95,
    _SC_2_C_VERSION = 96,
    _SC_2_UPE = 97,
    _SC_XOPEN_XPG2 = 98,
    _SC_XOPEN_XPG3 = 99,
    _SC_XOPEN_XPG4 = 100,
    _SC_CHAR_BIT = 101,
    _SC_CHAR_MAX = 102,
    _SC_CHAR_MIN = 103,
    _SC_INT_MAX = 104,
    _SC_INT_MIN = 105,
    _SC_LONG_BIT = 106,
    _SC_WORD_BIT = 107,
    _SC_MB_LEN_MAX = 108,
    _SC_NZERO = 109,
    _SC_SSIZE_MAX = 110,
    _SC_SCHAR_MAX = 111,
    _SC_SCHAR_MIN = 112,
    _SC_SHRT_MAX = 113,
    _SC_SHRT_MIN = 114,
    _SC_UCHAR_MAX = 115,
    _SC_UINT_MAX = 116,
    _SC_ULONG_MAX = 117,
    _SC_USHRT_MAX = 118,
    _SC_NL_ARGMAX = 119,
    _SC_NL_LANGMAX = 120,
    _SC_NL_MSGMAX = 121,
    _SC_NL_NMAX = 122,
    _SC_NL_SETMAX = 123,
    _SC_NL_TEXTMAX = 124,
    _SC_XBS5_ILP32_OFF32 = 125,
    _SC_XBS5_ILP32_OFFBIG = 126,
    _SC_XBS5_LP64_OFF64 = 127,
    _SC_XBS5_LPBIG_OFFBIG = 128,
    _SC_XOPEN_LEGACY = 129,
    _SC_XOPEN_REALTIME = 130,
    _SC_XOPEN_REALTIME_THREADS = 131,
    _SC_ADVISORY_INFO = 132,
    _SC_BARRIERS = 133,
    _SC_BASE = 134,
    _SC_C_LANG_SUPPORT = 135,
    _SC_C_LANG_SUPPORT_R = 136,
    _SC_CLOCK_SELECTION = 137,
    _SC_CPUTIME = 138,
    _SC_THREAD_CPUTIME = 139,
    _SC_DEVICE_IO = 140,
    _SC_DEVICE_SPECIFIC = 141,
    _SC_DEVICE_SPECIFIC_R = 142,
    _SC_FD_MGMT = 143,
    _SC_FIFO = 144,
    _SC_PIPE = 145,
    _SC_FILE_ATTRIBUTES = 146,
    _SC_FILE_LOCKING = 147,
    _SC_FILE_SYSTEM = 148,
    _SC_MONOTONIC_CLOCK = 149,
    _SC_MULTI_PROCESS = 150,
    _SC_SINGLE_PROCESS = 151,
    _SC_NETWORKING = 152,
    _SC_READER_WRITER_LOCKS = 153,
    _SC_SPIN_LOCKS = 154,
    _SC_REGEXP = 155,
    _SC_REGEX_VERSION = 156,
    _SC_SHELL = 157,
    _SC_SIGNALS = 158,
    _SC_SPAWN = 159,
    _SC_SPORADIC_SERVER = 160,
    _SC_THREAD_SPORADIC_SERVER = 161,
    _SC_SYSTEM_DATABASE = 162,
    _SC_SYSTEM_DATABASE_R = 163,
    _SC_TIMEOUTS = 164,
    _SC_TYPED_MEMORY_OBJECTS = 165,
    _SC_USER_GROUPS = 166,
    _SC_USER_GROUPS_R = 167,
    _SC_2_PBS = 168,
    _SC_2_PBS_ACCOUNTING = 169,
    _SC_2_PBS_LOCATE = 170,
    _SC_2_PBS_MESSAGE = 171,
    _SC_2_PBS_TRACK = 172,
    _SC_SYMLOOP_MAX = 173,
    _SC_STREAMS = 174,
    _SC_2_PBS_CHECKPOINT = 175,
    _SC_V6_ILP32_OFF32 = 176,
    _SC_V6_ILP32_OFFBIG = 177,
    _SC_V6_LP64_OFF64 = 178,
    _SC_V6_LPBIG_OFFBIG = 179,
    _SC_HOST_NAME_MAX = 180,
    _SC_TRACE = 181,
    _SC_TRACE_EVENT_FILTER = 182,
    _SC_TRACE_INHERIT = 183,
    _SC_TRACE_LOG = 184,
    _SC_LEVEL1_ICACHE_SIZE = 185,
    _SC_LEVEL1_ICACHE_ASSOC = 186,
    _SC_LEVEL1_ICACHE_LINESIZE = 187,
    _SC_LEVEL1_DCACHE_SIZE = 188,
    _SC_LEVEL1_DCACHE_ASSOC = 189,
    _SC_LEVEL1_DCACHE_LINESIZE = 190,
    _SC_LEVEL2_CACHE_SIZE = 191,
    _SC_LEVEL2_CACHE_ASSOC = 192,
    _SC_LEVEL2_CACHE_LINESIZE = 193,
    _SC_LEVEL3_CACHE_SIZE = 194,
    _SC_LEVEL3_CACHE_ASSOC = 195,
    _SC_LEVEL3_CACHE_LINESIZE = 196,
    _SC_LEVEL4_CACHE_SIZE = 197,
    _SC_LEVEL4_CACHE_ASSOC = 198,
    _SC_LEVEL4_CACHE_LINESIZE = 199,
    _SC_IPV6 = 235,
    _SC_RAW_SOCKETS = 236,
    _SC_V7_ILP32_OFF32 = 237,
    _SC_V7_ILP32_OFFBIG = 238,
    _SC_V7_LP64_OFF64 = 239,
    _SC_V7_LPBIG_OFFBIG = 240,
    _SC_SS_REPL_MAX = 241,
    _SC_TRACE_EVENT_NAME_MAX = 242,
    _SC_TRACE_NAME_MAX = 243,
    _SC_TRACE_SYS_MAX = 244,
    _SC_TRACE_USER_EVENT_MAX = 245,
    _SC_XOPEN_STREAMS = 246,
    _SC_THREAD_ROBUST_PRIO_INHERIT = 247,
    _SC_THREAD_ROBUST_PRIO_PROTECT = 248,
}
pub const _CS_PATH: _bindgen_ty_3 = _bindgen_ty_3::_CS_PATH;
pub const _CS_V6_WIDTH_RESTRICTED_ENVS: _bindgen_ty_3 = _bindgen_ty_3::_CS_V6_WIDTH_RESTRICTED_ENVS;
pub const _CS_GNU_LIBC_VERSION: _bindgen_ty_3 = _bindgen_ty_3::_CS_GNU_LIBC_VERSION;
pub const _CS_GNU_LIBPTHREAD_VERSION: _bindgen_ty_3 = _bindgen_ty_3::_CS_GNU_LIBPTHREAD_VERSION;
pub const _CS_V5_WIDTH_RESTRICTED_ENVS: _bindgen_ty_3 = _bindgen_ty_3::_CS_V5_WIDTH_RESTRICTED_ENVS;
pub const _CS_V7_WIDTH_RESTRICTED_ENVS: _bindgen_ty_3 = _bindgen_ty_3::_CS_V7_WIDTH_RESTRICTED_ENVS;
pub const _CS_LFS_CFLAGS: _bindgen_ty_3 = _bindgen_ty_3::_CS_LFS_CFLAGS;
pub const _CS_LFS_LDFLAGS: _bindgen_ty_3 = _bindgen_ty_3::_CS_LFS_LDFLAGS;
pub const _CS_LFS_LIBS: _bindgen_ty_3 = _bindgen_ty_3::_CS_LFS_LIBS;
pub const _CS_LFS_LINTFLAGS: _bindgen_ty_3 = _bindgen_ty_3::_CS_LFS_LINTFLAGS;
pub const _CS_LFS64_CFLAGS: _bindgen_ty_3 = _bindgen_ty_3::_CS_LFS64_CFLAGS;
pub const _CS_LFS64_LDFLAGS: _bindgen_ty_3 = _bindgen_ty_3::_CS_LFS64_LDFLAGS;
pub const _CS_LFS64_LIBS: _bindgen_ty_3 = _bindgen_ty_3::_CS_LFS64_LIBS;
pub const _CS_LFS64_LINTFLAGS: _bindgen_ty_3 = _bindgen_ty_3::_CS_LFS64_LINTFLAGS;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: _bindgen_ty_3 = _bindgen_ty_3::_CS_XBS5_ILP32_OFF32_CFLAGS;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: _bindgen_ty_3 = _bindgen_ty_3::_CS_XBS5_ILP32_OFF32_LDFLAGS;
pub const _CS_XBS5_ILP32_OFF32_LIBS: _bindgen_ty_3 = _bindgen_ty_3::_CS_XBS5_ILP32_OFF32_LIBS;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_ILP32_OFF32_LINTFLAGS;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: _bindgen_ty_3 = _bindgen_ty_3::_CS_XBS5_ILP32_OFFBIG_CFLAGS;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_ILP32_OFFBIG_LDFLAGS;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: _bindgen_ty_3 = _bindgen_ty_3::_CS_XBS5_ILP32_OFFBIG_LIBS;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_ILP32_OFFBIG_LINTFLAGS;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: _bindgen_ty_3 = _bindgen_ty_3::_CS_XBS5_LP64_OFF64_CFLAGS;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: _bindgen_ty_3 = _bindgen_ty_3::_CS_XBS5_LP64_OFF64_LDFLAGS;
pub const _CS_XBS5_LP64_OFF64_LIBS: _bindgen_ty_3 = _bindgen_ty_3::_CS_XBS5_LP64_OFF64_LIBS;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_LP64_OFF64_LINTFLAGS;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_3 = _bindgen_ty_3::_CS_XBS5_LPBIG_OFFBIG_CFLAGS;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_LPBIG_OFFBIG_LDFLAGS;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: _bindgen_ty_3 = _bindgen_ty_3::_CS_XBS5_LPBIG_OFFBIG_LIBS;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_ILP32_OFF32_CFLAGS;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_ILP32_OFF32_LDFLAGS;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_ILP32_OFF32_LIBS;
pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_ILP32_OFFBIG_LIBS;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_LP64_OFF64_CFLAGS;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_LP64_OFF64_LDFLAGS;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: _bindgen_ty_3 = _bindgen_ty_3::_CS_POSIX_V6_LP64_OFF64_LIBS;
pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_LP64_OFF64_LINTFLAGS;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_LPBIG_OFFBIG_LIBS;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS;
pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_ILP32_OFF32_CFLAGS;
pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_ILP32_OFF32_LDFLAGS;
pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_ILP32_OFF32_LIBS;
pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS;
pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_ILP32_OFFBIG_LIBS;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS;
pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_LP64_OFF64_CFLAGS;
pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_LP64_OFF64_LDFLAGS;
pub const _CS_POSIX_V7_LP64_OFF64_LIBS: _bindgen_ty_3 = _bindgen_ty_3::_CS_POSIX_V7_LP64_OFF64_LIBS;
pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_LP64_OFF64_LINTFLAGS;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_LPBIG_OFFBIG_LIBS;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_3 =
    _bindgen_ty_3::_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS;
pub const _CS_V6_ENV: _bindgen_ty_3 = _bindgen_ty_3::_CS_V6_ENV;
pub const _CS_V7_ENV: _bindgen_ty_3 = _bindgen_ty_3::_CS_V7_ENV;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_3 {
    _CS_PATH = 0,
    _CS_V6_WIDTH_RESTRICTED_ENVS = 1,
    _CS_GNU_LIBC_VERSION = 2,
    _CS_GNU_LIBPTHREAD_VERSION = 3,
    _CS_V5_WIDTH_RESTRICTED_ENVS = 4,
    _CS_V7_WIDTH_RESTRICTED_ENVS = 5,
    _CS_LFS_CFLAGS = 1000,
    _CS_LFS_LDFLAGS = 1001,
    _CS_LFS_LIBS = 1002,
    _CS_LFS_LINTFLAGS = 1003,
    _CS_LFS64_CFLAGS = 1004,
    _CS_LFS64_LDFLAGS = 1005,
    _CS_LFS64_LIBS = 1006,
    _CS_LFS64_LINTFLAGS = 1007,
    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,
    _CS_XBS5_ILP32_OFF32_LDFLAGS = 1101,
    _CS_XBS5_ILP32_OFF32_LIBS = 1102,
    _CS_XBS5_ILP32_OFF32_LINTFLAGS = 1103,
    _CS_XBS5_ILP32_OFFBIG_CFLAGS = 1104,
    _CS_XBS5_ILP32_OFFBIG_LDFLAGS = 1105,
    _CS_XBS5_ILP32_OFFBIG_LIBS = 1106,
    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 1107,
    _CS_XBS5_LP64_OFF64_CFLAGS = 1108,
    _CS_XBS5_LP64_OFF64_LDFLAGS = 1109,
    _CS_XBS5_LP64_OFF64_LIBS = 1110,
    _CS_XBS5_LP64_OFF64_LINTFLAGS = 1111,
    _CS_XBS5_LPBIG_OFFBIG_CFLAGS = 1112,
    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 1113,
    _CS_XBS5_LPBIG_OFFBIG_LIBS = 1114,
    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 1115,
    _CS_POSIX_V6_ILP32_OFF32_CFLAGS = 1116,
    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 1117,
    _CS_POSIX_V6_ILP32_OFF32_LIBS = 1118,
    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = 1119,
    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 1120,
    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 1121,
    _CS_POSIX_V6_ILP32_OFFBIG_LIBS = 1122,
    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = 1123,
    _CS_POSIX_V6_LP64_OFF64_CFLAGS = 1124,
    _CS_POSIX_V6_LP64_OFF64_LDFLAGS = 1125,
    _CS_POSIX_V6_LP64_OFF64_LIBS = 1126,
    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS = 1127,
    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 1128,
    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 1129,
    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 1130,
    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = 1131,
    _CS_POSIX_V7_ILP32_OFF32_CFLAGS = 1132,
    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS = 1133,
    _CS_POSIX_V7_ILP32_OFF32_LIBS = 1134,
    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = 1135,
    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = 1136,
    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = 1137,
    _CS_POSIX_V7_ILP32_OFFBIG_LIBS = 1138,
    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = 1139,
    _CS_POSIX_V7_LP64_OFF64_CFLAGS = 1140,
    _CS_POSIX_V7_LP64_OFF64_LDFLAGS = 1141,
    _CS_POSIX_V7_LP64_OFF64_LIBS = 1142,
    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS = 1143,
    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = 1144,
    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = 1145,
    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS = 1146,
    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = 1147,
    _CS_V6_ENV = 1148,
    _CS_V7_ENV = 1149,
}
extern "C" {
    pub fn pathconf(
        __path: *const ::std::os::raw::c_char,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fpathconf(
        __fd: ::std::os::raw::c_int,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sysconf(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn confstr(
        __name: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> usize;
}
extern "C" {
    pub fn getpid() -> __pid_t;
}
extern "C" {
    pub fn getppid() -> __pid_t;
}
extern "C" {
    pub fn getpgrp() -> __pid_t;
}
extern "C" {
    pub fn __getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn setpgid(__pid: __pid_t, __pgid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpgrp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsid() -> __pid_t;
}
extern "C" {
    pub fn getsid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getuid() -> __uid_t;
}
extern "C" {
    pub fn geteuid() -> __uid_t;
}
extern "C" {
    pub fn getgid() -> __gid_t;
}
extern "C" {
    pub fn getegid() -> __gid_t;
}
extern "C" {
    pub fn getgroups(__size: ::std::os::raw::c_int, __list: *mut __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setreuid(__ruid: __uid_t, __euid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seteuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setregid(__rgid: __gid_t, __egid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setegid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fork() -> __pid_t;
}
extern "C" {
    pub fn vfork() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ttyname_r(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isatty(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn link(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linkat(
        __fromfd: ::std::os::raw::c_int,
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symlink(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlink(
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> isize;
}
extern "C" {
    pub fn symlinkat(
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlinkat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> isize;
}
extern "C" {
    pub fn unlink(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlinkat(
        __fd: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetpgrp(__fd: ::std::os::raw::c_int) -> __pid_t;
}
extern "C" {
    pub fn tcsetpgrp(__fd: ::std::os::raw::c_int, __pgrp_id: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getlogin_r(
        __name: *mut ::std::os::raw::c_char,
        __name_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setlogin(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
extern "C" {
    pub fn getopt(
        ___argc: ::std::os::raw::c_int,
        ___argv: *const *mut ::std::os::raw::c_char,
        __shortopts: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostname(__name: *mut ::std::os::raw::c_char, __len: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostname(
        __name: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostid(__id: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdomainname(
        __name: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setdomainname(
        __name: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vhangup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn revoke(__file: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn profil(
        __sample_buffer: *mut ::std::os::raw::c_ushort,
        __size: usize,
        __offset: usize,
        __scale: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acct(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn endusershell();
}
extern "C" {
    pub fn setusershell();
}
extern "C" {
    pub fn daemon(
        __nochdir: ::std::os::raw::c_int,
        __noclose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chroot(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpass(__prompt: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fsync(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sync();
}
extern "C" {
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn truncate(
        __file: *const ::std::os::raw::c_char,
        __length: __off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftruncate(__fd: ::std::os::raw::c_int, __length: __off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn brk(__addr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sbrk(__delta: isize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn syscall(__sysno: ::std::os::raw::c_long, ...) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lockf(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __len: __off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdatasync(__fildes: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getentropy(
        __buffer: *mut ::std::os::raw::c_void,
        __length: usize,
    ) -> ::std::os::raw::c_int;
}
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_jump_t {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__IO_marker() {
    assert_eq!(
        ::std::mem::size_of::<_IO_marker>(),
        24usize,
        concat!("Size of: ", stringify!(_IO_marker))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_marker>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_marker))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._sbuf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_sbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._pos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_pos)
        )
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum __codecvt_result {
    __codecvt_ok = 0,
    __codecvt_partial = 1,
    __codecvt_error = 2,
    __codecvt_noconv = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad1 as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad2 as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad3 as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad4 as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE_plus {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
}
extern "C" {
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
}
extern "C" {
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
}
pub type __io_read_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type __io_write_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> __ssize_t,
>;
pub type __io_seek_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type __io_close_fn = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfscanf(
        arg1: *mut _IO_FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfprintf(
        arg1: *mut _IO_FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int, arg3: __ssize_t)
        -> __ssize_t;
}
extern "C" {
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::std::os::raw::c_void, arg3: usize) -> usize;
}
extern "C" {
    pub fn _IO_seekoff(
        arg1: *mut _IO_FILE,
        arg2: __off64_t,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    pub fn _IO_seekpos(
        arg1: *mut _IO_FILE,
        arg2: __off64_t,
        arg3: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
}
pub type fpos_t = _G_fpos_t;
extern "C" {
    pub static mut stdin: *mut _IO_FILE;
}
extern "C" {
    pub static mut stdout: *mut _IO_FILE;
}
extern "C" {
    pub static mut stderr: *mut _IO_FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
pub type wchar_t = ::std::os::raw::c_int;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gnu_dev_major(__dev: __dev_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_minor(__dev: __dev_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_makedev(
        __major: ::std::os::raw::c_uint,
        __minor: ::std::os::raw::c_uint,
    ) -> __dev_t;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t, __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: usize,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flock {
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
    pub l_start: __off_t,
    pub l_len: __off_t,
    pub l_pid: __pid_t,
}
#[test]
fn bindgen_test_layout_flock() {
    assert_eq!(
        ::std::mem::size_of::<flock>(),
        32usize,
        concat!("Size of: ", stringify!(flock))
    );
    assert_eq!(
        ::std::mem::align_of::<flock>(),
        8usize,
        concat!("Alignment of ", stringify!(flock))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_whence as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_whence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_start as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_pid as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_pid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: ::std::os::raw::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved: [__syscall_slong_t; 3usize],
}
#[test]
fn bindgen_test_layout_stat() {
    assert_eq!(
        ::std::mem::size_of::<stat>(),
        144usize,
        concat!("Size of: ", stringify!(stat))
    );
    assert_eq!(
        ::std::mem::align_of::<stat>(),
        8usize,
        concat!("Alignment of ", stringify!(stat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_ino as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_nlink as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_mode as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_uid as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_gid as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).__pad0 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__pad0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_rdev as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_size as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_blksize as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_blocks as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_atim as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_atim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_mtim as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mtim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_ctim as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ctim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).__glibc_reserved as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__glibc_reserved)
        )
    );
}
extern "C" {
    pub fn fcntl(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn open(
        __file: *const ::std::os::raw::c_char,
        __oflag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __oflag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn creat(__file: *const ::std::os::raw::c_char, __mode: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_fadvise(
        __fd: ::std::os::raw::c_int,
        __offset: off_t,
        __len: off_t,
        __advise: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_fallocate(
        __fd: ::std::os::raw::c_int,
        __offset: off_t,
        __len: off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __assert_fail(
        __assertion: *const ::std::os::raw::c_char,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_uint,
        __function: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn __assert_perror_fail(
        __errnum: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_uint,
        __function: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn __assert(
        __assertion: *const ::std::os::raw::c_char,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_int,
    );
}
pub type nfds_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pollfd {
    pub fd: ::std::os::raw::c_int,
    pub events: ::std::os::raw::c_short,
    pub revents: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_pollfd() {
    assert_eq!(
        ::std::mem::size_of::<pollfd>(),
        8usize,
        concat!("Size of: ", stringify!(pollfd))
    );
    assert_eq!(
        ::std::mem::align_of::<pollfd>(),
        4usize,
        concat!("Alignment of ", stringify!(pollfd))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pollfd>())).fd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pollfd),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pollfd>())).events as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pollfd),
            "::",
            stringify!(events)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pollfd>())).revents as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(pollfd),
            "::",
            stringify!(revents)
        )
    );
}
extern "C" {
    pub fn poll(
        __fds: *mut pollfd,
        __nfds: nfds_t,
        __timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __errno_location() -> *mut ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_gmtoff as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_zone as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    assert_eq!(
        ::std::mem::size_of::<itimerspec>(),
        32usize,
        concat!("Size of: ", stringify!(itimerspec))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerspec>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerspec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_interval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn stime(__when: *const time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_asoundlib_version() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct snd_dlsym_link {
    pub next: *mut snd_dlsym_link,
    pub dlsym_name: *const ::std::os::raw::c_char,
    pub dlsym_ptr: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_snd_dlsym_link() {
    assert_eq!(
        ::std::mem::size_of::<snd_dlsym_link>(),
        24usize,
        concat!("Size of: ", stringify!(snd_dlsym_link))
    );
    assert_eq!(
        ::std::mem::align_of::<snd_dlsym_link>(),
        8usize,
        concat!("Alignment of ", stringify!(snd_dlsym_link))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_dlsym_link>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_dlsym_link),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_dlsym_link>())).dlsym_name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_dlsym_link),
            "::",
            stringify!(dlsym_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_dlsym_link>())).dlsym_ptr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_dlsym_link),
            "::",
            stringify!(dlsym_ptr)
        )
    );
}
extern "C" {
    pub static mut snd_dlsym_start: *mut snd_dlsym_link;
}
extern "C" {
    pub fn snd_dlopen(
        file: *const ::std::os::raw::c_char,
        mode: ::std::os::raw::c_int,
        errbuf: *mut ::std::os::raw::c_char,
        errbuflen: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn snd_dlsym(
        handle: *mut ::std::os::raw::c_void,
        name: *const ::std::os::raw::c_char,
        version: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn snd_dlclose(handle: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_async_handler {
    _unused: [u8; 0],
}
pub type snd_async_handler_t = _snd_async_handler;
pub type snd_async_callback_t =
    ::std::option::Option<unsafe extern "C" fn(handler: *mut snd_async_handler_t)>;
extern "C" {
    pub fn snd_async_add_handler(
        handler: *mut *mut snd_async_handler_t,
        fd: ::std::os::raw::c_int,
        callback: snd_async_callback_t,
        private_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_async_del_handler(handler: *mut snd_async_handler_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_async_handler_get_fd(handler: *mut snd_async_handler_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_async_handler_get_signo(handler: *mut snd_async_handler_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_async_handler_get_callback_private(
        handler: *mut snd_async_handler_t,
    ) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct snd_shm_area {
    _unused: [u8; 0],
}
extern "C" {
    pub fn snd_shm_area_create(
        shmid: ::std::os::raw::c_int,
        ptr: *mut ::std::os::raw::c_void,
    ) -> *mut snd_shm_area;
}
extern "C" {
    pub fn snd_shm_area_share(area: *mut snd_shm_area) -> *mut snd_shm_area;
}
extern "C" {
    pub fn snd_shm_area_destroy(area: *mut snd_shm_area) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_user_file(
        file: *const ::std::os::raw::c_char,
        result: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub type snd_timestamp_t = timeval;
pub type snd_htimestamp_t = timespec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_input {
    _unused: [u8; 0],
}
pub type snd_input_t = _snd_input;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _snd_input_type {
    SND_INPUT_STDIO = 0,
    SND_INPUT_BUFFER = 1,
}
pub use self::_snd_input_type as snd_input_type_t;
extern "C" {
    pub fn snd_input_stdio_open(
        inputp: *mut *mut snd_input_t,
        file: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_input_stdio_attach(
        inputp: *mut *mut snd_input_t,
        fp: *mut FILE,
        _close: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_input_buffer_open(
        inputp: *mut *mut snd_input_t,
        buffer: *const ::std::os::raw::c_char,
        size: isize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_input_close(input: *mut snd_input_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_input_scanf(
        input: *mut snd_input_t,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_input_gets(
        input: *mut snd_input_t,
        str: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_input_getc(input: *mut snd_input_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_input_ungetc(
        input: *mut snd_input_t,
        c: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_output {
    _unused: [u8; 0],
}
pub type snd_output_t = _snd_output;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _snd_output_type {
    SND_OUTPUT_STDIO = 0,
    SND_OUTPUT_BUFFER = 1,
}
pub use self::_snd_output_type as snd_output_type_t;
extern "C" {
    pub fn snd_output_stdio_open(
        outputp: *mut *mut snd_output_t,
        file: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_output_stdio_attach(
        outputp: *mut *mut snd_output_t,
        fp: *mut FILE,
        _close: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_output_buffer_open(outputp: *mut *mut snd_output_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_output_buffer_string(
        output: *mut snd_output_t,
        buf: *mut *mut ::std::os::raw::c_char,
    ) -> usize;
}
extern "C" {
    pub fn snd_output_close(output: *mut snd_output_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_output_printf(
        output: *mut snd_output_t,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_output_vprintf(
        output: *mut snd_output_t,
        format: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_output_puts(
        output: *mut snd_output_t,
        str: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_output_putc(
        output: *mut snd_output_t,
        c: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_output_flush(output: *mut snd_output_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_strerror(errnum: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
pub type snd_lib_error_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        function: *const ::std::os::raw::c_char,
        err: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    ),
>;
extern "C" {
    pub static mut snd_lib_error: snd_lib_error_handler_t;
}
extern "C" {
    pub fn snd_lib_error_set_handler(handler: snd_lib_error_handler_t) -> ::std::os::raw::c_int;
}
pub type snd_local_error_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        func: *const ::std::os::raw::c_char,
        err: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        arg: *mut __va_list_tag,
    ),
>;
extern "C" {
    pub fn snd_lib_error_set_local(func: snd_local_error_handler_t) -> snd_local_error_handler_t;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _snd_config_type {
    SND_CONFIG_TYPE_INTEGER = 0,
    SND_CONFIG_TYPE_INTEGER64 = 1,
    SND_CONFIG_TYPE_REAL = 2,
    SND_CONFIG_TYPE_STRING = 3,
    SND_CONFIG_TYPE_POINTER = 4,
    SND_CONFIG_TYPE_COMPOUND = 1024,
}
pub use self::_snd_config_type as snd_config_type_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_config {
    _unused: [u8; 0],
}
pub type snd_config_t = _snd_config;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_config_iterator {
    _unused: [u8; 0],
}
pub type snd_config_iterator_t = *mut _snd_config_iterator;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_config_update {
    _unused: [u8; 0],
}
pub type snd_config_update_t = _snd_config_update;
extern "C" {
    pub static mut snd_config: *mut snd_config_t;
}
extern "C" {
    pub fn snd_config_topdir() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_config_top(config: *mut *mut snd_config_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_load(
        config: *mut snd_config_t,
        in_: *mut snd_input_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_load_override(
        config: *mut snd_config_t,
        in_: *mut snd_input_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_save(
        config: *mut snd_config_t,
        out: *mut snd_output_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_update() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_update_r(
        top: *mut *mut snd_config_t,
        update: *mut *mut snd_config_update_t,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_update_free(update: *mut snd_config_update_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_update_free_global() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_update_ref(top: *mut *mut snd_config_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_ref(top: *mut snd_config_t);
}
extern "C" {
    pub fn snd_config_unref(top: *mut snd_config_t);
}
extern "C" {
    pub fn snd_config_search(
        config: *mut snd_config_t,
        key: *const ::std::os::raw::c_char,
        result: *mut *mut snd_config_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_searchv(
        config: *mut snd_config_t,
        result: *mut *mut snd_config_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_search_definition(
        config: *mut snd_config_t,
        base: *const ::std::os::raw::c_char,
        key: *const ::std::os::raw::c_char,
        result: *mut *mut snd_config_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_expand(
        config: *mut snd_config_t,
        root: *mut snd_config_t,
        args: *const ::std::os::raw::c_char,
        private_data: *mut snd_config_t,
        result: *mut *mut snd_config_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_evaluate(
        config: *mut snd_config_t,
        root: *mut snd_config_t,
        private_data: *mut snd_config_t,
        result: *mut *mut snd_config_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_add(
        config: *mut snd_config_t,
        leaf: *mut snd_config_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_delete(config: *mut snd_config_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_delete_compound_members(config: *const snd_config_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_copy(
        dst: *mut *mut snd_config_t,
        src: *mut snd_config_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_make(
        config: *mut *mut snd_config_t,
        key: *const ::std::os::raw::c_char,
        type_: snd_config_type_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_make_integer(
        config: *mut *mut snd_config_t,
        key: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_make_integer64(
        config: *mut *mut snd_config_t,
        key: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_make_real(
        config: *mut *mut snd_config_t,
        key: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_make_string(
        config: *mut *mut snd_config_t,
        key: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_make_pointer(
        config: *mut *mut snd_config_t,
        key: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_make_compound(
        config: *mut *mut snd_config_t,
        key: *const ::std::os::raw::c_char,
        join: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_imake_integer(
        config: *mut *mut snd_config_t,
        key: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_imake_integer64(
        config: *mut *mut snd_config_t,
        key: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_imake_real(
        config: *mut *mut snd_config_t,
        key: *const ::std::os::raw::c_char,
        value: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_imake_string(
        config: *mut *mut snd_config_t,
        key: *const ::std::os::raw::c_char,
        ascii: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_imake_safe_string(
        config: *mut *mut snd_config_t,
        key: *const ::std::os::raw::c_char,
        ascii: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_imake_pointer(
        config: *mut *mut snd_config_t,
        key: *const ::std::os::raw::c_char,
        ptr: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_get_type(config: *const snd_config_t) -> snd_config_type_t;
}
extern "C" {
    pub fn snd_config_set_id(
        config: *mut snd_config_t,
        id: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_set_integer(
        config: *mut snd_config_t,
        value: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_set_integer64(
        config: *mut snd_config_t,
        value: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_set_real(config: *mut snd_config_t, value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_set_string(
        config: *mut snd_config_t,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_set_ascii(
        config: *mut snd_config_t,
        ascii: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_set_pointer(
        config: *mut snd_config_t,
        ptr: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_get_id(
        config: *const snd_config_t,
        value: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_get_integer(
        config: *const snd_config_t,
        value: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_get_integer64(
        config: *const snd_config_t,
        value: *mut ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_get_real(
        config: *const snd_config_t,
        value: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_get_ireal(
        config: *const snd_config_t,
        value: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_get_string(
        config: *const snd_config_t,
        value: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_get_ascii(
        config: *const snd_config_t,
        value: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_get_pointer(
        config: *const snd_config_t,
        value: *mut *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_test_id(
        config: *const snd_config_t,
        id: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_iterator_first(node: *const snd_config_t) -> snd_config_iterator_t;
}
extern "C" {
    pub fn snd_config_iterator_next(iterator: snd_config_iterator_t) -> snd_config_iterator_t;
}
extern "C" {
    pub fn snd_config_iterator_end(node: *const snd_config_t) -> snd_config_iterator_t;
}
extern "C" {
    pub fn snd_config_iterator_entry(iterator: snd_config_iterator_t) -> *mut snd_config_t;
}
extern "C" {
    pub fn snd_config_get_bool_ascii(ascii: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_get_bool(conf: *const snd_config_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_get_ctl_iface_ascii(
        ascii: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_config_get_ctl_iface(conf: *const snd_config_t) -> ::std::os::raw::c_int;
}
pub type snd_devname_t = snd_devname;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct snd_devname {
    pub name: *mut ::std::os::raw::c_char,
    pub comment: *mut ::std::os::raw::c_char,
    pub next: *mut snd_devname_t,
}
#[test]
fn bindgen_test_layout_snd_devname() {
    assert_eq!(
        ::std::mem::size_of::<snd_devname>(),
        24usize,
        concat!("Size of: ", stringify!(snd_devname))
    );
    assert_eq!(
        ::std::mem::align_of::<snd_devname>(),
        8usize,
        concat!("Alignment of ", stringify!(snd_devname))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_devname>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_devname),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_devname>())).comment as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_devname),
            "::",
            stringify!(comment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_devname>())).next as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_devname),
            "::",
            stringify!(next)
        )
    );
}
extern "C" {
    pub fn snd_names_list(
        iface: *const ::std::os::raw::c_char,
        list: *mut *mut snd_devname_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_names_list_free(list: *mut snd_devname_t);
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_pcm_info {
    _unused: [u8; 0],
}
pub type snd_pcm_info_t = _snd_pcm_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_pcm_hw_params {
    _unused: [u8; 0],
}
pub type snd_pcm_hw_params_t = _snd_pcm_hw_params;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_pcm_sw_params {
    _unused: [u8; 0],
}
pub type snd_pcm_sw_params_t = _snd_pcm_sw_params;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_pcm_status {
    _unused: [u8; 0],
}
pub type snd_pcm_status_t = _snd_pcm_status;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_pcm_access_mask {
    _unused: [u8; 0],
}
pub type snd_pcm_access_mask_t = _snd_pcm_access_mask;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_pcm_format_mask {
    _unused: [u8; 0],
}
pub type snd_pcm_format_mask_t = _snd_pcm_format_mask;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_pcm_subformat_mask {
    _unused: [u8; 0],
}
pub type snd_pcm_subformat_mask_t = _snd_pcm_subformat_mask;
impl _snd_pcm_class {
    pub const SND_PCM_CLASS_LAST: _snd_pcm_class = _snd_pcm_class::SND_PCM_CLASS_DIGITIZER;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _snd_pcm_class {
    SND_PCM_CLASS_GENERIC = 0,
    SND_PCM_CLASS_MULTI = 1,
    SND_PCM_CLASS_MODEM = 2,
    SND_PCM_CLASS_DIGITIZER = 3,
}
pub use self::_snd_pcm_class as snd_pcm_class_t;
impl _snd_pcm_subclass {
    pub const SND_PCM_SUBCLASS_LAST: _snd_pcm_subclass =
        _snd_pcm_subclass::SND_PCM_SUBCLASS_MULTI_MIX;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _snd_pcm_subclass {
    SND_PCM_SUBCLASS_GENERIC_MIX = 0,
    SND_PCM_SUBCLASS_MULTI_MIX = 1,
}
pub use self::_snd_pcm_subclass as snd_pcm_subclass_t;
impl _snd_pcm_stream {
    pub const SND_PCM_STREAM_LAST: _snd_pcm_stream = _snd_pcm_stream::SND_PCM_STREAM_CAPTURE;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _snd_pcm_stream {
    SND_PCM_STREAM_PLAYBACK = 0,
    SND_PCM_STREAM_CAPTURE = 1,
}
pub use self::_snd_pcm_stream as snd_pcm_stream_t;
impl _snd_pcm_access {
    pub const SND_PCM_ACCESS_LAST: _snd_pcm_access =
        _snd_pcm_access::SND_PCM_ACCESS_RW_NONINTERLEAVED;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _snd_pcm_access {
    SND_PCM_ACCESS_MMAP_INTERLEAVED = 0,
    SND_PCM_ACCESS_MMAP_NONINTERLEAVED = 1,
    SND_PCM_ACCESS_MMAP_COMPLEX = 2,
    SND_PCM_ACCESS_RW_INTERLEAVED = 3,
    SND_PCM_ACCESS_RW_NONINTERLEAVED = 4,
}
pub use self::_snd_pcm_access as snd_pcm_access_t;
impl _snd_pcm_format {
    pub const SND_PCM_FORMAT_LAST: _snd_pcm_format = _snd_pcm_format::SND_PCM_FORMAT_DSD_U32_BE;
}
impl _snd_pcm_format {
    pub const SND_PCM_FORMAT_S16: _snd_pcm_format = _snd_pcm_format::SND_PCM_FORMAT_S16_LE;
}
impl _snd_pcm_format {
    pub const SND_PCM_FORMAT_U16: _snd_pcm_format = _snd_pcm_format::SND_PCM_FORMAT_U16_LE;
}
impl _snd_pcm_format {
    pub const SND_PCM_FORMAT_S24: _snd_pcm_format = _snd_pcm_format::SND_PCM_FORMAT_S24_LE;
}
impl _snd_pcm_format {
    pub const SND_PCM_FORMAT_U24: _snd_pcm_format = _snd_pcm_format::SND_PCM_FORMAT_U24_LE;
}
impl _snd_pcm_format {
    pub const SND_PCM_FORMAT_S32: _snd_pcm_format = _snd_pcm_format::SND_PCM_FORMAT_S32_LE;
}
impl _snd_pcm_format {
    pub const SND_PCM_FORMAT_U32: _snd_pcm_format = _snd_pcm_format::SND_PCM_FORMAT_U32_LE;
}
impl _snd_pcm_format {
    pub const SND_PCM_FORMAT_FLOAT: _snd_pcm_format = _snd_pcm_format::SND_PCM_FORMAT_FLOAT_LE;
}
impl _snd_pcm_format {
    pub const SND_PCM_FORMAT_FLOAT64: _snd_pcm_format = _snd_pcm_format::SND_PCM_FORMAT_FLOAT64_LE;
}
impl _snd_pcm_format {
    pub const SND_PCM_FORMAT_IEC958_SUBFRAME: _snd_pcm_format =
        _snd_pcm_format::SND_PCM_FORMAT_IEC958_SUBFRAME_LE;
}
impl _snd_pcm_format {
    pub const SND_PCM_FORMAT_S20: _snd_pcm_format = _snd_pcm_format::SND_PCM_FORMAT_S20_LE;
}
impl _snd_pcm_format {
    pub const SND_PCM_FORMAT_U20: _snd_pcm_format = _snd_pcm_format::SND_PCM_FORMAT_U20_LE;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _snd_pcm_format {
    SND_PCM_FORMAT_UNKNOWN = -1,
    SND_PCM_FORMAT_S8 = 0,
    SND_PCM_FORMAT_U8 = 1,
    SND_PCM_FORMAT_S16_LE = 2,
    SND_PCM_FORMAT_S16_BE = 3,
    SND_PCM_FORMAT_U16_LE = 4,
    SND_PCM_FORMAT_U16_BE = 5,
    SND_PCM_FORMAT_S24_LE = 6,
    SND_PCM_FORMAT_S24_BE = 7,
    SND_PCM_FORMAT_U24_LE = 8,
    SND_PCM_FORMAT_U24_BE = 9,
    SND_PCM_FORMAT_S32_LE = 10,
    SND_PCM_FORMAT_S32_BE = 11,
    SND_PCM_FORMAT_U32_LE = 12,
    SND_PCM_FORMAT_U32_BE = 13,
    SND_PCM_FORMAT_FLOAT_LE = 14,
    SND_PCM_FORMAT_FLOAT_BE = 15,
    SND_PCM_FORMAT_FLOAT64_LE = 16,
    SND_PCM_FORMAT_FLOAT64_BE = 17,
    SND_PCM_FORMAT_IEC958_SUBFRAME_LE = 18,
    SND_PCM_FORMAT_IEC958_SUBFRAME_BE = 19,
    SND_PCM_FORMAT_MU_LAW = 20,
    SND_PCM_FORMAT_A_LAW = 21,
    SND_PCM_FORMAT_IMA_ADPCM = 22,
    SND_PCM_FORMAT_MPEG = 23,
    SND_PCM_FORMAT_GSM = 24,
    SND_PCM_FORMAT_S20_LE = 25,
    SND_PCM_FORMAT_S20_BE = 26,
    SND_PCM_FORMAT_U20_LE = 27,
    SND_PCM_FORMAT_U20_BE = 28,
    SND_PCM_FORMAT_SPECIAL = 31,
    SND_PCM_FORMAT_S24_3LE = 32,
    SND_PCM_FORMAT_S24_3BE = 33,
    SND_PCM_FORMAT_U24_3LE = 34,
    SND_PCM_FORMAT_U24_3BE = 35,
    SND_PCM_FORMAT_S20_3LE = 36,
    SND_PCM_FORMAT_S20_3BE = 37,
    SND_PCM_FORMAT_U20_3LE = 38,
    SND_PCM_FORMAT_U20_3BE = 39,
    SND_PCM_FORMAT_S18_3LE = 40,
    SND_PCM_FORMAT_S18_3BE = 41,
    SND_PCM_FORMAT_U18_3LE = 42,
    SND_PCM_FORMAT_U18_3BE = 43,
    SND_PCM_FORMAT_G723_24 = 44,
    SND_PCM_FORMAT_G723_24_1B = 45,
    SND_PCM_FORMAT_G723_40 = 46,
    SND_PCM_FORMAT_G723_40_1B = 47,
    SND_PCM_FORMAT_DSD_U8 = 48,
    SND_PCM_FORMAT_DSD_U16_LE = 49,
    SND_PCM_FORMAT_DSD_U32_LE = 50,
    SND_PCM_FORMAT_DSD_U16_BE = 51,
    SND_PCM_FORMAT_DSD_U32_BE = 52,
}
pub use self::_snd_pcm_format as snd_pcm_format_t;
impl _snd_pcm_subformat {
    pub const SND_PCM_SUBFORMAT_LAST: _snd_pcm_subformat =
        _snd_pcm_subformat::SND_PCM_SUBFORMAT_STD;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _snd_pcm_subformat {
    SND_PCM_SUBFORMAT_STD = 0,
}
pub use self::_snd_pcm_subformat as snd_pcm_subformat_t;
impl _snd_pcm_state {
    pub const SND_PCM_STATE_LAST: _snd_pcm_state = _snd_pcm_state::SND_PCM_STATE_DISCONNECTED;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _snd_pcm_state {
    SND_PCM_STATE_OPEN = 0,
    SND_PCM_STATE_SETUP = 1,
    SND_PCM_STATE_PREPARED = 2,
    SND_PCM_STATE_RUNNING = 3,
    SND_PCM_STATE_XRUN = 4,
    SND_PCM_STATE_DRAINING = 5,
    SND_PCM_STATE_PAUSED = 6,
    SND_PCM_STATE_SUSPENDED = 7,
    SND_PCM_STATE_DISCONNECTED = 8,
    SND_PCM_STATE_PRIVATE1 = 1024,
}
pub use self::_snd_pcm_state as snd_pcm_state_t;
impl _snd_pcm_start {
    pub const SND_PCM_START_LAST: _snd_pcm_start = _snd_pcm_start::SND_PCM_START_EXPLICIT;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _snd_pcm_start {
    SND_PCM_START_DATA = 0,
    SND_PCM_START_EXPLICIT = 1,
}
pub use self::_snd_pcm_start as snd_pcm_start_t;
impl _snd_pcm_xrun {
    pub const SND_PCM_XRUN_LAST: _snd_pcm_xrun = _snd_pcm_xrun::SND_PCM_XRUN_STOP;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _snd_pcm_xrun {
    SND_PCM_XRUN_NONE = 0,
    SND_PCM_XRUN_STOP = 1,
}
pub use self::_snd_pcm_xrun as snd_pcm_xrun_t;
impl _snd_pcm_tstamp {
    pub const SND_PCM_TSTAMP_MMAP: _snd_pcm_tstamp = _snd_pcm_tstamp::SND_PCM_TSTAMP_ENABLE;
}
impl _snd_pcm_tstamp {
    pub const SND_PCM_TSTAMP_LAST: _snd_pcm_tstamp = _snd_pcm_tstamp::SND_PCM_TSTAMP_ENABLE;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _snd_pcm_tstamp {
    SND_PCM_TSTAMP_NONE = 0,
    SND_PCM_TSTAMP_ENABLE = 1,
}
pub use self::_snd_pcm_tstamp as snd_pcm_tstamp_t;
impl _snd_pcm_tstamp_type {
    pub const SND_PCM_TSTAMP_TYPE_LAST: _snd_pcm_tstamp_type =
        _snd_pcm_tstamp_type::SND_PCM_TSTAMP_TYPE_MONOTONIC_RAW;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _snd_pcm_tstamp_type {
    SND_PCM_TSTAMP_TYPE_GETTIMEOFDAY = 0,
    SND_PCM_TSTAMP_TYPE_MONOTONIC = 1,
    SND_PCM_TSTAMP_TYPE_MONOTONIC_RAW = 2,
}
pub use self::_snd_pcm_tstamp_type as snd_pcm_tstamp_type_t;
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _snd_pcm_audio_tstamp_config {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[test]
fn bindgen_test_layout__snd_pcm_audio_tstamp_config() {
    assert_eq!(
        ::std::mem::size_of::<_snd_pcm_audio_tstamp_config>(),
        4usize,
        concat!("Size of: ", stringify!(_snd_pcm_audio_tstamp_config))
    );
    assert_eq!(
        ::std::mem::align_of::<_snd_pcm_audio_tstamp_config>(),
        4usize,
        concat!("Alignment of ", stringify!(_snd_pcm_audio_tstamp_config))
    );
}
impl _snd_pcm_audio_tstamp_config {
    #[inline]
    pub fn type_requested(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_type_requested(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn report_delay(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_report_delay(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        type_requested: ::std::os::raw::c_uint,
        report_delay: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let type_requested: u32 = unsafe { ::std::mem::transmute(type_requested) };
            type_requested as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let report_delay: u32 = unsafe { ::std::mem::transmute(report_delay) };
            report_delay as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type snd_pcm_audio_tstamp_config_t = _snd_pcm_audio_tstamp_config;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_pcm_audio_tstamp_report {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub accuracy: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout__snd_pcm_audio_tstamp_report() {
    assert_eq!(
        ::std::mem::size_of::<_snd_pcm_audio_tstamp_report>(),
        8usize,
        concat!("Size of: ", stringify!(_snd_pcm_audio_tstamp_report))
    );
    assert_eq!(
        ::std::mem::align_of::<_snd_pcm_audio_tstamp_report>(),
        4usize,
        concat!("Alignment of ", stringify!(_snd_pcm_audio_tstamp_report))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_snd_pcm_audio_tstamp_report>())).accuracy as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_snd_pcm_audio_tstamp_report),
            "::",
            stringify!(accuracy)
        )
    );
}
impl _snd_pcm_audio_tstamp_report {
    #[inline]
    pub fn valid(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_valid(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn actual_type(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_actual_type(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn accuracy_report(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_accuracy_report(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        valid: ::std::os::raw::c_uint,
        actual_type: ::std::os::raw::c_uint,
        accuracy_report: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let valid: u32 = unsafe { ::std::mem::transmute(valid) };
            valid as u64
        });
        __bindgen_bitfield_unit.set(1usize, 4u8, {
            let actual_type: u32 = unsafe { ::std::mem::transmute(actual_type) };
            actual_type as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let accuracy_report: u32 = unsafe { ::std::mem::transmute(accuracy_report) };
            accuracy_report as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type snd_pcm_audio_tstamp_report_t = _snd_pcm_audio_tstamp_report;
pub type snd_pcm_uframes_t = ::std::os::raw::c_ulong;
pub type snd_pcm_sframes_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_pcm {
    _unused: [u8; 0],
}
pub type snd_pcm_t = _snd_pcm;
impl _snd_pcm_type {
    pub const SND_PCM_TYPE_LAST: _snd_pcm_type = _snd_pcm_type::SND_PCM_TYPE_MMAP_EMUL;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _snd_pcm_type {
    SND_PCM_TYPE_HW = 0,
    SND_PCM_TYPE_HOOKS = 1,
    SND_PCM_TYPE_MULTI = 2,
    SND_PCM_TYPE_FILE = 3,
    SND_PCM_TYPE_NULL = 4,
    SND_PCM_TYPE_SHM = 5,
    SND_PCM_TYPE_INET = 6,
    SND_PCM_TYPE_COPY = 7,
    SND_PCM_TYPE_LINEAR = 8,
    SND_PCM_TYPE_ALAW = 9,
    SND_PCM_TYPE_MULAW = 10,
    SND_PCM_TYPE_ADPCM = 11,
    SND_PCM_TYPE_RATE = 12,
    SND_PCM_TYPE_ROUTE = 13,
    SND_PCM_TYPE_PLUG = 14,
    SND_PCM_TYPE_SHARE = 15,
    SND_PCM_TYPE_METER = 16,
    SND_PCM_TYPE_MIX = 17,
    SND_PCM_TYPE_DROUTE = 18,
    SND_PCM_TYPE_LBSERVER = 19,
    SND_PCM_TYPE_LINEAR_FLOAT = 20,
    SND_PCM_TYPE_LADSPA = 21,
    SND_PCM_TYPE_DMIX = 22,
    SND_PCM_TYPE_JACK = 23,
    SND_PCM_TYPE_DSNOOP = 24,
    SND_PCM_TYPE_DSHARE = 25,
    SND_PCM_TYPE_IEC958 = 26,
    SND_PCM_TYPE_SOFTVOL = 27,
    SND_PCM_TYPE_IOPLUG = 28,
    SND_PCM_TYPE_EXTPLUG = 29,
    SND_PCM_TYPE_MMAP_EMUL = 30,
}
pub use self::_snd_pcm_type as snd_pcm_type_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_pcm_channel_area {
    pub addr: *mut ::std::os::raw::c_void,
    pub first: ::std::os::raw::c_uint,
    pub step: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout__snd_pcm_channel_area() {
    assert_eq!(
        ::std::mem::size_of::<_snd_pcm_channel_area>(),
        16usize,
        concat!("Size of: ", stringify!(_snd_pcm_channel_area))
    );
    assert_eq!(
        ::std::mem::align_of::<_snd_pcm_channel_area>(),
        8usize,
        concat!("Alignment of ", stringify!(_snd_pcm_channel_area))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_snd_pcm_channel_area>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_snd_pcm_channel_area),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_snd_pcm_channel_area>())).first as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_snd_pcm_channel_area),
            "::",
            stringify!(first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_snd_pcm_channel_area>())).step as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_snd_pcm_channel_area),
            "::",
            stringify!(step)
        )
    );
}
pub type snd_pcm_channel_area_t = _snd_pcm_channel_area;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _snd_pcm_sync_id {
    pub id: [::std::os::raw::c_uchar; 16usize],
    pub id16: [::std::os::raw::c_ushort; 8usize],
    pub id32: [::std::os::raw::c_uint; 4usize],
    _bindgen_union_align: [u32; 4usize],
}
#[test]
fn bindgen_test_layout__snd_pcm_sync_id() {
    assert_eq!(
        ::std::mem::size_of::<_snd_pcm_sync_id>(),
        16usize,
        concat!("Size of: ", stringify!(_snd_pcm_sync_id))
    );
    assert_eq!(
        ::std::mem::align_of::<_snd_pcm_sync_id>(),
        4usize,
        concat!("Alignment of ", stringify!(_snd_pcm_sync_id))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_snd_pcm_sync_id>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_snd_pcm_sync_id),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_snd_pcm_sync_id>())).id16 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_snd_pcm_sync_id),
            "::",
            stringify!(id16)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_snd_pcm_sync_id>())).id32 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_snd_pcm_sync_id),
            "::",
            stringify!(id32)
        )
    );
}
pub type snd_pcm_sync_id_t = _snd_pcm_sync_id;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_pcm_scope {
    _unused: [u8; 0],
}
pub type snd_pcm_scope_t = _snd_pcm_scope;
extern "C" {
    pub fn snd_pcm_open(
        pcm: *mut *mut snd_pcm_t,
        name: *const ::std::os::raw::c_char,
        stream: snd_pcm_stream_t,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_open_lconf(
        pcm: *mut *mut snd_pcm_t,
        name: *const ::std::os::raw::c_char,
        stream: snd_pcm_stream_t,
        mode: ::std::os::raw::c_int,
        lconf: *mut snd_config_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_open_fallback(
        pcm: *mut *mut snd_pcm_t,
        root: *mut snd_config_t,
        name: *const ::std::os::raw::c_char,
        orig_name: *const ::std::os::raw::c_char,
        stream: snd_pcm_stream_t,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_close(pcm: *mut snd_pcm_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_name(pcm: *mut snd_pcm_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_pcm_type(pcm: *mut snd_pcm_t) -> snd_pcm_type_t;
}
extern "C" {
    pub fn snd_pcm_stream(pcm: *mut snd_pcm_t) -> snd_pcm_stream_t;
}
extern "C" {
    pub fn snd_pcm_poll_descriptors_count(pcm: *mut snd_pcm_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_poll_descriptors(
        pcm: *mut snd_pcm_t,
        pfds: *mut pollfd,
        space: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_poll_descriptors_revents(
        pcm: *mut snd_pcm_t,
        pfds: *mut pollfd,
        nfds: ::std::os::raw::c_uint,
        revents: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_nonblock(
        pcm: *mut snd_pcm_t,
        nonblock: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_async_add_pcm_handler(
        handler: *mut *mut snd_async_handler_t,
        pcm: *mut snd_pcm_t,
        callback: snd_async_callback_t,
        private_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_async_handler_get_pcm(handler: *mut snd_async_handler_t) -> *mut snd_pcm_t;
}
extern "C" {
    pub fn snd_pcm_info(pcm: *mut snd_pcm_t, info: *mut snd_pcm_info_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_current(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_free(pcm: *mut snd_pcm_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_sw_params_current(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_sw_params_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_sw_params(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_sw_params_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_prepare(pcm: *mut snd_pcm_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_reset(pcm: *mut snd_pcm_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_status(
        pcm: *mut snd_pcm_t,
        status: *mut snd_pcm_status_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_start(pcm: *mut snd_pcm_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_drop(pcm: *mut snd_pcm_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_drain(pcm: *mut snd_pcm_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_pause(
        pcm: *mut snd_pcm_t,
        enable: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_state(pcm: *mut snd_pcm_t) -> snd_pcm_state_t;
}
extern "C" {
    pub fn snd_pcm_hwsync(pcm: *mut snd_pcm_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_delay(
        pcm: *mut snd_pcm_t,
        delayp: *mut snd_pcm_sframes_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_resume(pcm: *mut snd_pcm_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_htimestamp(
        pcm: *mut snd_pcm_t,
        avail: *mut snd_pcm_uframes_t,
        tstamp: *mut snd_htimestamp_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_avail(pcm: *mut snd_pcm_t) -> snd_pcm_sframes_t;
}
extern "C" {
    pub fn snd_pcm_avail_update(pcm: *mut snd_pcm_t) -> snd_pcm_sframes_t;
}
extern "C" {
    pub fn snd_pcm_avail_delay(
        pcm: *mut snd_pcm_t,
        availp: *mut snd_pcm_sframes_t,
        delayp: *mut snd_pcm_sframes_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_rewindable(pcm: *mut snd_pcm_t) -> snd_pcm_sframes_t;
}
extern "C" {
    pub fn snd_pcm_rewind(pcm: *mut snd_pcm_t, frames: snd_pcm_uframes_t) -> snd_pcm_sframes_t;
}
extern "C" {
    pub fn snd_pcm_forwardable(pcm: *mut snd_pcm_t) -> snd_pcm_sframes_t;
}
extern "C" {
    pub fn snd_pcm_forward(pcm: *mut snd_pcm_t, frames: snd_pcm_uframes_t) -> snd_pcm_sframes_t;
}
extern "C" {
    pub fn snd_pcm_writei(
        pcm: *mut snd_pcm_t,
        buffer: *const ::std::os::raw::c_void,
        size: snd_pcm_uframes_t,
    ) -> snd_pcm_sframes_t;
}
extern "C" {
    pub fn snd_pcm_readi(
        pcm: *mut snd_pcm_t,
        buffer: *mut ::std::os::raw::c_void,
        size: snd_pcm_uframes_t,
    ) -> snd_pcm_sframes_t;
}
extern "C" {
    pub fn snd_pcm_writen(
        pcm: *mut snd_pcm_t,
        bufs: *mut *mut ::std::os::raw::c_void,
        size: snd_pcm_uframes_t,
    ) -> snd_pcm_sframes_t;
}
extern "C" {
    pub fn snd_pcm_readn(
        pcm: *mut snd_pcm_t,
        bufs: *mut *mut ::std::os::raw::c_void,
        size: snd_pcm_uframes_t,
    ) -> snd_pcm_sframes_t;
}
extern "C" {
    pub fn snd_pcm_wait(
        pcm: *mut snd_pcm_t,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_link(pcm1: *mut snd_pcm_t, pcm2: *mut snd_pcm_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_unlink(pcm: *mut snd_pcm_t) -> ::std::os::raw::c_int;
}
impl snd_pcm_chmap_type {
    pub const SND_CHMAP_TYPE_LAST: snd_pcm_chmap_type = snd_pcm_chmap_type::SND_CHMAP_TYPE_PAIRED;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum snd_pcm_chmap_type {
    SND_CHMAP_TYPE_NONE = 0,
    SND_CHMAP_TYPE_FIXED = 1,
    SND_CHMAP_TYPE_VAR = 2,
    SND_CHMAP_TYPE_PAIRED = 3,
}
impl snd_pcm_chmap_position {
    pub const SND_CHMAP_LAST: snd_pcm_chmap_position = snd_pcm_chmap_position::SND_CHMAP_BRC;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum snd_pcm_chmap_position {
    SND_CHMAP_UNKNOWN = 0,
    SND_CHMAP_NA = 1,
    SND_CHMAP_MONO = 2,
    SND_CHMAP_FL = 3,
    SND_CHMAP_FR = 4,
    SND_CHMAP_RL = 5,
    SND_CHMAP_RR = 6,
    SND_CHMAP_FC = 7,
    SND_CHMAP_LFE = 8,
    SND_CHMAP_SL = 9,
    SND_CHMAP_SR = 10,
    SND_CHMAP_RC = 11,
    SND_CHMAP_FLC = 12,
    SND_CHMAP_FRC = 13,
    SND_CHMAP_RLC = 14,
    SND_CHMAP_RRC = 15,
    SND_CHMAP_FLW = 16,
    SND_CHMAP_FRW = 17,
    SND_CHMAP_FLH = 18,
    SND_CHMAP_FCH = 19,
    SND_CHMAP_FRH = 20,
    SND_CHMAP_TC = 21,
    SND_CHMAP_TFL = 22,
    SND_CHMAP_TFR = 23,
    SND_CHMAP_TFC = 24,
    SND_CHMAP_TRL = 25,
    SND_CHMAP_TRR = 26,
    SND_CHMAP_TRC = 27,
    SND_CHMAP_TFLC = 28,
    SND_CHMAP_TFRC = 29,
    SND_CHMAP_TSL = 30,
    SND_CHMAP_TSR = 31,
    SND_CHMAP_LLFE = 32,
    SND_CHMAP_RLFE = 33,
    SND_CHMAP_BC = 34,
    SND_CHMAP_BLC = 35,
    SND_CHMAP_BRC = 36,
}
#[repr(C)]
#[derive(Debug)]
pub struct snd_pcm_chmap {
    pub channels: ::std::os::raw::c_uint,
    pub pos: __IncompleteArrayField<::std::os::raw::c_uint>,
}
#[test]
fn bindgen_test_layout_snd_pcm_chmap() {
    assert_eq!(
        ::std::mem::size_of::<snd_pcm_chmap>(),
        4usize,
        concat!("Size of: ", stringify!(snd_pcm_chmap))
    );
    assert_eq!(
        ::std::mem::align_of::<snd_pcm_chmap>(),
        4usize,
        concat!("Alignment of ", stringify!(snd_pcm_chmap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_pcm_chmap>())).channels as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_pcm_chmap),
            "::",
            stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_pcm_chmap>())).pos as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_pcm_chmap),
            "::",
            stringify!(pos)
        )
    );
}
pub type snd_pcm_chmap_t = snd_pcm_chmap;
#[repr(C)]
#[derive(Debug)]
pub struct snd_pcm_chmap_query {
    pub type_: snd_pcm_chmap_type,
    pub map: snd_pcm_chmap_t,
}
#[test]
fn bindgen_test_layout_snd_pcm_chmap_query() {
    assert_eq!(
        ::std::mem::size_of::<snd_pcm_chmap_query>(),
        8usize,
        concat!("Size of: ", stringify!(snd_pcm_chmap_query))
    );
    assert_eq!(
        ::std::mem::align_of::<snd_pcm_chmap_query>(),
        4usize,
        concat!("Alignment of ", stringify!(snd_pcm_chmap_query))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_pcm_chmap_query>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_pcm_chmap_query),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_pcm_chmap_query>())).map as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_pcm_chmap_query),
            "::",
            stringify!(map)
        )
    );
}
pub type snd_pcm_chmap_query_t = snd_pcm_chmap_query;
extern "C" {
    pub fn snd_pcm_query_chmaps(pcm: *mut snd_pcm_t) -> *mut *mut snd_pcm_chmap_query_t;
}
extern "C" {
    pub fn snd_pcm_query_chmaps_from_hw(
        card: ::std::os::raw::c_int,
        dev: ::std::os::raw::c_int,
        subdev: ::std::os::raw::c_int,
        stream: snd_pcm_stream_t,
    ) -> *mut *mut snd_pcm_chmap_query_t;
}
extern "C" {
    pub fn snd_pcm_free_chmaps(maps: *mut *mut snd_pcm_chmap_query_t);
}
extern "C" {
    pub fn snd_pcm_get_chmap(pcm: *mut snd_pcm_t) -> *mut snd_pcm_chmap_t;
}
extern "C" {
    pub fn snd_pcm_set_chmap(
        pcm: *mut snd_pcm_t,
        map: *const snd_pcm_chmap_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_chmap_type_name(val: snd_pcm_chmap_type) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_pcm_chmap_name(val: snd_pcm_chmap_position) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_pcm_chmap_long_name(val: snd_pcm_chmap_position) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_pcm_chmap_print(
        map: *const snd_pcm_chmap_t,
        maxlen: usize,
        buf: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_chmap_from_string(str: *const ::std::os::raw::c_char) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_pcm_chmap_parse_string(str: *const ::std::os::raw::c_char) -> *mut snd_pcm_chmap_t;
}
extern "C" {
    pub fn snd_pcm_recover(
        pcm: *mut snd_pcm_t,
        err: ::std::os::raw::c_int,
        silent: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_set_params(
        pcm: *mut snd_pcm_t,
        format: snd_pcm_format_t,
        access: snd_pcm_access_t,
        channels: ::std::os::raw::c_uint,
        rate: ::std::os::raw::c_uint,
        soft_resample: ::std::os::raw::c_int,
        latency: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_get_params(
        pcm: *mut snd_pcm_t,
        buffer_size: *mut snd_pcm_uframes_t,
        period_size: *mut snd_pcm_uframes_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_info_sizeof() -> usize;
}
extern "C" {
    pub fn snd_pcm_info_malloc(ptr: *mut *mut snd_pcm_info_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_info_free(obj: *mut snd_pcm_info_t);
}
extern "C" {
    pub fn snd_pcm_info_copy(dst: *mut snd_pcm_info_t, src: *const snd_pcm_info_t);
}
extern "C" {
    pub fn snd_pcm_info_get_device(obj: *const snd_pcm_info_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_pcm_info_get_subdevice(obj: *const snd_pcm_info_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_pcm_info_get_stream(obj: *const snd_pcm_info_t) -> snd_pcm_stream_t;
}
extern "C" {
    pub fn snd_pcm_info_get_card(obj: *const snd_pcm_info_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_info_get_id(obj: *const snd_pcm_info_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_pcm_info_get_name(obj: *const snd_pcm_info_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_pcm_info_get_subdevice_name(
        obj: *const snd_pcm_info_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_pcm_info_get_class(obj: *const snd_pcm_info_t) -> snd_pcm_class_t;
}
extern "C" {
    pub fn snd_pcm_info_get_subclass(obj: *const snd_pcm_info_t) -> snd_pcm_subclass_t;
}
extern "C" {
    pub fn snd_pcm_info_get_subdevices_count(obj: *const snd_pcm_info_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_pcm_info_get_subdevices_avail(obj: *const snd_pcm_info_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_pcm_info_get_sync(obj: *const snd_pcm_info_t) -> snd_pcm_sync_id_t;
}
extern "C" {
    pub fn snd_pcm_info_set_device(obj: *mut snd_pcm_info_t, val: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn snd_pcm_info_set_subdevice(obj: *mut snd_pcm_info_t, val: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn snd_pcm_info_set_stream(obj: *mut snd_pcm_info_t, val: snd_pcm_stream_t);
}
extern "C" {
    pub fn snd_pcm_hw_params_any(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_can_mmap_sample_resolution(
        params: *const snd_pcm_hw_params_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_is_double(params: *const snd_pcm_hw_params_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_is_batch(params: *const snd_pcm_hw_params_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_is_block_transfer(
        params: *const snd_pcm_hw_params_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_is_monotonic(
        params: *const snd_pcm_hw_params_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_can_overrange(
        params: *const snd_pcm_hw_params_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_can_pause(params: *const snd_pcm_hw_params_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_can_resume(
        params: *const snd_pcm_hw_params_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_is_half_duplex(
        params: *const snd_pcm_hw_params_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_is_joint_duplex(
        params: *const snd_pcm_hw_params_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_can_sync_start(
        params: *const snd_pcm_hw_params_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_can_disable_period_wakeup(
        params: *const snd_pcm_hw_params_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_supports_audio_wallclock_ts(
        params: *const snd_pcm_hw_params_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_supports_audio_ts_type(
        params: *const snd_pcm_hw_params_t,
        type_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_get_rate_numden(
        params: *const snd_pcm_hw_params_t,
        rate_num: *mut ::std::os::raw::c_uint,
        rate_den: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_get_sbits(params: *const snd_pcm_hw_params_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_get_fifo_size(
        params: *const snd_pcm_hw_params_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_sizeof() -> usize;
}
extern "C" {
    pub fn snd_pcm_hw_params_malloc(ptr: *mut *mut snd_pcm_hw_params_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_free(obj: *mut snd_pcm_hw_params_t);
}
extern "C" {
    pub fn snd_pcm_hw_params_copy(dst: *mut snd_pcm_hw_params_t, src: *const snd_pcm_hw_params_t);
}
extern "C" {
    pub fn snd_pcm_hw_params_get_access(
        params: *const snd_pcm_hw_params_t,
        _access: *mut snd_pcm_access_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_test_access(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        _access: snd_pcm_access_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_access(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        _access: snd_pcm_access_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_access_first(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        _access: *mut snd_pcm_access_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_access_last(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        _access: *mut snd_pcm_access_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_access_mask(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        mask: *mut snd_pcm_access_mask_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_get_access_mask(
        params: *mut snd_pcm_hw_params_t,
        mask: *mut snd_pcm_access_mask_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_get_format(
        params: *const snd_pcm_hw_params_t,
        val: *mut snd_pcm_format_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_test_format(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: snd_pcm_format_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_format(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: snd_pcm_format_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_format_first(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        format: *mut snd_pcm_format_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_format_last(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        format: *mut snd_pcm_format_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_format_mask(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        mask: *mut snd_pcm_format_mask_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_get_format_mask(
        params: *mut snd_pcm_hw_params_t,
        mask: *mut snd_pcm_format_mask_t,
    );
}
extern "C" {
    pub fn snd_pcm_hw_params_get_subformat(
        params: *const snd_pcm_hw_params_t,
        subformat: *mut snd_pcm_subformat_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_test_subformat(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        subformat: snd_pcm_subformat_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_subformat(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        subformat: snd_pcm_subformat_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_subformat_first(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        subformat: *mut snd_pcm_subformat_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_subformat_last(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        subformat: *mut snd_pcm_subformat_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_subformat_mask(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        mask: *mut snd_pcm_subformat_mask_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_get_subformat_mask(
        params: *mut snd_pcm_hw_params_t,
        mask: *mut snd_pcm_subformat_mask_t,
    );
}
extern "C" {
    pub fn snd_pcm_hw_params_get_channels(
        params: *const snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_get_channels_min(
        params: *const snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_get_channels_max(
        params: *const snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_test_channels(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_channels(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_channels_min(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_channels_max(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_channels_minmax(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        min: *mut ::std::os::raw::c_uint,
        max: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_channels_near(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_channels_first(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_channels_last(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_get_rate(
        params: *const snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_get_rate_min(
        params: *const snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_get_rate_max(
        params: *const snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_test_rate(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: ::std::os::raw::c_uint,
        dir: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_rate(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: ::std::os::raw::c_uint,
        dir: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_rate_min(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_rate_max(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_rate_minmax(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        min: *mut ::std::os::raw::c_uint,
        mindir: *mut ::std::os::raw::c_int,
        max: *mut ::std::os::raw::c_uint,
        maxdir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_rate_near(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_rate_first(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_rate_last(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_rate_resample(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_get_rate_resample(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_export_buffer(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_get_export_buffer(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_period_wakeup(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_get_period_wakeup(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_get_period_time(
        params: *const snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_get_period_time_min(
        params: *const snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_get_period_time_max(
        params: *const snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_test_period_time(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: ::std::os::raw::c_uint,
        dir: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_period_time(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: ::std::os::raw::c_uint,
        dir: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_period_time_min(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_period_time_max(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_period_time_minmax(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        min: *mut ::std::os::raw::c_uint,
        mindir: *mut ::std::os::raw::c_int,
        max: *mut ::std::os::raw::c_uint,
        maxdir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_period_time_near(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_period_time_first(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_period_time_last(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_get_period_size(
        params: *const snd_pcm_hw_params_t,
        frames: *mut snd_pcm_uframes_t,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_get_period_size_min(
        params: *const snd_pcm_hw_params_t,
        frames: *mut snd_pcm_uframes_t,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_get_period_size_max(
        params: *const snd_pcm_hw_params_t,
        frames: *mut snd_pcm_uframes_t,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_test_period_size(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: snd_pcm_uframes_t,
        dir: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_period_size(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: snd_pcm_uframes_t,
        dir: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_period_size_min(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: *mut snd_pcm_uframes_t,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_period_size_max(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: *mut snd_pcm_uframes_t,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_period_size_minmax(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        min: *mut snd_pcm_uframes_t,
        mindir: *mut ::std::os::raw::c_int,
        max: *mut snd_pcm_uframes_t,
        maxdir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_period_size_near(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: *mut snd_pcm_uframes_t,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_period_size_first(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: *mut snd_pcm_uframes_t,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_period_size_last(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: *mut snd_pcm_uframes_t,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_period_size_integer(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_get_periods(
        params: *const snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_get_periods_min(
        params: *const snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_get_periods_max(
        params: *const snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_test_periods(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: ::std::os::raw::c_uint,
        dir: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_periods(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: ::std::os::raw::c_uint,
        dir: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_periods_min(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_periods_max(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_periods_minmax(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        min: *mut ::std::os::raw::c_uint,
        mindir: *mut ::std::os::raw::c_int,
        max: *mut ::std::os::raw::c_uint,
        maxdir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_periods_near(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_periods_first(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_periods_last(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_periods_integer(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_get_buffer_time(
        params: *const snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_get_buffer_time_min(
        params: *const snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_get_buffer_time_max(
        params: *const snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_test_buffer_time(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: ::std::os::raw::c_uint,
        dir: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_buffer_time(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: ::std::os::raw::c_uint,
        dir: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_buffer_time_min(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_buffer_time_max(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_buffer_time_minmax(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        min: *mut ::std::os::raw::c_uint,
        mindir: *mut ::std::os::raw::c_int,
        max: *mut ::std::os::raw::c_uint,
        maxdir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_buffer_time_near(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_buffer_time_first(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_buffer_time_last(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_get_buffer_size(
        params: *const snd_pcm_hw_params_t,
        val: *mut snd_pcm_uframes_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_get_buffer_size_min(
        params: *const snd_pcm_hw_params_t,
        val: *mut snd_pcm_uframes_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_get_buffer_size_max(
        params: *const snd_pcm_hw_params_t,
        val: *mut snd_pcm_uframes_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_test_buffer_size(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: snd_pcm_uframes_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_buffer_size(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: snd_pcm_uframes_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_buffer_size_min(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: *mut snd_pcm_uframes_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_buffer_size_max(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: *mut snd_pcm_uframes_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_buffer_size_minmax(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        min: *mut snd_pcm_uframes_t,
        max: *mut snd_pcm_uframes_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_buffer_size_near(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: *mut snd_pcm_uframes_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_buffer_size_first(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: *mut snd_pcm_uframes_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_buffer_size_last(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: *mut snd_pcm_uframes_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_get_min_align(
        params: *const snd_pcm_hw_params_t,
        val: *mut snd_pcm_uframes_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_sw_params_sizeof() -> usize;
}
extern "C" {
    pub fn snd_pcm_sw_params_malloc(ptr: *mut *mut snd_pcm_sw_params_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_sw_params_free(obj: *mut snd_pcm_sw_params_t);
}
extern "C" {
    pub fn snd_pcm_sw_params_copy(dst: *mut snd_pcm_sw_params_t, src: *const snd_pcm_sw_params_t);
}
extern "C" {
    pub fn snd_pcm_sw_params_get_boundary(
        params: *const snd_pcm_sw_params_t,
        val: *mut snd_pcm_uframes_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_sw_params_set_tstamp_mode(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_sw_params_t,
        val: snd_pcm_tstamp_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_sw_params_get_tstamp_mode(
        params: *const snd_pcm_sw_params_t,
        val: *mut snd_pcm_tstamp_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_sw_params_set_tstamp_type(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_sw_params_t,
        val: snd_pcm_tstamp_type_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_sw_params_get_tstamp_type(
        params: *const snd_pcm_sw_params_t,
        val: *mut snd_pcm_tstamp_type_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_sw_params_set_avail_min(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_sw_params_t,
        val: snd_pcm_uframes_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_sw_params_get_avail_min(
        params: *const snd_pcm_sw_params_t,
        val: *mut snd_pcm_uframes_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_sw_params_set_period_event(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_sw_params_t,
        val: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_sw_params_get_period_event(
        params: *const snd_pcm_sw_params_t,
        val: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_sw_params_set_start_threshold(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_sw_params_t,
        val: snd_pcm_uframes_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_sw_params_get_start_threshold(
        paramsm: *const snd_pcm_sw_params_t,
        val: *mut snd_pcm_uframes_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_sw_params_set_stop_threshold(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_sw_params_t,
        val: snd_pcm_uframes_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_sw_params_get_stop_threshold(
        params: *const snd_pcm_sw_params_t,
        val: *mut snd_pcm_uframes_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_sw_params_set_silence_threshold(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_sw_params_t,
        val: snd_pcm_uframes_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_sw_params_get_silence_threshold(
        params: *const snd_pcm_sw_params_t,
        val: *mut snd_pcm_uframes_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_sw_params_set_silence_size(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_sw_params_t,
        val: snd_pcm_uframes_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_sw_params_get_silence_size(
        params: *const snd_pcm_sw_params_t,
        val: *mut snd_pcm_uframes_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_access_mask_sizeof() -> usize;
}
extern "C" {
    pub fn snd_pcm_access_mask_malloc(
        ptr: *mut *mut snd_pcm_access_mask_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_access_mask_free(obj: *mut snd_pcm_access_mask_t);
}
extern "C" {
    pub fn snd_pcm_access_mask_copy(
        dst: *mut snd_pcm_access_mask_t,
        src: *const snd_pcm_access_mask_t,
    );
}
extern "C" {
    pub fn snd_pcm_access_mask_none(mask: *mut snd_pcm_access_mask_t);
}
extern "C" {
    pub fn snd_pcm_access_mask_any(mask: *mut snd_pcm_access_mask_t);
}
extern "C" {
    pub fn snd_pcm_access_mask_test(
        mask: *const snd_pcm_access_mask_t,
        val: snd_pcm_access_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_access_mask_empty(mask: *const snd_pcm_access_mask_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_access_mask_set(mask: *mut snd_pcm_access_mask_t, val: snd_pcm_access_t);
}
extern "C" {
    pub fn snd_pcm_access_mask_reset(mask: *mut snd_pcm_access_mask_t, val: snd_pcm_access_t);
}
extern "C" {
    pub fn snd_pcm_format_mask_sizeof() -> usize;
}
extern "C" {
    pub fn snd_pcm_format_mask_malloc(
        ptr: *mut *mut snd_pcm_format_mask_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_format_mask_free(obj: *mut snd_pcm_format_mask_t);
}
extern "C" {
    pub fn snd_pcm_format_mask_copy(
        dst: *mut snd_pcm_format_mask_t,
        src: *const snd_pcm_format_mask_t,
    );
}
extern "C" {
    pub fn snd_pcm_format_mask_none(mask: *mut snd_pcm_format_mask_t);
}
extern "C" {
    pub fn snd_pcm_format_mask_any(mask: *mut snd_pcm_format_mask_t);
}
extern "C" {
    pub fn snd_pcm_format_mask_test(
        mask: *const snd_pcm_format_mask_t,
        val: snd_pcm_format_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_format_mask_empty(mask: *const snd_pcm_format_mask_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_format_mask_set(mask: *mut snd_pcm_format_mask_t, val: snd_pcm_format_t);
}
extern "C" {
    pub fn snd_pcm_format_mask_reset(mask: *mut snd_pcm_format_mask_t, val: snd_pcm_format_t);
}
extern "C" {
    pub fn snd_pcm_subformat_mask_sizeof() -> usize;
}
extern "C" {
    pub fn snd_pcm_subformat_mask_malloc(
        ptr: *mut *mut snd_pcm_subformat_mask_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_subformat_mask_free(obj: *mut snd_pcm_subformat_mask_t);
}
extern "C" {
    pub fn snd_pcm_subformat_mask_copy(
        dst: *mut snd_pcm_subformat_mask_t,
        src: *const snd_pcm_subformat_mask_t,
    );
}
extern "C" {
    pub fn snd_pcm_subformat_mask_none(mask: *mut snd_pcm_subformat_mask_t);
}
extern "C" {
    pub fn snd_pcm_subformat_mask_any(mask: *mut snd_pcm_subformat_mask_t);
}
extern "C" {
    pub fn snd_pcm_subformat_mask_test(
        mask: *const snd_pcm_subformat_mask_t,
        val: snd_pcm_subformat_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_subformat_mask_empty(
        mask: *const snd_pcm_subformat_mask_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_subformat_mask_set(
        mask: *mut snd_pcm_subformat_mask_t,
        val: snd_pcm_subformat_t,
    );
}
extern "C" {
    pub fn snd_pcm_subformat_mask_reset(
        mask: *mut snd_pcm_subformat_mask_t,
        val: snd_pcm_subformat_t,
    );
}
extern "C" {
    pub fn snd_pcm_status_sizeof() -> usize;
}
extern "C" {
    pub fn snd_pcm_status_malloc(ptr: *mut *mut snd_pcm_status_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_status_free(obj: *mut snd_pcm_status_t);
}
extern "C" {
    pub fn snd_pcm_status_copy(dst: *mut snd_pcm_status_t, src: *const snd_pcm_status_t);
}
extern "C" {
    pub fn snd_pcm_status_get_state(obj: *const snd_pcm_status_t) -> snd_pcm_state_t;
}
extern "C" {
    pub fn snd_pcm_status_get_trigger_tstamp(
        obj: *const snd_pcm_status_t,
        ptr: *mut snd_timestamp_t,
    );
}
extern "C" {
    pub fn snd_pcm_status_get_trigger_htstamp(
        obj: *const snd_pcm_status_t,
        ptr: *mut snd_htimestamp_t,
    );
}
extern "C" {
    pub fn snd_pcm_status_get_tstamp(obj: *const snd_pcm_status_t, ptr: *mut snd_timestamp_t);
}
extern "C" {
    pub fn snd_pcm_status_get_htstamp(obj: *const snd_pcm_status_t, ptr: *mut snd_htimestamp_t);
}
extern "C" {
    pub fn snd_pcm_status_get_audio_htstamp(
        obj: *const snd_pcm_status_t,
        ptr: *mut snd_htimestamp_t,
    );
}
extern "C" {
    pub fn snd_pcm_status_get_driver_htstamp(
        obj: *const snd_pcm_status_t,
        ptr: *mut snd_htimestamp_t,
    );
}
extern "C" {
    pub fn snd_pcm_status_get_audio_htstamp_report(
        obj: *const snd_pcm_status_t,
        audio_tstamp_report: *mut snd_pcm_audio_tstamp_report_t,
    );
}
extern "C" {
    pub fn snd_pcm_status_set_audio_htstamp_config(
        obj: *mut snd_pcm_status_t,
        audio_tstamp_config: *mut snd_pcm_audio_tstamp_config_t,
    );
}
extern "C" {
    pub fn snd_pcm_status_get_delay(obj: *const snd_pcm_status_t) -> snd_pcm_sframes_t;
}
extern "C" {
    pub fn snd_pcm_status_get_avail(obj: *const snd_pcm_status_t) -> snd_pcm_uframes_t;
}
extern "C" {
    pub fn snd_pcm_status_get_avail_max(obj: *const snd_pcm_status_t) -> snd_pcm_uframes_t;
}
extern "C" {
    pub fn snd_pcm_status_get_overrange(obj: *const snd_pcm_status_t) -> snd_pcm_uframes_t;
}
extern "C" {
    pub fn snd_pcm_type_name(type_: snd_pcm_type_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_pcm_stream_name(stream: snd_pcm_stream_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_pcm_access_name(_access: snd_pcm_access_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_pcm_format_name(format: snd_pcm_format_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_pcm_format_description(format: snd_pcm_format_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_pcm_subformat_name(subformat: snd_pcm_subformat_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_pcm_subformat_description(
        subformat: snd_pcm_subformat_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_pcm_format_value(name: *const ::std::os::raw::c_char) -> snd_pcm_format_t;
}
extern "C" {
    pub fn snd_pcm_tstamp_mode_name(mode: snd_pcm_tstamp_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_pcm_state_name(state: snd_pcm_state_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_pcm_dump(pcm: *mut snd_pcm_t, out: *mut snd_output_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_dump_hw_setup(
        pcm: *mut snd_pcm_t,
        out: *mut snd_output_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_dump_sw_setup(
        pcm: *mut snd_pcm_t,
        out: *mut snd_output_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_dump_setup(pcm: *mut snd_pcm_t, out: *mut snd_output_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_dump(
        params: *mut snd_pcm_hw_params_t,
        out: *mut snd_output_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_sw_params_dump(
        params: *mut snd_pcm_sw_params_t,
        out: *mut snd_output_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_status_dump(
        status: *mut snd_pcm_status_t,
        out: *mut snd_output_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_mmap_begin(
        pcm: *mut snd_pcm_t,
        areas: *mut *const snd_pcm_channel_area_t,
        offset: *mut snd_pcm_uframes_t,
        frames: *mut snd_pcm_uframes_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_mmap_commit(
        pcm: *mut snd_pcm_t,
        offset: snd_pcm_uframes_t,
        frames: snd_pcm_uframes_t,
    ) -> snd_pcm_sframes_t;
}
extern "C" {
    pub fn snd_pcm_mmap_writei(
        pcm: *mut snd_pcm_t,
        buffer: *const ::std::os::raw::c_void,
        size: snd_pcm_uframes_t,
    ) -> snd_pcm_sframes_t;
}
extern "C" {
    pub fn snd_pcm_mmap_readi(
        pcm: *mut snd_pcm_t,
        buffer: *mut ::std::os::raw::c_void,
        size: snd_pcm_uframes_t,
    ) -> snd_pcm_sframes_t;
}
extern "C" {
    pub fn snd_pcm_mmap_writen(
        pcm: *mut snd_pcm_t,
        bufs: *mut *mut ::std::os::raw::c_void,
        size: snd_pcm_uframes_t,
    ) -> snd_pcm_sframes_t;
}
extern "C" {
    pub fn snd_pcm_mmap_readn(
        pcm: *mut snd_pcm_t,
        bufs: *mut *mut ::std::os::raw::c_void,
        size: snd_pcm_uframes_t,
    ) -> snd_pcm_sframes_t;
}
extern "C" {
    pub fn snd_pcm_format_signed(format: snd_pcm_format_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_format_unsigned(format: snd_pcm_format_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_format_linear(format: snd_pcm_format_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_format_float(format: snd_pcm_format_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_format_little_endian(format: snd_pcm_format_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_format_big_endian(format: snd_pcm_format_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_format_cpu_endian(format: snd_pcm_format_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_format_width(format: snd_pcm_format_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_format_physical_width(format: snd_pcm_format_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_build_linear_format(
        width: ::std::os::raw::c_int,
        pwidth: ::std::os::raw::c_int,
        unsignd: ::std::os::raw::c_int,
        big_endian: ::std::os::raw::c_int,
    ) -> snd_pcm_format_t;
}
extern "C" {
    pub fn snd_pcm_format_size(format: snd_pcm_format_t, samples: usize) -> isize;
}
extern "C" {
    pub fn snd_pcm_format_silence(format: snd_pcm_format_t) -> u8;
}
extern "C" {
    pub fn snd_pcm_format_silence_16(format: snd_pcm_format_t) -> u16;
}
extern "C" {
    pub fn snd_pcm_format_silence_32(format: snd_pcm_format_t) -> u32;
}
extern "C" {
    pub fn snd_pcm_format_silence_64(format: snd_pcm_format_t) -> u64;
}
extern "C" {
    pub fn snd_pcm_format_set_silence(
        format: snd_pcm_format_t,
        buf: *mut ::std::os::raw::c_void,
        samples: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_bytes_to_frames(pcm: *mut snd_pcm_t, bytes: isize) -> snd_pcm_sframes_t;
}
extern "C" {
    pub fn snd_pcm_frames_to_bytes(pcm: *mut snd_pcm_t, frames: snd_pcm_sframes_t) -> isize;
}
extern "C" {
    pub fn snd_pcm_bytes_to_samples(pcm: *mut snd_pcm_t, bytes: isize) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn snd_pcm_samples_to_bytes(pcm: *mut snd_pcm_t, samples: ::std::os::raw::c_long) -> isize;
}
extern "C" {
    pub fn snd_pcm_area_silence(
        dst_channel: *const snd_pcm_channel_area_t,
        dst_offset: snd_pcm_uframes_t,
        samples: ::std::os::raw::c_uint,
        format: snd_pcm_format_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_areas_silence(
        dst_channels: *const snd_pcm_channel_area_t,
        dst_offset: snd_pcm_uframes_t,
        channels: ::std::os::raw::c_uint,
        frames: snd_pcm_uframes_t,
        format: snd_pcm_format_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_area_copy(
        dst_channel: *const snd_pcm_channel_area_t,
        dst_offset: snd_pcm_uframes_t,
        src_channel: *const snd_pcm_channel_area_t,
        src_offset: snd_pcm_uframes_t,
        samples: ::std::os::raw::c_uint,
        format: snd_pcm_format_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_areas_copy(
        dst_channels: *const snd_pcm_channel_area_t,
        dst_offset: snd_pcm_uframes_t,
        src_channels: *const snd_pcm_channel_area_t,
        src_offset: snd_pcm_uframes_t,
        channels: ::std::os::raw::c_uint,
        frames: snd_pcm_uframes_t,
        format: snd_pcm_format_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_areas_copy_wrap(
        dst_channels: *const snd_pcm_channel_area_t,
        dst_offset: snd_pcm_uframes_t,
        dst_size: snd_pcm_uframes_t,
        src_channels: *const snd_pcm_channel_area_t,
        src_offset: snd_pcm_uframes_t,
        src_size: snd_pcm_uframes_t,
        channels: ::std::os::raw::c_uint,
        frames: snd_pcm_uframes_t,
        format: snd_pcm_format_t,
    ) -> ::std::os::raw::c_int;
}
impl _snd_pcm_hook_type {
    pub const SND_PCM_HOOK_TYPE_LAST: _snd_pcm_hook_type =
        _snd_pcm_hook_type::SND_PCM_HOOK_TYPE_CLOSE;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _snd_pcm_hook_type {
    SND_PCM_HOOK_TYPE_HW_PARAMS = 0,
    SND_PCM_HOOK_TYPE_HW_FREE = 1,
    SND_PCM_HOOK_TYPE_CLOSE = 2,
}
pub use self::_snd_pcm_hook_type as snd_pcm_hook_type_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_pcm_hook {
    _unused: [u8; 0],
}
pub type snd_pcm_hook_t = _snd_pcm_hook;
pub type snd_pcm_hook_func_t =
    ::std::option::Option<unsafe extern "C" fn(hook: *mut snd_pcm_hook_t) -> ::std::os::raw::c_int>;
extern "C" {
    pub fn snd_pcm_hook_get_pcm(hook: *mut snd_pcm_hook_t) -> *mut snd_pcm_t;
}
extern "C" {
    pub fn snd_pcm_hook_get_private(hook: *mut snd_pcm_hook_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn snd_pcm_hook_set_private(
        hook: *mut snd_pcm_hook_t,
        private_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn snd_pcm_hook_add(
        hookp: *mut *mut snd_pcm_hook_t,
        pcm: *mut snd_pcm_t,
        type_: snd_pcm_hook_type_t,
        func: snd_pcm_hook_func_t,
        private_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hook_remove(hook: *mut snd_pcm_hook_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_pcm_scope_ops {
    pub enable: ::std::option::Option<
        unsafe extern "C" fn(scope: *mut snd_pcm_scope_t) -> ::std::os::raw::c_int,
    >,
    pub disable: ::std::option::Option<unsafe extern "C" fn(scope: *mut snd_pcm_scope_t)>,
    pub start: ::std::option::Option<unsafe extern "C" fn(scope: *mut snd_pcm_scope_t)>,
    pub stop: ::std::option::Option<unsafe extern "C" fn(scope: *mut snd_pcm_scope_t)>,
    pub update: ::std::option::Option<unsafe extern "C" fn(scope: *mut snd_pcm_scope_t)>,
    pub reset: ::std::option::Option<unsafe extern "C" fn(scope: *mut snd_pcm_scope_t)>,
    pub close: ::std::option::Option<unsafe extern "C" fn(scope: *mut snd_pcm_scope_t)>,
}
#[test]
fn bindgen_test_layout__snd_pcm_scope_ops() {
    assert_eq!(
        ::std::mem::size_of::<_snd_pcm_scope_ops>(),
        56usize,
        concat!("Size of: ", stringify!(_snd_pcm_scope_ops))
    );
    assert_eq!(
        ::std::mem::align_of::<_snd_pcm_scope_ops>(),
        8usize,
        concat!("Alignment of ", stringify!(_snd_pcm_scope_ops))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_snd_pcm_scope_ops>())).enable as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_snd_pcm_scope_ops),
            "::",
            stringify!(enable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_snd_pcm_scope_ops>())).disable as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_snd_pcm_scope_ops),
            "::",
            stringify!(disable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_snd_pcm_scope_ops>())).start as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_snd_pcm_scope_ops),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_snd_pcm_scope_ops>())).stop as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_snd_pcm_scope_ops),
            "::",
            stringify!(stop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_snd_pcm_scope_ops>())).update as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_snd_pcm_scope_ops),
            "::",
            stringify!(update)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_snd_pcm_scope_ops>())).reset as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_snd_pcm_scope_ops),
            "::",
            stringify!(reset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_snd_pcm_scope_ops>())).close as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_snd_pcm_scope_ops),
            "::",
            stringify!(close)
        )
    );
}
pub type snd_pcm_scope_ops_t = _snd_pcm_scope_ops;
extern "C" {
    pub fn snd_pcm_meter_get_bufsize(pcm: *mut snd_pcm_t) -> snd_pcm_uframes_t;
}
extern "C" {
    pub fn snd_pcm_meter_get_channels(pcm: *mut snd_pcm_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_pcm_meter_get_rate(pcm: *mut snd_pcm_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_pcm_meter_get_now(pcm: *mut snd_pcm_t) -> snd_pcm_uframes_t;
}
extern "C" {
    pub fn snd_pcm_meter_get_boundary(pcm: *mut snd_pcm_t) -> snd_pcm_uframes_t;
}
extern "C" {
    pub fn snd_pcm_meter_add_scope(
        pcm: *mut snd_pcm_t,
        scope: *mut snd_pcm_scope_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_meter_search_scope(
        pcm: *mut snd_pcm_t,
        name: *const ::std::os::raw::c_char,
    ) -> *mut snd_pcm_scope_t;
}
extern "C" {
    pub fn snd_pcm_scope_malloc(ptr: *mut *mut snd_pcm_scope_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_scope_set_ops(scope: *mut snd_pcm_scope_t, val: *const snd_pcm_scope_ops_t);
}
extern "C" {
    pub fn snd_pcm_scope_set_name(scope: *mut snd_pcm_scope_t, val: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn snd_pcm_scope_get_name(scope: *mut snd_pcm_scope_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_pcm_scope_get_callback_private(
        scope: *mut snd_pcm_scope_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn snd_pcm_scope_set_callback_private(
        scope: *mut snd_pcm_scope_t,
        val: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn snd_pcm_scope_s16_open(
        pcm: *mut snd_pcm_t,
        name: *const ::std::os::raw::c_char,
        scopep: *mut *mut snd_pcm_scope_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_scope_s16_get_channel_buffer(
        scope: *mut snd_pcm_scope_t,
        channel: ::std::os::raw::c_uint,
    ) -> *mut i16;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _snd_spcm_latency {
    SND_SPCM_LATENCY_STANDARD = 0,
    SND_SPCM_LATENCY_MEDIUM = 1,
    SND_SPCM_LATENCY_REALTIME = 2,
}
pub use self::_snd_spcm_latency as snd_spcm_latency_t;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _snd_spcm_xrun_type {
    SND_SPCM_XRUN_IGNORE = 0,
    SND_SPCM_XRUN_STOP = 1,
}
pub use self::_snd_spcm_xrun_type as snd_spcm_xrun_type_t;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _snd_spcm_duplex_type {
    SND_SPCM_DUPLEX_LIBERAL = 0,
    SND_SPCM_DUPLEX_PEDANTIC = 1,
}
pub use self::_snd_spcm_duplex_type as snd_spcm_duplex_type_t;
extern "C" {
    pub fn snd_spcm_init(
        pcm: *mut snd_pcm_t,
        rate: ::std::os::raw::c_uint,
        channels: ::std::os::raw::c_uint,
        format: snd_pcm_format_t,
        subformat: snd_pcm_subformat_t,
        latency: snd_spcm_latency_t,
        _access: snd_pcm_access_t,
        xrun_type: snd_spcm_xrun_type_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_spcm_init_duplex(
        playback_pcm: *mut snd_pcm_t,
        capture_pcm: *mut snd_pcm_t,
        rate: ::std::os::raw::c_uint,
        channels: ::std::os::raw::c_uint,
        format: snd_pcm_format_t,
        subformat: snd_pcm_subformat_t,
        latency: snd_spcm_latency_t,
        _access: snd_pcm_access_t,
        xrun_type: snd_spcm_xrun_type_t,
        duplex_type: snd_spcm_duplex_type_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_spcm_init_get_params(
        pcm: *mut snd_pcm_t,
        rate: *mut ::std::os::raw::c_uint,
        buffer_size: *mut snd_pcm_uframes_t,
        period_size: *mut snd_pcm_uframes_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_start_mode_name(mode: snd_pcm_start_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_pcm_xrun_mode_name(mode: snd_pcm_xrun_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_pcm_sw_params_set_start_mode(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_sw_params_t,
        val: snd_pcm_start_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_sw_params_get_start_mode(params: *const snd_pcm_sw_params_t) -> snd_pcm_start_t;
}
extern "C" {
    pub fn snd_pcm_sw_params_set_xrun_mode(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_sw_params_t,
        val: snd_pcm_xrun_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_sw_params_get_xrun_mode(params: *const snd_pcm_sw_params_t) -> snd_pcm_xrun_t;
}
extern "C" {
    pub fn snd_pcm_sw_params_set_xfer_align(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_sw_params_t,
        val: snd_pcm_uframes_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_sw_params_get_xfer_align(
        params: *const snd_pcm_sw_params_t,
        val: *mut snd_pcm_uframes_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_sw_params_set_sleep_min(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_sw_params_t,
        val: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_sw_params_get_sleep_min(
        params: *const snd_pcm_sw_params_t,
        val: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_get_tick_time(
        params: *const snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_get_tick_time_min(
        params: *const snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_get_tick_time_max(
        params: *const snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_test_tick_time(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: ::std::os::raw::c_uint,
        dir: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_tick_time(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: ::std::os::raw::c_uint,
        dir: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_tick_time_min(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_tick_time_max(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_tick_time_minmax(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        min: *mut ::std::os::raw::c_uint,
        mindir: *mut ::std::os::raw::c_int,
        max: *mut ::std::os::raw::c_uint,
        maxdir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_tick_time_near(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_tick_time_first(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_pcm_hw_params_set_tick_time_last(
        pcm: *mut snd_pcm_t,
        params: *mut snd_pcm_hw_params_t,
        val: *mut ::std::os::raw::c_uint,
        dir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_rawmidi_info {
    _unused: [u8; 0],
}
pub type snd_rawmidi_info_t = _snd_rawmidi_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_rawmidi_params {
    _unused: [u8; 0],
}
pub type snd_rawmidi_params_t = _snd_rawmidi_params;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_rawmidi_status {
    _unused: [u8; 0],
}
pub type snd_rawmidi_status_t = _snd_rawmidi_status;
impl _snd_rawmidi_stream {
    pub const SND_RAWMIDI_STREAM_LAST: _snd_rawmidi_stream =
        _snd_rawmidi_stream::SND_RAWMIDI_STREAM_INPUT;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _snd_rawmidi_stream {
    SND_RAWMIDI_STREAM_OUTPUT = 0,
    SND_RAWMIDI_STREAM_INPUT = 1,
}
pub use self::_snd_rawmidi_stream as snd_rawmidi_stream_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_rawmidi {
    _unused: [u8; 0],
}
pub type snd_rawmidi_t = _snd_rawmidi;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _snd_rawmidi_type {
    SND_RAWMIDI_TYPE_HW = 0,
    SND_RAWMIDI_TYPE_SHM = 1,
    SND_RAWMIDI_TYPE_INET = 2,
    SND_RAWMIDI_TYPE_VIRTUAL = 3,
}
pub use self::_snd_rawmidi_type as snd_rawmidi_type_t;
extern "C" {
    pub fn snd_rawmidi_open(
        in_rmidi: *mut *mut snd_rawmidi_t,
        out_rmidi: *mut *mut snd_rawmidi_t,
        name: *const ::std::os::raw::c_char,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_rawmidi_open_lconf(
        in_rmidi: *mut *mut snd_rawmidi_t,
        out_rmidi: *mut *mut snd_rawmidi_t,
        name: *const ::std::os::raw::c_char,
        mode: ::std::os::raw::c_int,
        lconf: *mut snd_config_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_rawmidi_close(rmidi: *mut snd_rawmidi_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_rawmidi_poll_descriptors_count(rmidi: *mut snd_rawmidi_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_rawmidi_poll_descriptors(
        rmidi: *mut snd_rawmidi_t,
        pfds: *mut pollfd,
        space: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_rawmidi_poll_descriptors_revents(
        rawmidi: *mut snd_rawmidi_t,
        pfds: *mut pollfd,
        nfds: ::std::os::raw::c_uint,
        revent: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_rawmidi_nonblock(
        rmidi: *mut snd_rawmidi_t,
        nonblock: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_rawmidi_info_sizeof() -> usize;
}
extern "C" {
    pub fn snd_rawmidi_info_malloc(ptr: *mut *mut snd_rawmidi_info_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_rawmidi_info_free(obj: *mut snd_rawmidi_info_t);
}
extern "C" {
    pub fn snd_rawmidi_info_copy(dst: *mut snd_rawmidi_info_t, src: *const snd_rawmidi_info_t);
}
extern "C" {
    pub fn snd_rawmidi_info_get_device(obj: *const snd_rawmidi_info_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_rawmidi_info_get_subdevice(obj: *const snd_rawmidi_info_t)
        -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_rawmidi_info_get_stream(obj: *const snd_rawmidi_info_t) -> snd_rawmidi_stream_t;
}
extern "C" {
    pub fn snd_rawmidi_info_get_card(obj: *const snd_rawmidi_info_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_rawmidi_info_get_flags(obj: *const snd_rawmidi_info_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_rawmidi_info_get_id(obj: *const snd_rawmidi_info_t)
        -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_rawmidi_info_get_name(
        obj: *const snd_rawmidi_info_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_rawmidi_info_get_subdevice_name(
        obj: *const snd_rawmidi_info_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_rawmidi_info_get_subdevices_count(
        obj: *const snd_rawmidi_info_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_rawmidi_info_get_subdevices_avail(
        obj: *const snd_rawmidi_info_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_rawmidi_info_set_device(obj: *mut snd_rawmidi_info_t, val: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn snd_rawmidi_info_set_subdevice(
        obj: *mut snd_rawmidi_info_t,
        val: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn snd_rawmidi_info_set_stream(obj: *mut snd_rawmidi_info_t, val: snd_rawmidi_stream_t);
}
extern "C" {
    pub fn snd_rawmidi_info(
        rmidi: *mut snd_rawmidi_t,
        info: *mut snd_rawmidi_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_rawmidi_params_sizeof() -> usize;
}
extern "C" {
    pub fn snd_rawmidi_params_malloc(ptr: *mut *mut snd_rawmidi_params_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_rawmidi_params_free(obj: *mut snd_rawmidi_params_t);
}
extern "C" {
    pub fn snd_rawmidi_params_copy(
        dst: *mut snd_rawmidi_params_t,
        src: *const snd_rawmidi_params_t,
    );
}
extern "C" {
    pub fn snd_rawmidi_params_set_buffer_size(
        rmidi: *mut snd_rawmidi_t,
        params: *mut snd_rawmidi_params_t,
        val: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_rawmidi_params_get_buffer_size(params: *const snd_rawmidi_params_t) -> usize;
}
extern "C" {
    pub fn snd_rawmidi_params_set_avail_min(
        rmidi: *mut snd_rawmidi_t,
        params: *mut snd_rawmidi_params_t,
        val: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_rawmidi_params_get_avail_min(params: *const snd_rawmidi_params_t) -> usize;
}
extern "C" {
    pub fn snd_rawmidi_params_set_no_active_sensing(
        rmidi: *mut snd_rawmidi_t,
        params: *mut snd_rawmidi_params_t,
        val: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_rawmidi_params_get_no_active_sensing(
        params: *const snd_rawmidi_params_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_rawmidi_params(
        rmidi: *mut snd_rawmidi_t,
        params: *mut snd_rawmidi_params_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_rawmidi_params_current(
        rmidi: *mut snd_rawmidi_t,
        params: *mut snd_rawmidi_params_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_rawmidi_status_sizeof() -> usize;
}
extern "C" {
    pub fn snd_rawmidi_status_malloc(ptr: *mut *mut snd_rawmidi_status_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_rawmidi_status_free(obj: *mut snd_rawmidi_status_t);
}
extern "C" {
    pub fn snd_rawmidi_status_copy(
        dst: *mut snd_rawmidi_status_t,
        src: *const snd_rawmidi_status_t,
    );
}
extern "C" {
    pub fn snd_rawmidi_status_get_tstamp(
        obj: *const snd_rawmidi_status_t,
        ptr: *mut snd_htimestamp_t,
    );
}
extern "C" {
    pub fn snd_rawmidi_status_get_avail(obj: *const snd_rawmidi_status_t) -> usize;
}
extern "C" {
    pub fn snd_rawmidi_status_get_xruns(obj: *const snd_rawmidi_status_t) -> usize;
}
extern "C" {
    pub fn snd_rawmidi_status(
        rmidi: *mut snd_rawmidi_t,
        status: *mut snd_rawmidi_status_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_rawmidi_drain(rmidi: *mut snd_rawmidi_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_rawmidi_drop(rmidi: *mut snd_rawmidi_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_rawmidi_write(
        rmidi: *mut snd_rawmidi_t,
        buffer: *const ::std::os::raw::c_void,
        size: usize,
    ) -> isize;
}
extern "C" {
    pub fn snd_rawmidi_read(
        rmidi: *mut snd_rawmidi_t,
        buffer: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> isize;
}
extern "C" {
    pub fn snd_rawmidi_name(rmidi: *mut snd_rawmidi_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_rawmidi_type(rmidi: *mut snd_rawmidi_t) -> snd_rawmidi_type_t;
}
extern "C" {
    pub fn snd_rawmidi_stream(rawmidi: *mut snd_rawmidi_t) -> snd_rawmidi_stream_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_timer_id {
    _unused: [u8; 0],
}
pub type snd_timer_id_t = _snd_timer_id;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_timer_ginfo {
    _unused: [u8; 0],
}
pub type snd_timer_ginfo_t = _snd_timer_ginfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_timer_gparams {
    _unused: [u8; 0],
}
pub type snd_timer_gparams_t = _snd_timer_gparams;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_timer_gstatus {
    _unused: [u8; 0],
}
pub type snd_timer_gstatus_t = _snd_timer_gstatus;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_timer_info {
    _unused: [u8; 0],
}
pub type snd_timer_info_t = _snd_timer_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_timer_params {
    _unused: [u8; 0],
}
pub type snd_timer_params_t = _snd_timer_params;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_timer_status {
    _unused: [u8; 0],
}
pub type snd_timer_status_t = _snd_timer_status;
impl _snd_timer_class {
    pub const SND_TIMER_CLASS_LAST: _snd_timer_class = _snd_timer_class::SND_TIMER_CLASS_PCM;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _snd_timer_class {
    SND_TIMER_CLASS_NONE = -1,
    SND_TIMER_CLASS_SLAVE = 0,
    SND_TIMER_CLASS_GLOBAL = 1,
    SND_TIMER_CLASS_CARD = 2,
    SND_TIMER_CLASS_PCM = 3,
}
pub use self::_snd_timer_class as snd_timer_class_t;
impl _snd_timer_slave_class {
    pub const SND_TIMER_SCLASS_LAST: _snd_timer_slave_class =
        _snd_timer_slave_class::SND_TIMER_SCLASS_OSS_SEQUENCER;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _snd_timer_slave_class {
    SND_TIMER_SCLASS_NONE = 0,
    SND_TIMER_SCLASS_APPLICATION = 1,
    SND_TIMER_SCLASS_SEQUENCER = 2,
    SND_TIMER_SCLASS_OSS_SEQUENCER = 3,
}
pub use self::_snd_timer_slave_class as snd_timer_slave_class_t;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _snd_timer_event {
    SND_TIMER_EVENT_RESOLUTION = 0,
    SND_TIMER_EVENT_TICK = 1,
    SND_TIMER_EVENT_START = 2,
    SND_TIMER_EVENT_STOP = 3,
    SND_TIMER_EVENT_CONTINUE = 4,
    SND_TIMER_EVENT_PAUSE = 5,
    SND_TIMER_EVENT_EARLY = 6,
    SND_TIMER_EVENT_SUSPEND = 7,
    SND_TIMER_EVENT_RESUME = 8,
    SND_TIMER_EVENT_MSTART = 12,
    SND_TIMER_EVENT_MSTOP = 13,
    SND_TIMER_EVENT_MCONTINUE = 14,
    SND_TIMER_EVENT_MPAUSE = 15,
    SND_TIMER_EVENT_MSUSPEND = 17,
    SND_TIMER_EVENT_MRESUME = 18,
}
pub use self::_snd_timer_event as snd_timer_event_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_timer_read {
    pub resolution: ::std::os::raw::c_uint,
    pub ticks: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout__snd_timer_read() {
    assert_eq!(
        ::std::mem::size_of::<_snd_timer_read>(),
        8usize,
        concat!("Size of: ", stringify!(_snd_timer_read))
    );
    assert_eq!(
        ::std::mem::align_of::<_snd_timer_read>(),
        4usize,
        concat!("Alignment of ", stringify!(_snd_timer_read))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_snd_timer_read>())).resolution as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_snd_timer_read),
            "::",
            stringify!(resolution)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_snd_timer_read>())).ticks as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_snd_timer_read),
            "::",
            stringify!(ticks)
        )
    );
}
pub type snd_timer_read_t = _snd_timer_read;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_timer_tread {
    pub event: snd_timer_event_t,
    pub tstamp: snd_htimestamp_t,
    pub val: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout__snd_timer_tread() {
    assert_eq!(
        ::std::mem::size_of::<_snd_timer_tread>(),
        32usize,
        concat!("Size of: ", stringify!(_snd_timer_tread))
    );
    assert_eq!(
        ::std::mem::align_of::<_snd_timer_tread>(),
        8usize,
        concat!("Alignment of ", stringify!(_snd_timer_tread))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_snd_timer_tread>())).event as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_snd_timer_tread),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_snd_timer_tread>())).tstamp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_snd_timer_tread),
            "::",
            stringify!(tstamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_snd_timer_tread>())).val as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_snd_timer_tread),
            "::",
            stringify!(val)
        )
    );
}
pub type snd_timer_tread_t = _snd_timer_tread;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _snd_timer_type {
    SND_TIMER_TYPE_HW = 0,
    SND_TIMER_TYPE_SHM = 1,
    SND_TIMER_TYPE_INET = 2,
}
pub use self::_snd_timer_type as snd_timer_type_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_timer_query {
    _unused: [u8; 0],
}
pub type snd_timer_query_t = _snd_timer_query;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_timer {
    _unused: [u8; 0],
}
pub type snd_timer_t = _snd_timer;
extern "C" {
    pub fn snd_timer_query_open(
        handle: *mut *mut snd_timer_query_t,
        name: *const ::std::os::raw::c_char,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_timer_query_open_lconf(
        handle: *mut *mut snd_timer_query_t,
        name: *const ::std::os::raw::c_char,
        mode: ::std::os::raw::c_int,
        lconf: *mut snd_config_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_timer_query_close(handle: *mut snd_timer_query_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_timer_query_next_device(
        handle: *mut snd_timer_query_t,
        tid: *mut snd_timer_id_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_timer_query_info(
        handle: *mut snd_timer_query_t,
        info: *mut snd_timer_ginfo_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_timer_query_params(
        handle: *mut snd_timer_query_t,
        params: *mut snd_timer_gparams_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_timer_query_status(
        handle: *mut snd_timer_query_t,
        status: *mut snd_timer_gstatus_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_timer_open(
        handle: *mut *mut snd_timer_t,
        name: *const ::std::os::raw::c_char,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_timer_open_lconf(
        handle: *mut *mut snd_timer_t,
        name: *const ::std::os::raw::c_char,
        mode: ::std::os::raw::c_int,
        lconf: *mut snd_config_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_timer_close(handle: *mut snd_timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_async_add_timer_handler(
        handler: *mut *mut snd_async_handler_t,
        timer: *mut snd_timer_t,
        callback: snd_async_callback_t,
        private_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_async_handler_get_timer(handler: *mut snd_async_handler_t) -> *mut snd_timer_t;
}
extern "C" {
    pub fn snd_timer_poll_descriptors_count(handle: *mut snd_timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_timer_poll_descriptors(
        handle: *mut snd_timer_t,
        pfds: *mut pollfd,
        space: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_timer_poll_descriptors_revents(
        timer: *mut snd_timer_t,
        pfds: *mut pollfd,
        nfds: ::std::os::raw::c_uint,
        revents: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_timer_info(
        handle: *mut snd_timer_t,
        timer: *mut snd_timer_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_timer_params(
        handle: *mut snd_timer_t,
        params: *mut snd_timer_params_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_timer_status(
        handle: *mut snd_timer_t,
        status: *mut snd_timer_status_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_timer_start(handle: *mut snd_timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_timer_stop(handle: *mut snd_timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_timer_continue(handle: *mut snd_timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_timer_read(
        handle: *mut snd_timer_t,
        buffer: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> isize;
}
extern "C" {
    pub fn snd_timer_id_sizeof() -> usize;
}
extern "C" {
    pub fn snd_timer_id_malloc(ptr: *mut *mut snd_timer_id_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_timer_id_free(obj: *mut snd_timer_id_t);
}
extern "C" {
    pub fn snd_timer_id_copy(dst: *mut snd_timer_id_t, src: *const snd_timer_id_t);
}
extern "C" {
    pub fn snd_timer_id_set_class(id: *mut snd_timer_id_t, dev_class: ::std::os::raw::c_int);
}
extern "C" {
    pub fn snd_timer_id_get_class(id: *mut snd_timer_id_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_timer_id_set_sclass(id: *mut snd_timer_id_t, dev_sclass: ::std::os::raw::c_int);
}
extern "C" {
    pub fn snd_timer_id_get_sclass(id: *mut snd_timer_id_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_timer_id_set_card(id: *mut snd_timer_id_t, card: ::std::os::raw::c_int);
}
extern "C" {
    pub fn snd_timer_id_get_card(id: *mut snd_timer_id_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_timer_id_set_device(id: *mut snd_timer_id_t, device: ::std::os::raw::c_int);
}
extern "C" {
    pub fn snd_timer_id_get_device(id: *mut snd_timer_id_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_timer_id_set_subdevice(id: *mut snd_timer_id_t, subdevice: ::std::os::raw::c_int);
}
extern "C" {
    pub fn snd_timer_id_get_subdevice(id: *mut snd_timer_id_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_timer_ginfo_sizeof() -> usize;
}
extern "C" {
    pub fn snd_timer_ginfo_malloc(ptr: *mut *mut snd_timer_ginfo_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_timer_ginfo_free(obj: *mut snd_timer_ginfo_t);
}
extern "C" {
    pub fn snd_timer_ginfo_copy(dst: *mut snd_timer_ginfo_t, src: *const snd_timer_ginfo_t);
}
extern "C" {
    pub fn snd_timer_ginfo_set_tid(
        obj: *mut snd_timer_ginfo_t,
        tid: *mut snd_timer_id_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_timer_ginfo_get_tid(obj: *mut snd_timer_ginfo_t) -> *mut snd_timer_id_t;
}
extern "C" {
    pub fn snd_timer_ginfo_get_flags(obj: *mut snd_timer_ginfo_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_timer_ginfo_get_card(obj: *mut snd_timer_ginfo_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_timer_ginfo_get_id(obj: *mut snd_timer_ginfo_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_timer_ginfo_get_name(obj: *mut snd_timer_ginfo_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_timer_ginfo_get_resolution(obj: *mut snd_timer_ginfo_t) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn snd_timer_ginfo_get_resolution_min(
        obj: *mut snd_timer_ginfo_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn snd_timer_ginfo_get_resolution_max(
        obj: *mut snd_timer_ginfo_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn snd_timer_ginfo_get_clients(obj: *mut snd_timer_ginfo_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_timer_info_sizeof() -> usize;
}
extern "C" {
    pub fn snd_timer_info_malloc(ptr: *mut *mut snd_timer_info_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_timer_info_free(obj: *mut snd_timer_info_t);
}
extern "C" {
    pub fn snd_timer_info_copy(dst: *mut snd_timer_info_t, src: *const snd_timer_info_t);
}
extern "C" {
    pub fn snd_timer_info_is_slave(info: *mut snd_timer_info_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_timer_info_get_card(info: *mut snd_timer_info_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_timer_info_get_id(info: *mut snd_timer_info_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_timer_info_get_name(info: *mut snd_timer_info_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_timer_info_get_resolution(info: *mut snd_timer_info_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn snd_timer_params_sizeof() -> usize;
}
extern "C" {
    pub fn snd_timer_params_malloc(ptr: *mut *mut snd_timer_params_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_timer_params_free(obj: *mut snd_timer_params_t);
}
extern "C" {
    pub fn snd_timer_params_copy(dst: *mut snd_timer_params_t, src: *const snd_timer_params_t);
}
extern "C" {
    pub fn snd_timer_params_set_auto_start(
        params: *mut snd_timer_params_t,
        auto_start: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_timer_params_get_auto_start(
        params: *mut snd_timer_params_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_timer_params_set_exclusive(
        params: *mut snd_timer_params_t,
        exclusive: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_timer_params_get_exclusive(params: *mut snd_timer_params_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_timer_params_set_early_event(
        params: *mut snd_timer_params_t,
        early_event: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_timer_params_get_early_event(
        params: *mut snd_timer_params_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_timer_params_set_ticks(
        params: *mut snd_timer_params_t,
        ticks: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn snd_timer_params_get_ticks(params: *mut snd_timer_params_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn snd_timer_params_set_queue_size(
        params: *mut snd_timer_params_t,
        queue_size: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn snd_timer_params_get_queue_size(
        params: *mut snd_timer_params_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn snd_timer_params_set_filter(
        params: *mut snd_timer_params_t,
        filter: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn snd_timer_params_get_filter(params: *mut snd_timer_params_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_timer_status_sizeof() -> usize;
}
extern "C" {
    pub fn snd_timer_status_malloc(ptr: *mut *mut snd_timer_status_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_timer_status_free(obj: *mut snd_timer_status_t);
}
extern "C" {
    pub fn snd_timer_status_copy(dst: *mut snd_timer_status_t, src: *const snd_timer_status_t);
}
extern "C" {
    pub fn snd_timer_status_get_timestamp(status: *mut snd_timer_status_t) -> snd_htimestamp_t;
}
extern "C" {
    pub fn snd_timer_status_get_resolution(
        status: *mut snd_timer_status_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn snd_timer_status_get_lost(status: *mut snd_timer_status_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn snd_timer_status_get_overrun(status: *mut snd_timer_status_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn snd_timer_status_get_queue(status: *mut snd_timer_status_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn snd_timer_info_get_ticks(info: *mut snd_timer_info_t) -> ::std::os::raw::c_long;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_hwdep_info {
    _unused: [u8; 0],
}
pub type snd_hwdep_info_t = _snd_hwdep_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_hwdep_dsp_status {
    _unused: [u8; 0],
}
pub type snd_hwdep_dsp_status_t = _snd_hwdep_dsp_status;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_hwdep_dsp_image {
    _unused: [u8; 0],
}
pub type snd_hwdep_dsp_image_t = _snd_hwdep_dsp_image;
impl _snd_hwdep_iface {
    pub const SND_HWDEP_IFACE_LAST: _snd_hwdep_iface =
        _snd_hwdep_iface::SND_HWDEP_IFACE_FW_FIREFACE;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _snd_hwdep_iface {
    SND_HWDEP_IFACE_OPL2 = 0,
    SND_HWDEP_IFACE_OPL3 = 1,
    SND_HWDEP_IFACE_OPL4 = 2,
    SND_HWDEP_IFACE_SB16CSP = 3,
    SND_HWDEP_IFACE_EMU10K1 = 4,
    SND_HWDEP_IFACE_YSS225 = 5,
    SND_HWDEP_IFACE_ICS2115 = 6,
    SND_HWDEP_IFACE_SSCAPE = 7,
    SND_HWDEP_IFACE_VX = 8,
    SND_HWDEP_IFACE_MIXART = 9,
    SND_HWDEP_IFACE_USX2Y = 10,
    SND_HWDEP_IFACE_EMUX_WAVETABLE = 11,
    SND_HWDEP_IFACE_BLUETOOTH = 12,
    SND_HWDEP_IFACE_USX2Y_PCM = 13,
    SND_HWDEP_IFACE_PCXHR = 14,
    SND_HWDEP_IFACE_SB_RC = 15,
    SND_HWDEP_IFACE_HDA = 16,
    SND_HWDEP_IFACE_USB_STREAM = 17,
    SND_HWDEP_IFACE_FW_DICE = 18,
    SND_HWDEP_IFACE_FW_FIREWORKS = 19,
    SND_HWDEP_IFACE_FW_BEBOB = 20,
    SND_HWDEP_IFACE_FW_OXFW = 21,
    SND_HWDEP_IFACE_FW_DIGI00X = 22,
    SND_HWDEP_IFACE_FW_TASCAM = 23,
    SND_HWDEP_IFACE_LINE6 = 24,
    SND_HWDEP_IFACE_FW_MOTU = 25,
    SND_HWDEP_IFACE_FW_FIREFACE = 26,
}
pub use self::_snd_hwdep_iface as snd_hwdep_iface_t;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _snd_hwdep_type {
    SND_HWDEP_TYPE_HW = 0,
    SND_HWDEP_TYPE_SHM = 1,
    SND_HWDEP_TYPE_INET = 2,
}
pub use self::_snd_hwdep_type as snd_hwdep_type_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_hwdep {
    _unused: [u8; 0],
}
pub type snd_hwdep_t = _snd_hwdep;
extern "C" {
    pub fn snd_hwdep_open(
        hwdep: *mut *mut snd_hwdep_t,
        name: *const ::std::os::raw::c_char,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_hwdep_close(hwdep: *mut snd_hwdep_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_hwdep_poll_descriptors(
        hwdep: *mut snd_hwdep_t,
        pfds: *mut pollfd,
        space: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_hwdep_poll_descriptors_count(hwdep: *mut snd_hwdep_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_hwdep_poll_descriptors_revents(
        hwdep: *mut snd_hwdep_t,
        pfds: *mut pollfd,
        nfds: ::std::os::raw::c_uint,
        revents: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_hwdep_nonblock(
        hwdep: *mut snd_hwdep_t,
        nonblock: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_hwdep_info(
        hwdep: *mut snd_hwdep_t,
        info: *mut snd_hwdep_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_hwdep_dsp_status(
        hwdep: *mut snd_hwdep_t,
        status: *mut snd_hwdep_dsp_status_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_hwdep_dsp_load(
        hwdep: *mut snd_hwdep_t,
        block: *mut snd_hwdep_dsp_image_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_hwdep_ioctl(
        hwdep: *mut snd_hwdep_t,
        request: ::std::os::raw::c_uint,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_hwdep_write(
        hwdep: *mut snd_hwdep_t,
        buffer: *const ::std::os::raw::c_void,
        size: usize,
    ) -> isize;
}
extern "C" {
    pub fn snd_hwdep_read(
        hwdep: *mut snd_hwdep_t,
        buffer: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> isize;
}
extern "C" {
    pub fn snd_hwdep_info_sizeof() -> usize;
}
extern "C" {
    pub fn snd_hwdep_info_malloc(ptr: *mut *mut snd_hwdep_info_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_hwdep_info_free(obj: *mut snd_hwdep_info_t);
}
extern "C" {
    pub fn snd_hwdep_info_copy(dst: *mut snd_hwdep_info_t, src: *const snd_hwdep_info_t);
}
extern "C" {
    pub fn snd_hwdep_info_get_device(obj: *const snd_hwdep_info_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_hwdep_info_get_card(obj: *const snd_hwdep_info_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_hwdep_info_get_id(obj: *const snd_hwdep_info_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_hwdep_info_get_name(obj: *const snd_hwdep_info_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_hwdep_info_get_iface(obj: *const snd_hwdep_info_t) -> snd_hwdep_iface_t;
}
extern "C" {
    pub fn snd_hwdep_info_set_device(obj: *mut snd_hwdep_info_t, val: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn snd_hwdep_dsp_status_sizeof() -> usize;
}
extern "C" {
    pub fn snd_hwdep_dsp_status_malloc(
        ptr: *mut *mut snd_hwdep_dsp_status_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_hwdep_dsp_status_free(obj: *mut snd_hwdep_dsp_status_t);
}
extern "C" {
    pub fn snd_hwdep_dsp_status_copy(
        dst: *mut snd_hwdep_dsp_status_t,
        src: *const snd_hwdep_dsp_status_t,
    );
}
extern "C" {
    pub fn snd_hwdep_dsp_status_get_version(
        obj: *const snd_hwdep_dsp_status_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_hwdep_dsp_status_get_id(
        obj: *const snd_hwdep_dsp_status_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_hwdep_dsp_status_get_num_dsps(
        obj: *const snd_hwdep_dsp_status_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_hwdep_dsp_status_get_dsp_loaded(
        obj: *const snd_hwdep_dsp_status_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_hwdep_dsp_status_get_chip_ready(
        obj: *const snd_hwdep_dsp_status_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_hwdep_dsp_image_sizeof() -> usize;
}
extern "C" {
    pub fn snd_hwdep_dsp_image_malloc(
        ptr: *mut *mut snd_hwdep_dsp_image_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_hwdep_dsp_image_free(obj: *mut snd_hwdep_dsp_image_t);
}
extern "C" {
    pub fn snd_hwdep_dsp_image_copy(
        dst: *mut snd_hwdep_dsp_image_t,
        src: *const snd_hwdep_dsp_image_t,
    );
}
extern "C" {
    pub fn snd_hwdep_dsp_image_get_index(
        obj: *const snd_hwdep_dsp_image_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_hwdep_dsp_image_get_name(
        obj: *const snd_hwdep_dsp_image_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_hwdep_dsp_image_get_image(
        obj: *const snd_hwdep_dsp_image_t,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn snd_hwdep_dsp_image_get_length(obj: *const snd_hwdep_dsp_image_t) -> usize;
}
extern "C" {
    pub fn snd_hwdep_dsp_image_set_index(
        obj: *mut snd_hwdep_dsp_image_t,
        _index: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn snd_hwdep_dsp_image_set_name(
        obj: *mut snd_hwdep_dsp_image_t,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn snd_hwdep_dsp_image_set_image(
        obj: *mut snd_hwdep_dsp_image_t,
        buffer: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn snd_hwdep_dsp_image_set_length(obj: *mut snd_hwdep_dsp_image_t, length: usize);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct snd_aes_iec958 {
    pub status: [::std::os::raw::c_uchar; 24usize],
    pub subcode: [::std::os::raw::c_uchar; 147usize],
    pub pad: ::std::os::raw::c_uchar,
    pub dig_subframe: [::std::os::raw::c_uchar; 4usize],
}
#[test]
fn bindgen_test_layout_snd_aes_iec958() {
    assert_eq!(
        ::std::mem::size_of::<snd_aes_iec958>(),
        176usize,
        concat!("Size of: ", stringify!(snd_aes_iec958))
    );
    assert_eq!(
        ::std::mem::align_of::<snd_aes_iec958>(),
        1usize,
        concat!("Alignment of ", stringify!(snd_aes_iec958))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_aes_iec958>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_aes_iec958),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_aes_iec958>())).subcode as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_aes_iec958),
            "::",
            stringify!(subcode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_aes_iec958>())).pad as *const _ as usize },
        171usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_aes_iec958),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_aes_iec958>())).dig_subframe as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_aes_iec958),
            "::",
            stringify!(dig_subframe)
        )
    );
}
pub type snd_aes_iec958_t = snd_aes_iec958;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_ctl_card_info {
    _unused: [u8; 0],
}
pub type snd_ctl_card_info_t = _snd_ctl_card_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_ctl_elem_id {
    _unused: [u8; 0],
}
pub type snd_ctl_elem_id_t = _snd_ctl_elem_id;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_ctl_elem_list {
    _unused: [u8; 0],
}
pub type snd_ctl_elem_list_t = _snd_ctl_elem_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_ctl_elem_info {
    _unused: [u8; 0],
}
pub type snd_ctl_elem_info_t = _snd_ctl_elem_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_ctl_elem_value {
    _unused: [u8; 0],
}
pub type snd_ctl_elem_value_t = _snd_ctl_elem_value;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_ctl_event {
    _unused: [u8; 0],
}
pub type snd_ctl_event_t = _snd_ctl_event;
impl _snd_ctl_elem_type {
    pub const SND_CTL_ELEM_TYPE_LAST: _snd_ctl_elem_type =
        _snd_ctl_elem_type::SND_CTL_ELEM_TYPE_INTEGER64;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _snd_ctl_elem_type {
    SND_CTL_ELEM_TYPE_NONE = 0,
    SND_CTL_ELEM_TYPE_BOOLEAN = 1,
    SND_CTL_ELEM_TYPE_INTEGER = 2,
    SND_CTL_ELEM_TYPE_ENUMERATED = 3,
    SND_CTL_ELEM_TYPE_BYTES = 4,
    SND_CTL_ELEM_TYPE_IEC958 = 5,
    SND_CTL_ELEM_TYPE_INTEGER64 = 6,
}
pub use self::_snd_ctl_elem_type as snd_ctl_elem_type_t;
impl _snd_ctl_elem_iface {
    pub const SND_CTL_ELEM_IFACE_LAST: _snd_ctl_elem_iface =
        _snd_ctl_elem_iface::SND_CTL_ELEM_IFACE_SEQUENCER;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _snd_ctl_elem_iface {
    SND_CTL_ELEM_IFACE_CARD = 0,
    SND_CTL_ELEM_IFACE_HWDEP = 1,
    SND_CTL_ELEM_IFACE_MIXER = 2,
    SND_CTL_ELEM_IFACE_PCM = 3,
    SND_CTL_ELEM_IFACE_RAWMIDI = 4,
    SND_CTL_ELEM_IFACE_TIMER = 5,
    SND_CTL_ELEM_IFACE_SEQUENCER = 6,
}
pub use self::_snd_ctl_elem_iface as snd_ctl_elem_iface_t;
impl _snd_ctl_event_type {
    pub const SND_CTL_EVENT_LAST: _snd_ctl_event_type = _snd_ctl_event_type::SND_CTL_EVENT_ELEM;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _snd_ctl_event_type {
    SND_CTL_EVENT_ELEM = 0,
}
pub use self::_snd_ctl_event_type as snd_ctl_event_type_t;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _snd_ctl_type {
    SND_CTL_TYPE_HW = 0,
    SND_CTL_TYPE_SHM = 1,
    SND_CTL_TYPE_INET = 2,
    SND_CTL_TYPE_EXT = 3,
}
pub use self::_snd_ctl_type as snd_ctl_type_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_ctl {
    _unused: [u8; 0],
}
pub type snd_ctl_t = _snd_ctl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_sctl {
    _unused: [u8; 0],
}
pub type snd_sctl_t = _snd_sctl;
extern "C" {
    pub fn snd_card_load(card: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_card_next(card: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_card_get_index(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_card_get_name(
        card: ::std::os::raw::c_int,
        name: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_card_get_longname(
        card: ::std::os::raw::c_int,
        name: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_device_name_hint(
        card: ::std::os::raw::c_int,
        iface: *const ::std::os::raw::c_char,
        hints: *mut *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_device_name_free_hint(
        hints: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_device_name_get_hint(
        hint: *const ::std::os::raw::c_void,
        id: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_ctl_open(
        ctl: *mut *mut snd_ctl_t,
        name: *const ::std::os::raw::c_char,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_open_lconf(
        ctl: *mut *mut snd_ctl_t,
        name: *const ::std::os::raw::c_char,
        mode: ::std::os::raw::c_int,
        lconf: *mut snd_config_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_open_fallback(
        ctl: *mut *mut snd_ctl_t,
        root: *mut snd_config_t,
        name: *const ::std::os::raw::c_char,
        orig_name: *const ::std::os::raw::c_char,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_close(ctl: *mut snd_ctl_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_nonblock(
        ctl: *mut snd_ctl_t,
        nonblock: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_async_add_ctl_handler(
        handler: *mut *mut snd_async_handler_t,
        ctl: *mut snd_ctl_t,
        callback: snd_async_callback_t,
        private_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_async_handler_get_ctl(handler: *mut snd_async_handler_t) -> *mut snd_ctl_t;
}
extern "C" {
    pub fn snd_ctl_poll_descriptors_count(ctl: *mut snd_ctl_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_poll_descriptors(
        ctl: *mut snd_ctl_t,
        pfds: *mut pollfd,
        space: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_poll_descriptors_revents(
        ctl: *mut snd_ctl_t,
        pfds: *mut pollfd,
        nfds: ::std::os::raw::c_uint,
        revents: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_subscribe_events(
        ctl: *mut snd_ctl_t,
        subscribe: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_card_info(
        ctl: *mut snd_ctl_t,
        info: *mut snd_ctl_card_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_elem_list(
        ctl: *mut snd_ctl_t,
        list: *mut snd_ctl_elem_list_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_elem_info(
        ctl: *mut snd_ctl_t,
        info: *mut snd_ctl_elem_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_elem_read(
        ctl: *mut snd_ctl_t,
        data: *mut snd_ctl_elem_value_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_elem_write(
        ctl: *mut snd_ctl_t,
        data: *mut snd_ctl_elem_value_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_elem_lock(
        ctl: *mut snd_ctl_t,
        id: *mut snd_ctl_elem_id_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_elem_unlock(
        ctl: *mut snd_ctl_t,
        id: *mut snd_ctl_elem_id_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_elem_tlv_read(
        ctl: *mut snd_ctl_t,
        id: *const snd_ctl_elem_id_t,
        tlv: *mut ::std::os::raw::c_uint,
        tlv_size: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_elem_tlv_write(
        ctl: *mut snd_ctl_t,
        id: *const snd_ctl_elem_id_t,
        tlv: *const ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_elem_tlv_command(
        ctl: *mut snd_ctl_t,
        id: *const snd_ctl_elem_id_t,
        tlv: *const ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_hwdep_next_device(
        ctl: *mut snd_ctl_t,
        device: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_hwdep_info(
        ctl: *mut snd_ctl_t,
        info: *mut snd_hwdep_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_pcm_next_device(
        ctl: *mut snd_ctl_t,
        device: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_pcm_info(
        ctl: *mut snd_ctl_t,
        info: *mut snd_pcm_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_pcm_prefer_subdevice(
        ctl: *mut snd_ctl_t,
        subdev: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_rawmidi_next_device(
        ctl: *mut snd_ctl_t,
        device: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_rawmidi_info(
        ctl: *mut snd_ctl_t,
        info: *mut snd_rawmidi_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_rawmidi_prefer_subdevice(
        ctl: *mut snd_ctl_t,
        subdev: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_set_power_state(
        ctl: *mut snd_ctl_t,
        state: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_get_power_state(
        ctl: *mut snd_ctl_t,
        state: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_read(ctl: *mut snd_ctl_t, event: *mut snd_ctl_event_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_wait(
        ctl: *mut snd_ctl_t,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_name(ctl: *mut snd_ctl_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_ctl_type(ctl: *mut snd_ctl_t) -> snd_ctl_type_t;
}
extern "C" {
    pub fn snd_ctl_elem_type_name(type_: snd_ctl_elem_type_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_ctl_elem_iface_name(iface: snd_ctl_elem_iface_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_ctl_event_type_name(type_: snd_ctl_event_type_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_ctl_event_elem_get_mask(obj: *const snd_ctl_event_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_ctl_event_elem_get_numid(obj: *const snd_ctl_event_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_ctl_event_elem_get_id(obj: *const snd_ctl_event_t, ptr: *mut snd_ctl_elem_id_t);
}
extern "C" {
    pub fn snd_ctl_event_elem_get_interface(obj: *const snd_ctl_event_t) -> snd_ctl_elem_iface_t;
}
extern "C" {
    pub fn snd_ctl_event_elem_get_device(obj: *const snd_ctl_event_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_ctl_event_elem_get_subdevice(obj: *const snd_ctl_event_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_ctl_event_elem_get_name(
        obj: *const snd_ctl_event_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_ctl_event_elem_get_index(obj: *const snd_ctl_event_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_ctl_elem_list_alloc_space(
        obj: *mut snd_ctl_elem_list_t,
        entries: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_elem_list_free_space(obj: *mut snd_ctl_elem_list_t);
}
extern "C" {
    pub fn snd_ctl_ascii_elem_id_get(id: *mut snd_ctl_elem_id_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_ctl_ascii_elem_id_parse(
        dst: *mut snd_ctl_elem_id_t,
        str: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_ascii_value_parse(
        handle: *mut snd_ctl_t,
        dst: *mut snd_ctl_elem_value_t,
        info: *mut snd_ctl_elem_info_t,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_elem_id_sizeof() -> usize;
}
extern "C" {
    pub fn snd_ctl_elem_id_malloc(ptr: *mut *mut snd_ctl_elem_id_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_elem_id_free(obj: *mut snd_ctl_elem_id_t);
}
extern "C" {
    pub fn snd_ctl_elem_id_clear(obj: *mut snd_ctl_elem_id_t);
}
extern "C" {
    pub fn snd_ctl_elem_id_copy(dst: *mut snd_ctl_elem_id_t, src: *const snd_ctl_elem_id_t);
}
extern "C" {
    pub fn snd_ctl_elem_id_get_numid(obj: *const snd_ctl_elem_id_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_ctl_elem_id_get_interface(obj: *const snd_ctl_elem_id_t) -> snd_ctl_elem_iface_t;
}
extern "C" {
    pub fn snd_ctl_elem_id_get_device(obj: *const snd_ctl_elem_id_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_ctl_elem_id_get_subdevice(obj: *const snd_ctl_elem_id_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_ctl_elem_id_get_name(obj: *const snd_ctl_elem_id_t)
        -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_ctl_elem_id_get_index(obj: *const snd_ctl_elem_id_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_ctl_elem_id_set_numid(obj: *mut snd_ctl_elem_id_t, val: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn snd_ctl_elem_id_set_interface(obj: *mut snd_ctl_elem_id_t, val: snd_ctl_elem_iface_t);
}
extern "C" {
    pub fn snd_ctl_elem_id_set_device(obj: *mut snd_ctl_elem_id_t, val: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn snd_ctl_elem_id_set_subdevice(obj: *mut snd_ctl_elem_id_t, val: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn snd_ctl_elem_id_set_name(
        obj: *mut snd_ctl_elem_id_t,
        val: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn snd_ctl_elem_id_set_index(obj: *mut snd_ctl_elem_id_t, val: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn snd_ctl_card_info_sizeof() -> usize;
}
extern "C" {
    pub fn snd_ctl_card_info_malloc(ptr: *mut *mut snd_ctl_card_info_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_card_info_free(obj: *mut snd_ctl_card_info_t);
}
extern "C" {
    pub fn snd_ctl_card_info_clear(obj: *mut snd_ctl_card_info_t);
}
extern "C" {
    pub fn snd_ctl_card_info_copy(dst: *mut snd_ctl_card_info_t, src: *const snd_ctl_card_info_t);
}
extern "C" {
    pub fn snd_ctl_card_info_get_card(obj: *const snd_ctl_card_info_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_card_info_get_id(
        obj: *const snd_ctl_card_info_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_ctl_card_info_get_driver(
        obj: *const snd_ctl_card_info_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_ctl_card_info_get_name(
        obj: *const snd_ctl_card_info_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_ctl_card_info_get_longname(
        obj: *const snd_ctl_card_info_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_ctl_card_info_get_mixername(
        obj: *const snd_ctl_card_info_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_ctl_card_info_get_components(
        obj: *const snd_ctl_card_info_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_ctl_event_sizeof() -> usize;
}
extern "C" {
    pub fn snd_ctl_event_malloc(ptr: *mut *mut snd_ctl_event_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_event_free(obj: *mut snd_ctl_event_t);
}
extern "C" {
    pub fn snd_ctl_event_clear(obj: *mut snd_ctl_event_t);
}
extern "C" {
    pub fn snd_ctl_event_copy(dst: *mut snd_ctl_event_t, src: *const snd_ctl_event_t);
}
extern "C" {
    pub fn snd_ctl_event_get_type(obj: *const snd_ctl_event_t) -> snd_ctl_event_type_t;
}
extern "C" {
    pub fn snd_ctl_elem_list_sizeof() -> usize;
}
extern "C" {
    pub fn snd_ctl_elem_list_malloc(ptr: *mut *mut snd_ctl_elem_list_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_elem_list_free(obj: *mut snd_ctl_elem_list_t);
}
extern "C" {
    pub fn snd_ctl_elem_list_clear(obj: *mut snd_ctl_elem_list_t);
}
extern "C" {
    pub fn snd_ctl_elem_list_copy(dst: *mut snd_ctl_elem_list_t, src: *const snd_ctl_elem_list_t);
}
extern "C" {
    pub fn snd_ctl_elem_list_set_offset(obj: *mut snd_ctl_elem_list_t, val: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn snd_ctl_elem_list_get_used(obj: *const snd_ctl_elem_list_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_ctl_elem_list_get_count(obj: *const snd_ctl_elem_list_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_ctl_elem_list_get_id(
        obj: *const snd_ctl_elem_list_t,
        idx: ::std::os::raw::c_uint,
        ptr: *mut snd_ctl_elem_id_t,
    );
}
extern "C" {
    pub fn snd_ctl_elem_list_get_numid(
        obj: *const snd_ctl_elem_list_t,
        idx: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_ctl_elem_list_get_interface(
        obj: *const snd_ctl_elem_list_t,
        idx: ::std::os::raw::c_uint,
    ) -> snd_ctl_elem_iface_t;
}
extern "C" {
    pub fn snd_ctl_elem_list_get_device(
        obj: *const snd_ctl_elem_list_t,
        idx: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_ctl_elem_list_get_subdevice(
        obj: *const snd_ctl_elem_list_t,
        idx: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_ctl_elem_list_get_name(
        obj: *const snd_ctl_elem_list_t,
        idx: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_ctl_elem_list_get_index(
        obj: *const snd_ctl_elem_list_t,
        idx: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_ctl_elem_info_sizeof() -> usize;
}
extern "C" {
    pub fn snd_ctl_elem_info_malloc(ptr: *mut *mut snd_ctl_elem_info_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_elem_info_free(obj: *mut snd_ctl_elem_info_t);
}
extern "C" {
    pub fn snd_ctl_elem_info_clear(obj: *mut snd_ctl_elem_info_t);
}
extern "C" {
    pub fn snd_ctl_elem_info_copy(dst: *mut snd_ctl_elem_info_t, src: *const snd_ctl_elem_info_t);
}
extern "C" {
    pub fn snd_ctl_elem_info_get_type(obj: *const snd_ctl_elem_info_t) -> snd_ctl_elem_type_t;
}
extern "C" {
    pub fn snd_ctl_elem_info_is_readable(obj: *const snd_ctl_elem_info_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_elem_info_is_writable(obj: *const snd_ctl_elem_info_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_elem_info_is_volatile(obj: *const snd_ctl_elem_info_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_elem_info_is_inactive(obj: *const snd_ctl_elem_info_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_elem_info_is_locked(obj: *const snd_ctl_elem_info_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_elem_info_is_tlv_readable(
        obj: *const snd_ctl_elem_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_elem_info_is_tlv_writable(
        obj: *const snd_ctl_elem_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_elem_info_is_tlv_commandable(
        obj: *const snd_ctl_elem_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_elem_info_is_owner(obj: *const snd_ctl_elem_info_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_elem_info_is_user(obj: *const snd_ctl_elem_info_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_elem_info_get_owner(obj: *const snd_ctl_elem_info_t) -> pid_t;
}
extern "C" {
    pub fn snd_ctl_elem_info_get_count(obj: *const snd_ctl_elem_info_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_ctl_elem_info_get_min(obj: *const snd_ctl_elem_info_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn snd_ctl_elem_info_get_max(obj: *const snd_ctl_elem_info_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn snd_ctl_elem_info_get_step(obj: *const snd_ctl_elem_info_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn snd_ctl_elem_info_get_min64(
        obj: *const snd_ctl_elem_info_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn snd_ctl_elem_info_get_max64(
        obj: *const snd_ctl_elem_info_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn snd_ctl_elem_info_get_step64(
        obj: *const snd_ctl_elem_info_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn snd_ctl_elem_info_get_items(obj: *const snd_ctl_elem_info_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_ctl_elem_info_set_item(obj: *mut snd_ctl_elem_info_t, val: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn snd_ctl_elem_info_get_item_name(
        obj: *const snd_ctl_elem_info_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_ctl_elem_info_get_dimensions(
        obj: *const snd_ctl_elem_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_elem_info_get_dimension(
        obj: *const snd_ctl_elem_info_t,
        idx: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_elem_info_set_dimension(
        info: *mut snd_ctl_elem_info_t,
        dimension: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_elem_info_get_id(obj: *const snd_ctl_elem_info_t, ptr: *mut snd_ctl_elem_id_t);
}
extern "C" {
    pub fn snd_ctl_elem_info_get_numid(obj: *const snd_ctl_elem_info_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_ctl_elem_info_get_interface(obj: *const snd_ctl_elem_info_t)
        -> snd_ctl_elem_iface_t;
}
extern "C" {
    pub fn snd_ctl_elem_info_get_device(obj: *const snd_ctl_elem_info_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_ctl_elem_info_get_subdevice(
        obj: *const snd_ctl_elem_info_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_ctl_elem_info_get_name(
        obj: *const snd_ctl_elem_info_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_ctl_elem_info_get_index(obj: *const snd_ctl_elem_info_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_ctl_elem_info_set_id(obj: *mut snd_ctl_elem_info_t, ptr: *const snd_ctl_elem_id_t);
}
extern "C" {
    pub fn snd_ctl_elem_info_set_numid(obj: *mut snd_ctl_elem_info_t, val: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn snd_ctl_elem_info_set_interface(
        obj: *mut snd_ctl_elem_info_t,
        val: snd_ctl_elem_iface_t,
    );
}
extern "C" {
    pub fn snd_ctl_elem_info_set_device(obj: *mut snd_ctl_elem_info_t, val: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn snd_ctl_elem_info_set_subdevice(
        obj: *mut snd_ctl_elem_info_t,
        val: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn snd_ctl_elem_info_set_name(
        obj: *mut snd_ctl_elem_info_t,
        val: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn snd_ctl_elem_info_set_index(obj: *mut snd_ctl_elem_info_t, val: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn snd_ctl_add_integer_elem_set(
        ctl: *mut snd_ctl_t,
        info: *mut snd_ctl_elem_info_t,
        element_count: ::std::os::raw::c_uint,
        member_count: ::std::os::raw::c_uint,
        min: ::std::os::raw::c_long,
        max: ::std::os::raw::c_long,
        step: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_add_integer64_elem_set(
        ctl: *mut snd_ctl_t,
        info: *mut snd_ctl_elem_info_t,
        element_count: ::std::os::raw::c_uint,
        member_count: ::std::os::raw::c_uint,
        min: ::std::os::raw::c_longlong,
        max: ::std::os::raw::c_longlong,
        step: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_add_boolean_elem_set(
        ctl: *mut snd_ctl_t,
        info: *mut snd_ctl_elem_info_t,
        element_count: ::std::os::raw::c_uint,
        member_count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_add_enumerated_elem_set(
        ctl: *mut snd_ctl_t,
        info: *mut snd_ctl_elem_info_t,
        element_count: ::std::os::raw::c_uint,
        member_count: ::std::os::raw::c_uint,
        items: ::std::os::raw::c_uint,
        labels: *const *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_add_bytes_elem_set(
        ctl: *mut snd_ctl_t,
        info: *mut snd_ctl_elem_info_t,
        element_count: ::std::os::raw::c_uint,
        member_count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_elem_add_integer(
        ctl: *mut snd_ctl_t,
        id: *const snd_ctl_elem_id_t,
        count: ::std::os::raw::c_uint,
        imin: ::std::os::raw::c_long,
        imax: ::std::os::raw::c_long,
        istep: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_elem_add_integer64(
        ctl: *mut snd_ctl_t,
        id: *const snd_ctl_elem_id_t,
        count: ::std::os::raw::c_uint,
        imin: ::std::os::raw::c_longlong,
        imax: ::std::os::raw::c_longlong,
        istep: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_elem_add_boolean(
        ctl: *mut snd_ctl_t,
        id: *const snd_ctl_elem_id_t,
        count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_elem_add_enumerated(
        ctl: *mut snd_ctl_t,
        id: *const snd_ctl_elem_id_t,
        count: ::std::os::raw::c_uint,
        items: ::std::os::raw::c_uint,
        names: *const *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_elem_add_iec958(
        ctl: *mut snd_ctl_t,
        id: *const snd_ctl_elem_id_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_elem_remove(
        ctl: *mut snd_ctl_t,
        id: *mut snd_ctl_elem_id_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_elem_value_sizeof() -> usize;
}
extern "C" {
    pub fn snd_ctl_elem_value_malloc(ptr: *mut *mut snd_ctl_elem_value_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_elem_value_free(obj: *mut snd_ctl_elem_value_t);
}
extern "C" {
    pub fn snd_ctl_elem_value_clear(obj: *mut snd_ctl_elem_value_t);
}
extern "C" {
    pub fn snd_ctl_elem_value_copy(
        dst: *mut snd_ctl_elem_value_t,
        src: *const snd_ctl_elem_value_t,
    );
}
extern "C" {
    pub fn snd_ctl_elem_value_compare(
        left: *mut snd_ctl_elem_value_t,
        right: *const snd_ctl_elem_value_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_elem_value_get_id(obj: *const snd_ctl_elem_value_t, ptr: *mut snd_ctl_elem_id_t);
}
extern "C" {
    pub fn snd_ctl_elem_value_get_numid(obj: *const snd_ctl_elem_value_t)
        -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_ctl_elem_value_get_interface(
        obj: *const snd_ctl_elem_value_t,
    ) -> snd_ctl_elem_iface_t;
}
extern "C" {
    pub fn snd_ctl_elem_value_get_device(
        obj: *const snd_ctl_elem_value_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_ctl_elem_value_get_subdevice(
        obj: *const snd_ctl_elem_value_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_ctl_elem_value_get_name(
        obj: *const snd_ctl_elem_value_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_ctl_elem_value_get_index(obj: *const snd_ctl_elem_value_t)
        -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_ctl_elem_value_set_id(obj: *mut snd_ctl_elem_value_t, ptr: *const snd_ctl_elem_id_t);
}
extern "C" {
    pub fn snd_ctl_elem_value_set_numid(
        obj: *mut snd_ctl_elem_value_t,
        val: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn snd_ctl_elem_value_set_interface(
        obj: *mut snd_ctl_elem_value_t,
        val: snd_ctl_elem_iface_t,
    );
}
extern "C" {
    pub fn snd_ctl_elem_value_set_device(
        obj: *mut snd_ctl_elem_value_t,
        val: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn snd_ctl_elem_value_set_subdevice(
        obj: *mut snd_ctl_elem_value_t,
        val: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn snd_ctl_elem_value_set_name(
        obj: *mut snd_ctl_elem_value_t,
        val: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn snd_ctl_elem_value_set_index(
        obj: *mut snd_ctl_elem_value_t,
        val: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn snd_ctl_elem_value_get_boolean(
        obj: *const snd_ctl_elem_value_t,
        idx: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_elem_value_get_integer(
        obj: *const snd_ctl_elem_value_t,
        idx: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn snd_ctl_elem_value_get_integer64(
        obj: *const snd_ctl_elem_value_t,
        idx: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn snd_ctl_elem_value_get_enumerated(
        obj: *const snd_ctl_elem_value_t,
        idx: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_ctl_elem_value_get_byte(
        obj: *const snd_ctl_elem_value_t,
        idx: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn snd_ctl_elem_value_set_boolean(
        obj: *mut snd_ctl_elem_value_t,
        idx: ::std::os::raw::c_uint,
        val: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn snd_ctl_elem_value_set_integer(
        obj: *mut snd_ctl_elem_value_t,
        idx: ::std::os::raw::c_uint,
        val: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn snd_ctl_elem_value_set_integer64(
        obj: *mut snd_ctl_elem_value_t,
        idx: ::std::os::raw::c_uint,
        val: ::std::os::raw::c_longlong,
    );
}
extern "C" {
    pub fn snd_ctl_elem_value_set_enumerated(
        obj: *mut snd_ctl_elem_value_t,
        idx: ::std::os::raw::c_uint,
        val: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn snd_ctl_elem_value_set_byte(
        obj: *mut snd_ctl_elem_value_t,
        idx: ::std::os::raw::c_uint,
        val: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn snd_ctl_elem_set_bytes(
        obj: *mut snd_ctl_elem_value_t,
        data: *mut ::std::os::raw::c_void,
        size: usize,
    );
}
extern "C" {
    pub fn snd_ctl_elem_value_get_bytes(
        obj: *const snd_ctl_elem_value_t,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn snd_ctl_elem_value_get_iec958(
        obj: *const snd_ctl_elem_value_t,
        ptr: *mut snd_aes_iec958_t,
    );
}
extern "C" {
    pub fn snd_ctl_elem_value_set_iec958(
        obj: *mut snd_ctl_elem_value_t,
        ptr: *const snd_aes_iec958_t,
    );
}
extern "C" {
    pub fn snd_tlv_parse_dB_info(
        tlv: *mut ::std::os::raw::c_uint,
        tlv_size: ::std::os::raw::c_uint,
        db_tlvp: *mut *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_tlv_get_dB_range(
        tlv: *mut ::std::os::raw::c_uint,
        rangemin: ::std::os::raw::c_long,
        rangemax: ::std::os::raw::c_long,
        min: *mut ::std::os::raw::c_long,
        max: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_tlv_convert_to_dB(
        tlv: *mut ::std::os::raw::c_uint,
        rangemin: ::std::os::raw::c_long,
        rangemax: ::std::os::raw::c_long,
        volume: ::std::os::raw::c_long,
        db_gain: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_tlv_convert_from_dB(
        tlv: *mut ::std::os::raw::c_uint,
        rangemin: ::std::os::raw::c_long,
        rangemax: ::std::os::raw::c_long,
        db_gain: ::std::os::raw::c_long,
        value: *mut ::std::os::raw::c_long,
        xdir: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_get_dB_range(
        ctl: *mut snd_ctl_t,
        id: *const snd_ctl_elem_id_t,
        min: *mut ::std::os::raw::c_long,
        max: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_convert_to_dB(
        ctl: *mut snd_ctl_t,
        id: *const snd_ctl_elem_id_t,
        volume: ::std::os::raw::c_long,
        db_gain: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_ctl_convert_from_dB(
        ctl: *mut snd_ctl_t,
        id: *const snd_ctl_elem_id_t,
        db_gain: ::std::os::raw::c_long,
        value: *mut ::std::os::raw::c_long,
        xdir: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_hctl_elem {
    _unused: [u8; 0],
}
pub type snd_hctl_elem_t = _snd_hctl_elem;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_hctl {
    _unused: [u8; 0],
}
pub type snd_hctl_t = _snd_hctl;
pub type snd_hctl_compare_t = ::std::option::Option<
    unsafe extern "C" fn(
        e1: *const snd_hctl_elem_t,
        e2: *const snd_hctl_elem_t,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn snd_hctl_compare_fast(
        c1: *const snd_hctl_elem_t,
        c2: *const snd_hctl_elem_t,
    ) -> ::std::os::raw::c_int;
}
pub type snd_hctl_callback_t = ::std::option::Option<
    unsafe extern "C" fn(
        hctl: *mut snd_hctl_t,
        mask: ::std::os::raw::c_uint,
        elem: *mut snd_hctl_elem_t,
    ) -> ::std::os::raw::c_int,
>;
pub type snd_hctl_elem_callback_t = ::std::option::Option<
    unsafe extern "C" fn(
        elem: *mut snd_hctl_elem_t,
        mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn snd_hctl_open(
        hctl: *mut *mut snd_hctl_t,
        name: *const ::std::os::raw::c_char,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_hctl_open_ctl(
        hctlp: *mut *mut snd_hctl_t,
        ctl: *mut snd_ctl_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_hctl_close(hctl: *mut snd_hctl_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_hctl_nonblock(
        hctl: *mut snd_hctl_t,
        nonblock: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_hctl_poll_descriptors_count(hctl: *mut snd_hctl_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_hctl_poll_descriptors(
        hctl: *mut snd_hctl_t,
        pfds: *mut pollfd,
        space: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_hctl_poll_descriptors_revents(
        ctl: *mut snd_hctl_t,
        pfds: *mut pollfd,
        nfds: ::std::os::raw::c_uint,
        revents: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_hctl_get_count(hctl: *mut snd_hctl_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_hctl_set_compare(
        hctl: *mut snd_hctl_t,
        hsort: snd_hctl_compare_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_hctl_first_elem(hctl: *mut snd_hctl_t) -> *mut snd_hctl_elem_t;
}
extern "C" {
    pub fn snd_hctl_last_elem(hctl: *mut snd_hctl_t) -> *mut snd_hctl_elem_t;
}
extern "C" {
    pub fn snd_hctl_find_elem(
        hctl: *mut snd_hctl_t,
        id: *const snd_ctl_elem_id_t,
    ) -> *mut snd_hctl_elem_t;
}
extern "C" {
    pub fn snd_hctl_set_callback(hctl: *mut snd_hctl_t, callback: snd_hctl_callback_t);
}
extern "C" {
    pub fn snd_hctl_set_callback_private(hctl: *mut snd_hctl_t, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn snd_hctl_get_callback_private(hctl: *mut snd_hctl_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn snd_hctl_load(hctl: *mut snd_hctl_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_hctl_free(hctl: *mut snd_hctl_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_hctl_handle_events(hctl: *mut snd_hctl_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_hctl_name(hctl: *mut snd_hctl_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_hctl_wait(
        hctl: *mut snd_hctl_t,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_hctl_ctl(hctl: *mut snd_hctl_t) -> *mut snd_ctl_t;
}
extern "C" {
    pub fn snd_hctl_elem_next(elem: *mut snd_hctl_elem_t) -> *mut snd_hctl_elem_t;
}
extern "C" {
    pub fn snd_hctl_elem_prev(elem: *mut snd_hctl_elem_t) -> *mut snd_hctl_elem_t;
}
extern "C" {
    pub fn snd_hctl_elem_info(
        elem: *mut snd_hctl_elem_t,
        info: *mut snd_ctl_elem_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_hctl_elem_read(
        elem: *mut snd_hctl_elem_t,
        value: *mut snd_ctl_elem_value_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_hctl_elem_write(
        elem: *mut snd_hctl_elem_t,
        value: *mut snd_ctl_elem_value_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_hctl_elem_tlv_read(
        elem: *mut snd_hctl_elem_t,
        tlv: *mut ::std::os::raw::c_uint,
        tlv_size: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_hctl_elem_tlv_write(
        elem: *mut snd_hctl_elem_t,
        tlv: *const ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_hctl_elem_tlv_command(
        elem: *mut snd_hctl_elem_t,
        tlv: *const ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_hctl_elem_get_hctl(elem: *mut snd_hctl_elem_t) -> *mut snd_hctl_t;
}
extern "C" {
    pub fn snd_hctl_elem_get_id(obj: *const snd_hctl_elem_t, ptr: *mut snd_ctl_elem_id_t);
}
extern "C" {
    pub fn snd_hctl_elem_get_numid(obj: *const snd_hctl_elem_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_hctl_elem_get_interface(obj: *const snd_hctl_elem_t) -> snd_ctl_elem_iface_t;
}
extern "C" {
    pub fn snd_hctl_elem_get_device(obj: *const snd_hctl_elem_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_hctl_elem_get_subdevice(obj: *const snd_hctl_elem_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_hctl_elem_get_name(obj: *const snd_hctl_elem_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_hctl_elem_get_index(obj: *const snd_hctl_elem_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_hctl_elem_set_callback(obj: *mut snd_hctl_elem_t, val: snd_hctl_elem_callback_t);
}
extern "C" {
    pub fn snd_hctl_elem_get_callback_private(
        obj: *const snd_hctl_elem_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn snd_hctl_elem_set_callback_private(
        obj: *mut snd_hctl_elem_t,
        val: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn snd_sctl_build(
        ctl: *mut *mut snd_sctl_t,
        handle: *mut snd_ctl_t,
        config: *mut snd_config_t,
        private_data: *mut snd_config_t,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_sctl_free(handle: *mut snd_sctl_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_sctl_install(handle: *mut snd_sctl_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_sctl_remove(handle: *mut snd_sctl_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_mixer {
    _unused: [u8; 0],
}
pub type snd_mixer_t = _snd_mixer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_mixer_class {
    _unused: [u8; 0],
}
pub type snd_mixer_class_t = _snd_mixer_class;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_mixer_elem {
    _unused: [u8; 0],
}
pub type snd_mixer_elem_t = _snd_mixer_elem;
pub type snd_mixer_callback_t = ::std::option::Option<
    unsafe extern "C" fn(
        ctl: *mut snd_mixer_t,
        mask: ::std::os::raw::c_uint,
        elem: *mut snd_mixer_elem_t,
    ) -> ::std::os::raw::c_int,
>;
pub type snd_mixer_elem_callback_t = ::std::option::Option<
    unsafe extern "C" fn(
        elem: *mut snd_mixer_elem_t,
        mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int,
>;
pub type snd_mixer_compare_t = ::std::option::Option<
    unsafe extern "C" fn(
        e1: *const snd_mixer_elem_t,
        e2: *const snd_mixer_elem_t,
    ) -> ::std::os::raw::c_int,
>;
pub type snd_mixer_event_t = ::std::option::Option<
    unsafe extern "C" fn(
        class_: *mut snd_mixer_class_t,
        mask: ::std::os::raw::c_uint,
        helem: *mut snd_hctl_elem_t,
        melem: *mut snd_mixer_elem_t,
    ) -> ::std::os::raw::c_int,
>;
impl _snd_mixer_elem_type {
    pub const SND_MIXER_ELEM_LAST: _snd_mixer_elem_type =
        _snd_mixer_elem_type::SND_MIXER_ELEM_SIMPLE;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _snd_mixer_elem_type {
    SND_MIXER_ELEM_SIMPLE = 0,
}
pub use self::_snd_mixer_elem_type as snd_mixer_elem_type_t;
extern "C" {
    pub fn snd_mixer_open(
        mixer: *mut *mut snd_mixer_t,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_close(mixer: *mut snd_mixer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_first_elem(mixer: *mut snd_mixer_t) -> *mut snd_mixer_elem_t;
}
extern "C" {
    pub fn snd_mixer_last_elem(mixer: *mut snd_mixer_t) -> *mut snd_mixer_elem_t;
}
extern "C" {
    pub fn snd_mixer_handle_events(mixer: *mut snd_mixer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_attach(
        mixer: *mut snd_mixer_t,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_attach_hctl(
        mixer: *mut snd_mixer_t,
        hctl: *mut snd_hctl_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_detach(
        mixer: *mut snd_mixer_t,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_detach_hctl(
        mixer: *mut snd_mixer_t,
        hctl: *mut snd_hctl_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_get_hctl(
        mixer: *mut snd_mixer_t,
        name: *const ::std::os::raw::c_char,
        hctl: *mut *mut snd_hctl_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_poll_descriptors_count(mixer: *mut snd_mixer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_poll_descriptors(
        mixer: *mut snd_mixer_t,
        pfds: *mut pollfd,
        space: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_poll_descriptors_revents(
        mixer: *mut snd_mixer_t,
        pfds: *mut pollfd,
        nfds: ::std::os::raw::c_uint,
        revents: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_load(mixer: *mut snd_mixer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_free(mixer: *mut snd_mixer_t);
}
extern "C" {
    pub fn snd_mixer_wait(
        mixer: *mut snd_mixer_t,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_set_compare(
        mixer: *mut snd_mixer_t,
        msort: snd_mixer_compare_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_set_callback(obj: *mut snd_mixer_t, val: snd_mixer_callback_t);
}
extern "C" {
    pub fn snd_mixer_get_callback_private(obj: *const snd_mixer_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn snd_mixer_set_callback_private(obj: *mut snd_mixer_t, val: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn snd_mixer_get_count(obj: *const snd_mixer_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_mixer_class_unregister(clss: *mut snd_mixer_class_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_elem_next(elem: *mut snd_mixer_elem_t) -> *mut snd_mixer_elem_t;
}
extern "C" {
    pub fn snd_mixer_elem_prev(elem: *mut snd_mixer_elem_t) -> *mut snd_mixer_elem_t;
}
extern "C" {
    pub fn snd_mixer_elem_set_callback(obj: *mut snd_mixer_elem_t, val: snd_mixer_elem_callback_t);
}
extern "C" {
    pub fn snd_mixer_elem_get_callback_private(
        obj: *const snd_mixer_elem_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn snd_mixer_elem_set_callback_private(
        obj: *mut snd_mixer_elem_t,
        val: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn snd_mixer_elem_get_type(obj: *const snd_mixer_elem_t) -> snd_mixer_elem_type_t;
}
extern "C" {
    pub fn snd_mixer_class_register(
        class_: *mut snd_mixer_class_t,
        mixer: *mut snd_mixer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_elem_new(
        elem: *mut *mut snd_mixer_elem_t,
        type_: snd_mixer_elem_type_t,
        compare_weight: ::std::os::raw::c_int,
        private_data: *mut ::std::os::raw::c_void,
        private_free: ::std::option::Option<unsafe extern "C" fn(elem: *mut snd_mixer_elem_t)>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_elem_add(
        elem: *mut snd_mixer_elem_t,
        class_: *mut snd_mixer_class_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_elem_remove(elem: *mut snd_mixer_elem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_elem_free(elem: *mut snd_mixer_elem_t);
}
extern "C" {
    pub fn snd_mixer_elem_info(elem: *mut snd_mixer_elem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_elem_value(elem: *mut snd_mixer_elem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_elem_attach(
        melem: *mut snd_mixer_elem_t,
        helem: *mut snd_hctl_elem_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_elem_detach(
        melem: *mut snd_mixer_elem_t,
        helem: *mut snd_hctl_elem_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_elem_empty(melem: *mut snd_mixer_elem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_elem_get_private(
        melem: *const snd_mixer_elem_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn snd_mixer_class_sizeof() -> usize;
}
extern "C" {
    pub fn snd_mixer_class_malloc(ptr: *mut *mut snd_mixer_class_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_class_free(obj: *mut snd_mixer_class_t);
}
extern "C" {
    pub fn snd_mixer_class_copy(dst: *mut snd_mixer_class_t, src: *const snd_mixer_class_t);
}
extern "C" {
    pub fn snd_mixer_class_get_mixer(class_: *const snd_mixer_class_t) -> *mut snd_mixer_t;
}
extern "C" {
    pub fn snd_mixer_class_get_event(class_: *const snd_mixer_class_t) -> snd_mixer_event_t;
}
extern "C" {
    pub fn snd_mixer_class_get_private(
        class_: *const snd_mixer_class_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn snd_mixer_class_get_compare(class_: *const snd_mixer_class_t) -> snd_mixer_compare_t;
}
extern "C" {
    pub fn snd_mixer_class_set_event(
        class_: *mut snd_mixer_class_t,
        event: snd_mixer_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_class_set_private(
        class_: *mut snd_mixer_class_t,
        private_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_class_set_private_free(
        class_: *mut snd_mixer_class_t,
        private_free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut snd_mixer_class_t)>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_class_set_compare(
        class_: *mut snd_mixer_class_t,
        compare: snd_mixer_compare_t,
    ) -> ::std::os::raw::c_int;
}
impl _snd_mixer_selem_channel_id {
    pub const SND_MIXER_SCHN_MONO: _snd_mixer_selem_channel_id =
        _snd_mixer_selem_channel_id::SND_MIXER_SCHN_FRONT_LEFT;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _snd_mixer_selem_channel_id {
    SND_MIXER_SCHN_UNKNOWN = -1,
    SND_MIXER_SCHN_FRONT_LEFT = 0,
    SND_MIXER_SCHN_FRONT_RIGHT = 1,
    SND_MIXER_SCHN_REAR_LEFT = 2,
    SND_MIXER_SCHN_REAR_RIGHT = 3,
    SND_MIXER_SCHN_FRONT_CENTER = 4,
    SND_MIXER_SCHN_WOOFER = 5,
    SND_MIXER_SCHN_SIDE_LEFT = 6,
    SND_MIXER_SCHN_SIDE_RIGHT = 7,
    SND_MIXER_SCHN_REAR_CENTER = 8,
    SND_MIXER_SCHN_LAST = 31,
}
pub use self::_snd_mixer_selem_channel_id as snd_mixer_selem_channel_id_t;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum snd_mixer_selem_regopt_abstract {
    SND_MIXER_SABSTRACT_NONE = 0,
    SND_MIXER_SABSTRACT_BASIC = 1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct snd_mixer_selem_regopt {
    pub ver: ::std::os::raw::c_int,
    pub abstract_: snd_mixer_selem_regopt_abstract,
    pub device: *const ::std::os::raw::c_char,
    pub playback_pcm: *mut snd_pcm_t,
    pub capture_pcm: *mut snd_pcm_t,
}
#[test]
fn bindgen_test_layout_snd_mixer_selem_regopt() {
    assert_eq!(
        ::std::mem::size_of::<snd_mixer_selem_regopt>(),
        32usize,
        concat!("Size of: ", stringify!(snd_mixer_selem_regopt))
    );
    assert_eq!(
        ::std::mem::align_of::<snd_mixer_selem_regopt>(),
        8usize,
        concat!("Alignment of ", stringify!(snd_mixer_selem_regopt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_mixer_selem_regopt>())).ver as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_mixer_selem_regopt),
            "::",
            stringify!(ver)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snd_mixer_selem_regopt>())).abstract_ as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_mixer_selem_regopt),
            "::",
            stringify!(abstract_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_mixer_selem_regopt>())).device as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_mixer_selem_regopt),
            "::",
            stringify!(device)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snd_mixer_selem_regopt>())).playback_pcm as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_mixer_selem_regopt),
            "::",
            stringify!(playback_pcm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snd_mixer_selem_regopt>())).capture_pcm as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_mixer_selem_regopt),
            "::",
            stringify!(capture_pcm)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_mixer_selem_id {
    _unused: [u8; 0],
}
pub type snd_mixer_selem_id_t = _snd_mixer_selem_id;
extern "C" {
    pub fn snd_mixer_selem_channel_name(
        channel: snd_mixer_selem_channel_id_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_mixer_selem_register(
        mixer: *mut snd_mixer_t,
        options: *mut snd_mixer_selem_regopt,
        classp: *mut *mut snd_mixer_class_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_get_id(element: *mut snd_mixer_elem_t, id: *mut snd_mixer_selem_id_t);
}
extern "C" {
    pub fn snd_mixer_selem_get_name(elem: *mut snd_mixer_elem_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_mixer_selem_get_index(elem: *mut snd_mixer_elem_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_mixer_find_selem(
        mixer: *mut snd_mixer_t,
        id: *const snd_mixer_selem_id_t,
    ) -> *mut snd_mixer_elem_t;
}
extern "C" {
    pub fn snd_mixer_selem_is_active(elem: *mut snd_mixer_elem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_is_playback_mono(elem: *mut snd_mixer_elem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_has_playback_channel(
        obj: *mut snd_mixer_elem_t,
        channel: snd_mixer_selem_channel_id_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_is_capture_mono(elem: *mut snd_mixer_elem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_has_capture_channel(
        obj: *mut snd_mixer_elem_t,
        channel: snd_mixer_selem_channel_id_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_get_capture_group(elem: *mut snd_mixer_elem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_has_common_volume(elem: *mut snd_mixer_elem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_has_playback_volume(
        elem: *mut snd_mixer_elem_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_has_playback_volume_joined(
        elem: *mut snd_mixer_elem_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_has_capture_volume(elem: *mut snd_mixer_elem_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_has_capture_volume_joined(
        elem: *mut snd_mixer_elem_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_has_common_switch(elem: *mut snd_mixer_elem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_has_playback_switch(
        elem: *mut snd_mixer_elem_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_has_playback_switch_joined(
        elem: *mut snd_mixer_elem_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_has_capture_switch(elem: *mut snd_mixer_elem_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_has_capture_switch_joined(
        elem: *mut snd_mixer_elem_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_has_capture_switch_exclusive(
        elem: *mut snd_mixer_elem_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_ask_playback_vol_dB(
        elem: *mut snd_mixer_elem_t,
        value: ::std::os::raw::c_long,
        dBvalue: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_ask_capture_vol_dB(
        elem: *mut snd_mixer_elem_t,
        value: ::std::os::raw::c_long,
        dBvalue: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_ask_playback_dB_vol(
        elem: *mut snd_mixer_elem_t,
        dBvalue: ::std::os::raw::c_long,
        dir: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_ask_capture_dB_vol(
        elem: *mut snd_mixer_elem_t,
        dBvalue: ::std::os::raw::c_long,
        dir: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_get_playback_volume(
        elem: *mut snd_mixer_elem_t,
        channel: snd_mixer_selem_channel_id_t,
        value: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_get_capture_volume(
        elem: *mut snd_mixer_elem_t,
        channel: snd_mixer_selem_channel_id_t,
        value: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_get_playback_dB(
        elem: *mut snd_mixer_elem_t,
        channel: snd_mixer_selem_channel_id_t,
        value: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_get_capture_dB(
        elem: *mut snd_mixer_elem_t,
        channel: snd_mixer_selem_channel_id_t,
        value: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_get_playback_switch(
        elem: *mut snd_mixer_elem_t,
        channel: snd_mixer_selem_channel_id_t,
        value: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_get_capture_switch(
        elem: *mut snd_mixer_elem_t,
        channel: snd_mixer_selem_channel_id_t,
        value: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_set_playback_volume(
        elem: *mut snd_mixer_elem_t,
        channel: snd_mixer_selem_channel_id_t,
        value: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_set_capture_volume(
        elem: *mut snd_mixer_elem_t,
        channel: snd_mixer_selem_channel_id_t,
        value: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_set_playback_dB(
        elem: *mut snd_mixer_elem_t,
        channel: snd_mixer_selem_channel_id_t,
        value: ::std::os::raw::c_long,
        dir: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_set_capture_dB(
        elem: *mut snd_mixer_elem_t,
        channel: snd_mixer_selem_channel_id_t,
        value: ::std::os::raw::c_long,
        dir: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_set_playback_volume_all(
        elem: *mut snd_mixer_elem_t,
        value: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_set_capture_volume_all(
        elem: *mut snd_mixer_elem_t,
        value: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_set_playback_dB_all(
        elem: *mut snd_mixer_elem_t,
        value: ::std::os::raw::c_long,
        dir: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_set_capture_dB_all(
        elem: *mut snd_mixer_elem_t,
        value: ::std::os::raw::c_long,
        dir: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_set_playback_switch(
        elem: *mut snd_mixer_elem_t,
        channel: snd_mixer_selem_channel_id_t,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_set_capture_switch(
        elem: *mut snd_mixer_elem_t,
        channel: snd_mixer_selem_channel_id_t,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_set_playback_switch_all(
        elem: *mut snd_mixer_elem_t,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_set_capture_switch_all(
        elem: *mut snd_mixer_elem_t,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_get_playback_volume_range(
        elem: *mut snd_mixer_elem_t,
        min: *mut ::std::os::raw::c_long,
        max: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_get_playback_dB_range(
        elem: *mut snd_mixer_elem_t,
        min: *mut ::std::os::raw::c_long,
        max: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_set_playback_volume_range(
        elem: *mut snd_mixer_elem_t,
        min: ::std::os::raw::c_long,
        max: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_get_capture_volume_range(
        elem: *mut snd_mixer_elem_t,
        min: *mut ::std::os::raw::c_long,
        max: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_get_capture_dB_range(
        elem: *mut snd_mixer_elem_t,
        min: *mut ::std::os::raw::c_long,
        max: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_set_capture_volume_range(
        elem: *mut snd_mixer_elem_t,
        min: ::std::os::raw::c_long,
        max: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_is_enumerated(elem: *mut snd_mixer_elem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_is_enum_playback(elem: *mut snd_mixer_elem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_is_enum_capture(elem: *mut snd_mixer_elem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_get_enum_items(elem: *mut snd_mixer_elem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_get_enum_item_name(
        elem: *mut snd_mixer_elem_t,
        idx: ::std::os::raw::c_uint,
        maxlen: usize,
        str: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_get_enum_item(
        elem: *mut snd_mixer_elem_t,
        channel: snd_mixer_selem_channel_id_t,
        idxp: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_set_enum_item(
        elem: *mut snd_mixer_elem_t,
        channel: snd_mixer_selem_channel_id_t,
        idx: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_id_sizeof() -> usize;
}
extern "C" {
    pub fn snd_mixer_selem_id_malloc(ptr: *mut *mut snd_mixer_selem_id_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_mixer_selem_id_free(obj: *mut snd_mixer_selem_id_t);
}
extern "C" {
    pub fn snd_mixer_selem_id_copy(
        dst: *mut snd_mixer_selem_id_t,
        src: *const snd_mixer_selem_id_t,
    );
}
extern "C" {
    pub fn snd_mixer_selem_id_get_name(
        obj: *const snd_mixer_selem_id_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_mixer_selem_id_get_index(obj: *const snd_mixer_selem_id_t)
        -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_mixer_selem_id_set_name(
        obj: *mut snd_mixer_selem_id_t,
        val: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn snd_mixer_selem_id_set_index(
        obj: *mut snd_mixer_selem_id_t,
        val: ::std::os::raw::c_uint,
    );
}
pub type snd_seq_event_type_t = ::std::os::raw::c_uchar;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum snd_seq_event_type {
    SND_SEQ_EVENT_SYSTEM = 0,
    SND_SEQ_EVENT_RESULT = 1,
    SND_SEQ_EVENT_NOTE = 5,
    SND_SEQ_EVENT_NOTEON = 6,
    SND_SEQ_EVENT_NOTEOFF = 7,
    SND_SEQ_EVENT_KEYPRESS = 8,
    SND_SEQ_EVENT_CONTROLLER = 10,
    SND_SEQ_EVENT_PGMCHANGE = 11,
    SND_SEQ_EVENT_CHANPRESS = 12,
    SND_SEQ_EVENT_PITCHBEND = 13,
    SND_SEQ_EVENT_CONTROL14 = 14,
    SND_SEQ_EVENT_NONREGPARAM = 15,
    SND_SEQ_EVENT_REGPARAM = 16,
    SND_SEQ_EVENT_SONGPOS = 20,
    SND_SEQ_EVENT_SONGSEL = 21,
    SND_SEQ_EVENT_QFRAME = 22,
    SND_SEQ_EVENT_TIMESIGN = 23,
    SND_SEQ_EVENT_KEYSIGN = 24,
    SND_SEQ_EVENT_START = 30,
    SND_SEQ_EVENT_CONTINUE = 31,
    SND_SEQ_EVENT_STOP = 32,
    SND_SEQ_EVENT_SETPOS_TICK = 33,
    SND_SEQ_EVENT_SETPOS_TIME = 34,
    SND_SEQ_EVENT_TEMPO = 35,
    SND_SEQ_EVENT_CLOCK = 36,
    SND_SEQ_EVENT_TICK = 37,
    SND_SEQ_EVENT_QUEUE_SKEW = 38,
    SND_SEQ_EVENT_SYNC_POS = 39,
    SND_SEQ_EVENT_TUNE_REQUEST = 40,
    SND_SEQ_EVENT_RESET = 41,
    SND_SEQ_EVENT_SENSING = 42,
    SND_SEQ_EVENT_ECHO = 50,
    SND_SEQ_EVENT_OSS = 51,
    SND_SEQ_EVENT_CLIENT_START = 60,
    SND_SEQ_EVENT_CLIENT_EXIT = 61,
    SND_SEQ_EVENT_CLIENT_CHANGE = 62,
    SND_SEQ_EVENT_PORT_START = 63,
    SND_SEQ_EVENT_PORT_EXIT = 64,
    SND_SEQ_EVENT_PORT_CHANGE = 65,
    SND_SEQ_EVENT_PORT_SUBSCRIBED = 66,
    SND_SEQ_EVENT_PORT_UNSUBSCRIBED = 67,
    SND_SEQ_EVENT_USR0 = 90,
    SND_SEQ_EVENT_USR1 = 91,
    SND_SEQ_EVENT_USR2 = 92,
    SND_SEQ_EVENT_USR3 = 93,
    SND_SEQ_EVENT_USR4 = 94,
    SND_SEQ_EVENT_USR5 = 95,
    SND_SEQ_EVENT_USR6 = 96,
    SND_SEQ_EVENT_USR7 = 97,
    SND_SEQ_EVENT_USR8 = 98,
    SND_SEQ_EVENT_USR9 = 99,
    SND_SEQ_EVENT_SYSEX = 130,
    SND_SEQ_EVENT_BOUNCE = 131,
    SND_SEQ_EVENT_USR_VAR0 = 135,
    SND_SEQ_EVENT_USR_VAR1 = 136,
    SND_SEQ_EVENT_USR_VAR2 = 137,
    SND_SEQ_EVENT_USR_VAR3 = 138,
    SND_SEQ_EVENT_USR_VAR4 = 139,
    SND_SEQ_EVENT_NONE = 255,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct snd_seq_addr {
    pub client: ::std::os::raw::c_uchar,
    pub port: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_snd_seq_addr() {
    assert_eq!(
        ::std::mem::size_of::<snd_seq_addr>(),
        2usize,
        concat!("Size of: ", stringify!(snd_seq_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<snd_seq_addr>(),
        1usize,
        concat!("Alignment of ", stringify!(snd_seq_addr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_seq_addr>())).client as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_addr),
            "::",
            stringify!(client)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_seq_addr>())).port as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_addr),
            "::",
            stringify!(port)
        )
    );
}
pub type snd_seq_addr_t = snd_seq_addr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct snd_seq_connect {
    pub sender: snd_seq_addr_t,
    pub dest: snd_seq_addr_t,
}
#[test]
fn bindgen_test_layout_snd_seq_connect() {
    assert_eq!(
        ::std::mem::size_of::<snd_seq_connect>(),
        4usize,
        concat!("Size of: ", stringify!(snd_seq_connect))
    );
    assert_eq!(
        ::std::mem::align_of::<snd_seq_connect>(),
        1usize,
        concat!("Alignment of ", stringify!(snd_seq_connect))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_seq_connect>())).sender as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_connect),
            "::",
            stringify!(sender)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_seq_connect>())).dest as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_connect),
            "::",
            stringify!(dest)
        )
    );
}
pub type snd_seq_connect_t = snd_seq_connect;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct snd_seq_real_time {
    pub tv_sec: ::std::os::raw::c_uint,
    pub tv_nsec: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_snd_seq_real_time() {
    assert_eq!(
        ::std::mem::size_of::<snd_seq_real_time>(),
        8usize,
        concat!("Size of: ", stringify!(snd_seq_real_time))
    );
    assert_eq!(
        ::std::mem::align_of::<snd_seq_real_time>(),
        4usize,
        concat!("Alignment of ", stringify!(snd_seq_real_time))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_seq_real_time>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_real_time),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_seq_real_time>())).tv_nsec as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_real_time),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type snd_seq_real_time_t = snd_seq_real_time;
pub type snd_seq_tick_time_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union snd_seq_timestamp {
    pub tick: snd_seq_tick_time_t,
    pub time: snd_seq_real_time,
    _bindgen_union_align: [u32; 2usize],
}
#[test]
fn bindgen_test_layout_snd_seq_timestamp() {
    assert_eq!(
        ::std::mem::size_of::<snd_seq_timestamp>(),
        8usize,
        concat!("Size of: ", stringify!(snd_seq_timestamp))
    );
    assert_eq!(
        ::std::mem::align_of::<snd_seq_timestamp>(),
        4usize,
        concat!("Alignment of ", stringify!(snd_seq_timestamp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_seq_timestamp>())).tick as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_timestamp),
            "::",
            stringify!(tick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_seq_timestamp>())).time as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_timestamp),
            "::",
            stringify!(time)
        )
    );
}
pub type snd_seq_timestamp_t = snd_seq_timestamp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct snd_seq_ev_note {
    pub channel: ::std::os::raw::c_uchar,
    pub note: ::std::os::raw::c_uchar,
    pub velocity: ::std::os::raw::c_uchar,
    pub off_velocity: ::std::os::raw::c_uchar,
    pub duration: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_snd_seq_ev_note() {
    assert_eq!(
        ::std::mem::size_of::<snd_seq_ev_note>(),
        8usize,
        concat!("Size of: ", stringify!(snd_seq_ev_note))
    );
    assert_eq!(
        ::std::mem::align_of::<snd_seq_ev_note>(),
        4usize,
        concat!("Alignment of ", stringify!(snd_seq_ev_note))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_seq_ev_note>())).channel as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_ev_note),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_seq_ev_note>())).note as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_ev_note),
            "::",
            stringify!(note)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_seq_ev_note>())).velocity as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_ev_note),
            "::",
            stringify!(velocity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_seq_ev_note>())).off_velocity as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_ev_note),
            "::",
            stringify!(off_velocity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_seq_ev_note>())).duration as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_ev_note),
            "::",
            stringify!(duration)
        )
    );
}
pub type snd_seq_ev_note_t = snd_seq_ev_note;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct snd_seq_ev_ctrl {
    pub channel: ::std::os::raw::c_uchar,
    pub unused: [::std::os::raw::c_uchar; 3usize],
    pub param: ::std::os::raw::c_uint,
    pub value: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_snd_seq_ev_ctrl() {
    assert_eq!(
        ::std::mem::size_of::<snd_seq_ev_ctrl>(),
        12usize,
        concat!("Size of: ", stringify!(snd_seq_ev_ctrl))
    );
    assert_eq!(
        ::std::mem::align_of::<snd_seq_ev_ctrl>(),
        4usize,
        concat!("Alignment of ", stringify!(snd_seq_ev_ctrl))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_seq_ev_ctrl>())).channel as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_ev_ctrl),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_seq_ev_ctrl>())).unused as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_ev_ctrl),
            "::",
            stringify!(unused)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_seq_ev_ctrl>())).param as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_ev_ctrl),
            "::",
            stringify!(param)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_seq_ev_ctrl>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_ev_ctrl),
            "::",
            stringify!(value)
        )
    );
}
pub type snd_seq_ev_ctrl_t = snd_seq_ev_ctrl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct snd_seq_ev_raw8 {
    pub d: [::std::os::raw::c_uchar; 12usize],
}
#[test]
fn bindgen_test_layout_snd_seq_ev_raw8() {
    assert_eq!(
        ::std::mem::size_of::<snd_seq_ev_raw8>(),
        12usize,
        concat!("Size of: ", stringify!(snd_seq_ev_raw8))
    );
    assert_eq!(
        ::std::mem::align_of::<snd_seq_ev_raw8>(),
        1usize,
        concat!("Alignment of ", stringify!(snd_seq_ev_raw8))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_seq_ev_raw8>())).d as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_ev_raw8),
            "::",
            stringify!(d)
        )
    );
}
pub type snd_seq_ev_raw8_t = snd_seq_ev_raw8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct snd_seq_ev_raw32 {
    pub d: [::std::os::raw::c_uint; 3usize],
}
#[test]
fn bindgen_test_layout_snd_seq_ev_raw32() {
    assert_eq!(
        ::std::mem::size_of::<snd_seq_ev_raw32>(),
        12usize,
        concat!("Size of: ", stringify!(snd_seq_ev_raw32))
    );
    assert_eq!(
        ::std::mem::align_of::<snd_seq_ev_raw32>(),
        4usize,
        concat!("Alignment of ", stringify!(snd_seq_ev_raw32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_seq_ev_raw32>())).d as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_ev_raw32),
            "::",
            stringify!(d)
        )
    );
}
pub type snd_seq_ev_raw32_t = snd_seq_ev_raw32;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct snd_seq_ev_ext {
    pub len: ::std::os::raw::c_uint,
    pub ptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_snd_seq_ev_ext() {
    assert_eq!(
        ::std::mem::size_of::<snd_seq_ev_ext>(),
        12usize,
        concat!("Size of: ", stringify!(snd_seq_ev_ext))
    );
    assert_eq!(
        ::std::mem::align_of::<snd_seq_ev_ext>(),
        1usize,
        concat!("Alignment of ", stringify!(snd_seq_ev_ext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_seq_ev_ext>())).len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_ev_ext),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_seq_ev_ext>())).ptr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_ev_ext),
            "::",
            stringify!(ptr)
        )
    );
}
pub type snd_seq_ev_ext_t = snd_seq_ev_ext;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct snd_seq_result {
    pub event: ::std::os::raw::c_int,
    pub result: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_snd_seq_result() {
    assert_eq!(
        ::std::mem::size_of::<snd_seq_result>(),
        8usize,
        concat!("Size of: ", stringify!(snd_seq_result))
    );
    assert_eq!(
        ::std::mem::align_of::<snd_seq_result>(),
        4usize,
        concat!("Alignment of ", stringify!(snd_seq_result))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_seq_result>())).event as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_result),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_seq_result>())).result as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_result),
            "::",
            stringify!(result)
        )
    );
}
pub type snd_seq_result_t = snd_seq_result;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct snd_seq_queue_skew {
    pub value: ::std::os::raw::c_uint,
    pub base: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_snd_seq_queue_skew() {
    assert_eq!(
        ::std::mem::size_of::<snd_seq_queue_skew>(),
        8usize,
        concat!("Size of: ", stringify!(snd_seq_queue_skew))
    );
    assert_eq!(
        ::std::mem::align_of::<snd_seq_queue_skew>(),
        4usize,
        concat!("Alignment of ", stringify!(snd_seq_queue_skew))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_seq_queue_skew>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_queue_skew),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_seq_queue_skew>())).base as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_queue_skew),
            "::",
            stringify!(base)
        )
    );
}
pub type snd_seq_queue_skew_t = snd_seq_queue_skew;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct snd_seq_ev_queue_control {
    pub queue: ::std::os::raw::c_uchar,
    pub unused: [::std::os::raw::c_uchar; 3usize],
    pub param: snd_seq_ev_queue_control__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union snd_seq_ev_queue_control__bindgen_ty_1 {
    pub value: ::std::os::raw::c_int,
    pub time: snd_seq_timestamp_t,
    pub position: ::std::os::raw::c_uint,
    pub skew: snd_seq_queue_skew_t,
    pub d32: [::std::os::raw::c_uint; 2usize],
    pub d8: [::std::os::raw::c_uchar; 8usize],
    _bindgen_union_align: [u32; 2usize],
}
#[test]
fn bindgen_test_layout_snd_seq_ev_queue_control__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<snd_seq_ev_queue_control__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(snd_seq_ev_queue_control__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<snd_seq_ev_queue_control__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(snd_seq_ev_queue_control__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snd_seq_ev_queue_control__bindgen_ty_1>())).value as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_ev_queue_control__bindgen_ty_1),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snd_seq_ev_queue_control__bindgen_ty_1>())).time as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_ev_queue_control__bindgen_ty_1),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snd_seq_ev_queue_control__bindgen_ty_1>())).position as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_ev_queue_control__bindgen_ty_1),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snd_seq_ev_queue_control__bindgen_ty_1>())).skew as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_ev_queue_control__bindgen_ty_1),
            "::",
            stringify!(skew)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snd_seq_ev_queue_control__bindgen_ty_1>())).d32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_ev_queue_control__bindgen_ty_1),
            "::",
            stringify!(d32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snd_seq_ev_queue_control__bindgen_ty_1>())).d8 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_ev_queue_control__bindgen_ty_1),
            "::",
            stringify!(d8)
        )
    );
}
#[test]
fn bindgen_test_layout_snd_seq_ev_queue_control() {
    assert_eq!(
        ::std::mem::size_of::<snd_seq_ev_queue_control>(),
        12usize,
        concat!("Size of: ", stringify!(snd_seq_ev_queue_control))
    );
    assert_eq!(
        ::std::mem::align_of::<snd_seq_ev_queue_control>(),
        4usize,
        concat!("Alignment of ", stringify!(snd_seq_ev_queue_control))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_seq_ev_queue_control>())).queue as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_ev_queue_control),
            "::",
            stringify!(queue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_seq_ev_queue_control>())).unused as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_ev_queue_control),
            "::",
            stringify!(unused)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_seq_ev_queue_control>())).param as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_ev_queue_control),
            "::",
            stringify!(param)
        )
    );
}
pub type snd_seq_ev_queue_control_t = snd_seq_ev_queue_control;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct snd_seq_event {
    pub type_: snd_seq_event_type_t,
    pub flags: ::std::os::raw::c_uchar,
    pub tag: ::std::os::raw::c_uchar,
    pub queue: ::std::os::raw::c_uchar,
    pub time: snd_seq_timestamp_t,
    pub source: snd_seq_addr_t,
    pub dest: snd_seq_addr_t,
    pub data: snd_seq_event__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union snd_seq_event__bindgen_ty_1 {
    pub note: snd_seq_ev_note_t,
    pub control: snd_seq_ev_ctrl_t,
    pub raw8: snd_seq_ev_raw8_t,
    pub raw32: snd_seq_ev_raw32_t,
    pub ext: snd_seq_ev_ext_t,
    pub queue: snd_seq_ev_queue_control_t,
    pub time: snd_seq_timestamp_t,
    pub addr: snd_seq_addr_t,
    pub connect: snd_seq_connect_t,
    pub result: snd_seq_result_t,
    _bindgen_union_align: [u32; 3usize],
}
#[test]
fn bindgen_test_layout_snd_seq_event__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<snd_seq_event__bindgen_ty_1>(),
        12usize,
        concat!("Size of: ", stringify!(snd_seq_event__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<snd_seq_event__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(snd_seq_event__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snd_seq_event__bindgen_ty_1>())).note as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_event__bindgen_ty_1),
            "::",
            stringify!(note)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snd_seq_event__bindgen_ty_1>())).control as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_event__bindgen_ty_1),
            "::",
            stringify!(control)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snd_seq_event__bindgen_ty_1>())).raw8 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_event__bindgen_ty_1),
            "::",
            stringify!(raw8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snd_seq_event__bindgen_ty_1>())).raw32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_event__bindgen_ty_1),
            "::",
            stringify!(raw32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_seq_event__bindgen_ty_1>())).ext as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_event__bindgen_ty_1),
            "::",
            stringify!(ext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snd_seq_event__bindgen_ty_1>())).queue as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_event__bindgen_ty_1),
            "::",
            stringify!(queue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snd_seq_event__bindgen_ty_1>())).time as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_event__bindgen_ty_1),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snd_seq_event__bindgen_ty_1>())).addr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_event__bindgen_ty_1),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snd_seq_event__bindgen_ty_1>())).connect as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_event__bindgen_ty_1),
            "::",
            stringify!(connect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<snd_seq_event__bindgen_ty_1>())).result as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_event__bindgen_ty_1),
            "::",
            stringify!(result)
        )
    );
}
#[test]
fn bindgen_test_layout_snd_seq_event() {
    assert_eq!(
        ::std::mem::size_of::<snd_seq_event>(),
        28usize,
        concat!("Size of: ", stringify!(snd_seq_event))
    );
    assert_eq!(
        ::std::mem::align_of::<snd_seq_event>(),
        4usize,
        concat!("Alignment of ", stringify!(snd_seq_event))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_seq_event>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_event),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_seq_event>())).flags as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_event),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_seq_event>())).tag as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_event),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_seq_event>())).queue as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_event),
            "::",
            stringify!(queue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_seq_event>())).time as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_event),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_seq_event>())).source as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_event),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_seq_event>())).dest as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_event),
            "::",
            stringify!(dest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_seq_event>())).data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_seq_event),
            "::",
            stringify!(data)
        )
    );
}
pub type snd_seq_event_t = snd_seq_event;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_seq {
    _unused: [u8; 0],
}
pub type snd_seq_t = _snd_seq;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _snd_seq_type {
    SND_SEQ_TYPE_HW = 0,
    SND_SEQ_TYPE_SHM = 1,
    SND_SEQ_TYPE_INET = 2,
}
pub use self::_snd_seq_type as snd_seq_type_t;
extern "C" {
    pub fn snd_seq_open(
        handle: *mut *mut snd_seq_t,
        name: *const ::std::os::raw::c_char,
        streams: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_open_lconf(
        handle: *mut *mut snd_seq_t,
        name: *const ::std::os::raw::c_char,
        streams: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        lconf: *mut snd_config_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_name(seq: *mut snd_seq_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_seq_type(seq: *mut snd_seq_t) -> snd_seq_type_t;
}
extern "C" {
    pub fn snd_seq_close(handle: *mut snd_seq_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_poll_descriptors_count(
        handle: *mut snd_seq_t,
        events: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_poll_descriptors(
        handle: *mut snd_seq_t,
        pfds: *mut pollfd,
        space: ::std::os::raw::c_uint,
        events: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_poll_descriptors_revents(
        seq: *mut snd_seq_t,
        pfds: *mut pollfd,
        nfds: ::std::os::raw::c_uint,
        revents: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_nonblock(
        handle: *mut snd_seq_t,
        nonblock: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_client_id(handle: *mut snd_seq_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_get_output_buffer_size(handle: *mut snd_seq_t) -> usize;
}
extern "C" {
    pub fn snd_seq_get_input_buffer_size(handle: *mut snd_seq_t) -> usize;
}
extern "C" {
    pub fn snd_seq_set_output_buffer_size(
        handle: *mut snd_seq_t,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_set_input_buffer_size(
        handle: *mut snd_seq_t,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_seq_system_info {
    _unused: [u8; 0],
}
pub type snd_seq_system_info_t = _snd_seq_system_info;
extern "C" {
    pub fn snd_seq_system_info_sizeof() -> usize;
}
extern "C" {
    pub fn snd_seq_system_info_malloc(
        ptr: *mut *mut snd_seq_system_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_system_info_free(ptr: *mut snd_seq_system_info_t);
}
extern "C" {
    pub fn snd_seq_system_info_copy(
        dst: *mut snd_seq_system_info_t,
        src: *const snd_seq_system_info_t,
    );
}
extern "C" {
    pub fn snd_seq_system_info_get_queues(
        info: *const snd_seq_system_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_system_info_get_clients(
        info: *const snd_seq_system_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_system_info_get_ports(
        info: *const snd_seq_system_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_system_info_get_channels(
        info: *const snd_seq_system_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_system_info_get_cur_clients(
        info: *const snd_seq_system_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_system_info_get_cur_queues(
        info: *const snd_seq_system_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_system_info(
        handle: *mut snd_seq_t,
        info: *mut snd_seq_system_info_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_seq_client_info {
    _unused: [u8; 0],
}
pub type snd_seq_client_info_t = _snd_seq_client_info;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum snd_seq_client_type {
    SND_SEQ_USER_CLIENT = 1,
    SND_SEQ_KERNEL_CLIENT = 2,
}
pub use self::snd_seq_client_type as snd_seq_client_type_t;
extern "C" {
    pub fn snd_seq_client_info_sizeof() -> usize;
}
extern "C" {
    pub fn snd_seq_client_info_malloc(
        ptr: *mut *mut snd_seq_client_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_client_info_free(ptr: *mut snd_seq_client_info_t);
}
extern "C" {
    pub fn snd_seq_client_info_copy(
        dst: *mut snd_seq_client_info_t,
        src: *const snd_seq_client_info_t,
    );
}
extern "C" {
    pub fn snd_seq_client_info_get_client(
        info: *const snd_seq_client_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_client_info_get_type(
        info: *const snd_seq_client_info_t,
    ) -> snd_seq_client_type_t;
}
extern "C" {
    pub fn snd_seq_client_info_get_name(
        info: *mut snd_seq_client_info_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_seq_client_info_get_broadcast_filter(
        info: *const snd_seq_client_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_client_info_get_error_bounce(
        info: *const snd_seq_client_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_client_info_get_card(
        info: *const snd_seq_client_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_client_info_get_pid(info: *const snd_seq_client_info_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_client_info_get_event_filter(
        info: *const snd_seq_client_info_t,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn snd_seq_client_info_get_num_ports(
        info: *const snd_seq_client_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_client_info_get_event_lost(
        info: *const snd_seq_client_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_client_info_set_client(
        info: *mut snd_seq_client_info_t,
        client: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn snd_seq_client_info_set_name(
        info: *mut snd_seq_client_info_t,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn snd_seq_client_info_set_broadcast_filter(
        info: *mut snd_seq_client_info_t,
        val: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn snd_seq_client_info_set_error_bounce(
        info: *mut snd_seq_client_info_t,
        val: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn snd_seq_client_info_set_event_filter(
        info: *mut snd_seq_client_info_t,
        filter: *mut ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn snd_seq_client_info_event_filter_clear(info: *mut snd_seq_client_info_t);
}
extern "C" {
    pub fn snd_seq_client_info_event_filter_add(
        info: *mut snd_seq_client_info_t,
        event_type: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn snd_seq_client_info_event_filter_del(
        info: *mut snd_seq_client_info_t,
        event_type: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn snd_seq_client_info_event_filter_check(
        info: *mut snd_seq_client_info_t,
        event_type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_get_client_info(
        handle: *mut snd_seq_t,
        info: *mut snd_seq_client_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_get_any_client_info(
        handle: *mut snd_seq_t,
        client: ::std::os::raw::c_int,
        info: *mut snd_seq_client_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_set_client_info(
        handle: *mut snd_seq_t,
        info: *mut snd_seq_client_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_query_next_client(
        handle: *mut snd_seq_t,
        info: *mut snd_seq_client_info_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_seq_client_pool {
    _unused: [u8; 0],
}
pub type snd_seq_client_pool_t = _snd_seq_client_pool;
extern "C" {
    pub fn snd_seq_client_pool_sizeof() -> usize;
}
extern "C" {
    pub fn snd_seq_client_pool_malloc(
        ptr: *mut *mut snd_seq_client_pool_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_client_pool_free(ptr: *mut snd_seq_client_pool_t);
}
extern "C" {
    pub fn snd_seq_client_pool_copy(
        dst: *mut snd_seq_client_pool_t,
        src: *const snd_seq_client_pool_t,
    );
}
extern "C" {
    pub fn snd_seq_client_pool_get_client(
        info: *const snd_seq_client_pool_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_client_pool_get_output_pool(info: *const snd_seq_client_pool_t) -> usize;
}
extern "C" {
    pub fn snd_seq_client_pool_get_input_pool(info: *const snd_seq_client_pool_t) -> usize;
}
extern "C" {
    pub fn snd_seq_client_pool_get_output_room(info: *const snd_seq_client_pool_t) -> usize;
}
extern "C" {
    pub fn snd_seq_client_pool_get_output_free(info: *const snd_seq_client_pool_t) -> usize;
}
extern "C" {
    pub fn snd_seq_client_pool_get_input_free(info: *const snd_seq_client_pool_t) -> usize;
}
extern "C" {
    pub fn snd_seq_client_pool_set_output_pool(info: *mut snd_seq_client_pool_t, size: usize);
}
extern "C" {
    pub fn snd_seq_client_pool_set_input_pool(info: *mut snd_seq_client_pool_t, size: usize);
}
extern "C" {
    pub fn snd_seq_client_pool_set_output_room(info: *mut snd_seq_client_pool_t, size: usize);
}
extern "C" {
    pub fn snd_seq_get_client_pool(
        handle: *mut snd_seq_t,
        info: *mut snd_seq_client_pool_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_set_client_pool(
        handle: *mut snd_seq_t,
        info: *mut snd_seq_client_pool_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_seq_port_info {
    _unused: [u8; 0],
}
pub type snd_seq_port_info_t = _snd_seq_port_info;
extern "C" {
    pub fn snd_seq_port_info_sizeof() -> usize;
}
extern "C" {
    pub fn snd_seq_port_info_malloc(ptr: *mut *mut snd_seq_port_info_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_port_info_free(ptr: *mut snd_seq_port_info_t);
}
extern "C" {
    pub fn snd_seq_port_info_copy(dst: *mut snd_seq_port_info_t, src: *const snd_seq_port_info_t);
}
extern "C" {
    pub fn snd_seq_port_info_get_client(info: *const snd_seq_port_info_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_port_info_get_port(info: *const snd_seq_port_info_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_port_info_get_addr(info: *const snd_seq_port_info_t) -> *const snd_seq_addr_t;
}
extern "C" {
    pub fn snd_seq_port_info_get_name(
        info: *const snd_seq_port_info_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_seq_port_info_get_capability(
        info: *const snd_seq_port_info_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_seq_port_info_get_type(info: *const snd_seq_port_info_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_seq_port_info_get_midi_channels(
        info: *const snd_seq_port_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_port_info_get_midi_voices(
        info: *const snd_seq_port_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_port_info_get_synth_voices(
        info: *const snd_seq_port_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_port_info_get_read_use(
        info: *const snd_seq_port_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_port_info_get_write_use(
        info: *const snd_seq_port_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_port_info_get_port_specified(
        info: *const snd_seq_port_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_port_info_get_timestamping(
        info: *const snd_seq_port_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_port_info_get_timestamp_real(
        info: *const snd_seq_port_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_port_info_get_timestamp_queue(
        info: *const snd_seq_port_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_port_info_set_client(
        info: *mut snd_seq_port_info_t,
        client: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn snd_seq_port_info_set_port(info: *mut snd_seq_port_info_t, port: ::std::os::raw::c_int);
}
extern "C" {
    pub fn snd_seq_port_info_set_addr(info: *mut snd_seq_port_info_t, addr: *const snd_seq_addr_t);
}
extern "C" {
    pub fn snd_seq_port_info_set_name(
        info: *mut snd_seq_port_info_t,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn snd_seq_port_info_set_capability(
        info: *mut snd_seq_port_info_t,
        capability: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn snd_seq_port_info_set_type(
        info: *mut snd_seq_port_info_t,
        type_: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn snd_seq_port_info_set_midi_channels(
        info: *mut snd_seq_port_info_t,
        channels: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn snd_seq_port_info_set_midi_voices(
        info: *mut snd_seq_port_info_t,
        voices: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn snd_seq_port_info_set_synth_voices(
        info: *mut snd_seq_port_info_t,
        voices: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn snd_seq_port_info_set_port_specified(
        info: *mut snd_seq_port_info_t,
        val: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn snd_seq_port_info_set_timestamping(
        info: *mut snd_seq_port_info_t,
        enable: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn snd_seq_port_info_set_timestamp_real(
        info: *mut snd_seq_port_info_t,
        realtime: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn snd_seq_port_info_set_timestamp_queue(
        info: *mut snd_seq_port_info_t,
        queue: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn snd_seq_create_port(
        handle: *mut snd_seq_t,
        info: *mut snd_seq_port_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_delete_port(
        handle: *mut snd_seq_t,
        port: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_get_port_info(
        handle: *mut snd_seq_t,
        port: ::std::os::raw::c_int,
        info: *mut snd_seq_port_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_get_any_port_info(
        handle: *mut snd_seq_t,
        client: ::std::os::raw::c_int,
        port: ::std::os::raw::c_int,
        info: *mut snd_seq_port_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_set_port_info(
        handle: *mut snd_seq_t,
        port: ::std::os::raw::c_int,
        info: *mut snd_seq_port_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_query_next_port(
        handle: *mut snd_seq_t,
        info: *mut snd_seq_port_info_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_seq_port_subscribe {
    _unused: [u8; 0],
}
pub type snd_seq_port_subscribe_t = _snd_seq_port_subscribe;
extern "C" {
    pub fn snd_seq_port_subscribe_sizeof() -> usize;
}
extern "C" {
    pub fn snd_seq_port_subscribe_malloc(
        ptr: *mut *mut snd_seq_port_subscribe_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_port_subscribe_free(ptr: *mut snd_seq_port_subscribe_t);
}
extern "C" {
    pub fn snd_seq_port_subscribe_copy(
        dst: *mut snd_seq_port_subscribe_t,
        src: *const snd_seq_port_subscribe_t,
    );
}
extern "C" {
    pub fn snd_seq_port_subscribe_get_sender(
        info: *const snd_seq_port_subscribe_t,
    ) -> *const snd_seq_addr_t;
}
extern "C" {
    pub fn snd_seq_port_subscribe_get_dest(
        info: *const snd_seq_port_subscribe_t,
    ) -> *const snd_seq_addr_t;
}
extern "C" {
    pub fn snd_seq_port_subscribe_get_queue(
        info: *const snd_seq_port_subscribe_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_port_subscribe_get_exclusive(
        info: *const snd_seq_port_subscribe_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_port_subscribe_get_time_update(
        info: *const snd_seq_port_subscribe_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_port_subscribe_get_time_real(
        info: *const snd_seq_port_subscribe_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_port_subscribe_set_sender(
        info: *mut snd_seq_port_subscribe_t,
        addr: *const snd_seq_addr_t,
    );
}
extern "C" {
    pub fn snd_seq_port_subscribe_set_dest(
        info: *mut snd_seq_port_subscribe_t,
        addr: *const snd_seq_addr_t,
    );
}
extern "C" {
    pub fn snd_seq_port_subscribe_set_queue(
        info: *mut snd_seq_port_subscribe_t,
        q: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn snd_seq_port_subscribe_set_exclusive(
        info: *mut snd_seq_port_subscribe_t,
        val: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn snd_seq_port_subscribe_set_time_update(
        info: *mut snd_seq_port_subscribe_t,
        val: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn snd_seq_port_subscribe_set_time_real(
        info: *mut snd_seq_port_subscribe_t,
        val: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn snd_seq_get_port_subscription(
        handle: *mut snd_seq_t,
        sub: *mut snd_seq_port_subscribe_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_subscribe_port(
        handle: *mut snd_seq_t,
        sub: *mut snd_seq_port_subscribe_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_unsubscribe_port(
        handle: *mut snd_seq_t,
        sub: *mut snd_seq_port_subscribe_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_seq_query_subscribe {
    _unused: [u8; 0],
}
pub type snd_seq_query_subscribe_t = _snd_seq_query_subscribe;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum snd_seq_query_subs_type_t {
    SND_SEQ_QUERY_SUBS_READ = 0,
    SND_SEQ_QUERY_SUBS_WRITE = 1,
}
extern "C" {
    pub fn snd_seq_query_subscribe_sizeof() -> usize;
}
extern "C" {
    pub fn snd_seq_query_subscribe_malloc(
        ptr: *mut *mut snd_seq_query_subscribe_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_query_subscribe_free(ptr: *mut snd_seq_query_subscribe_t);
}
extern "C" {
    pub fn snd_seq_query_subscribe_copy(
        dst: *mut snd_seq_query_subscribe_t,
        src: *const snd_seq_query_subscribe_t,
    );
}
extern "C" {
    pub fn snd_seq_query_subscribe_get_client(
        info: *const snd_seq_query_subscribe_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_query_subscribe_get_port(
        info: *const snd_seq_query_subscribe_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_query_subscribe_get_root(
        info: *const snd_seq_query_subscribe_t,
    ) -> *const snd_seq_addr_t;
}
extern "C" {
    pub fn snd_seq_query_subscribe_get_type(
        info: *const snd_seq_query_subscribe_t,
    ) -> snd_seq_query_subs_type_t;
}
extern "C" {
    pub fn snd_seq_query_subscribe_get_index(
        info: *const snd_seq_query_subscribe_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_query_subscribe_get_num_subs(
        info: *const snd_seq_query_subscribe_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_query_subscribe_get_addr(
        info: *const snd_seq_query_subscribe_t,
    ) -> *const snd_seq_addr_t;
}
extern "C" {
    pub fn snd_seq_query_subscribe_get_queue(
        info: *const snd_seq_query_subscribe_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_query_subscribe_get_exclusive(
        info: *const snd_seq_query_subscribe_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_query_subscribe_get_time_update(
        info: *const snd_seq_query_subscribe_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_query_subscribe_get_time_real(
        info: *const snd_seq_query_subscribe_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_query_subscribe_set_client(
        info: *mut snd_seq_query_subscribe_t,
        client: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn snd_seq_query_subscribe_set_port(
        info: *mut snd_seq_query_subscribe_t,
        port: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn snd_seq_query_subscribe_set_root(
        info: *mut snd_seq_query_subscribe_t,
        addr: *const snd_seq_addr_t,
    );
}
extern "C" {
    pub fn snd_seq_query_subscribe_set_type(
        info: *mut snd_seq_query_subscribe_t,
        type_: snd_seq_query_subs_type_t,
    );
}
extern "C" {
    pub fn snd_seq_query_subscribe_set_index(
        info: *mut snd_seq_query_subscribe_t,
        _index: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn snd_seq_query_port_subscribers(
        seq: *mut snd_seq_t,
        subs: *mut snd_seq_query_subscribe_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_seq_queue_info {
    _unused: [u8; 0],
}
pub type snd_seq_queue_info_t = _snd_seq_queue_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_seq_queue_status {
    _unused: [u8; 0],
}
pub type snd_seq_queue_status_t = _snd_seq_queue_status;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_seq_queue_tempo {
    _unused: [u8; 0],
}
pub type snd_seq_queue_tempo_t = _snd_seq_queue_tempo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_seq_queue_timer {
    _unused: [u8; 0],
}
pub type snd_seq_queue_timer_t = _snd_seq_queue_timer;
extern "C" {
    pub fn snd_seq_queue_info_sizeof() -> usize;
}
extern "C" {
    pub fn snd_seq_queue_info_malloc(ptr: *mut *mut snd_seq_queue_info_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_queue_info_free(ptr: *mut snd_seq_queue_info_t);
}
extern "C" {
    pub fn snd_seq_queue_info_copy(
        dst: *mut snd_seq_queue_info_t,
        src: *const snd_seq_queue_info_t,
    );
}
extern "C" {
    pub fn snd_seq_queue_info_get_queue(info: *const snd_seq_queue_info_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_queue_info_get_name(
        info: *const snd_seq_queue_info_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn snd_seq_queue_info_get_owner(info: *const snd_seq_queue_info_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_queue_info_get_locked(
        info: *const snd_seq_queue_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_queue_info_get_flags(
        info: *const snd_seq_queue_info_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_seq_queue_info_set_name(
        info: *mut snd_seq_queue_info_t,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn snd_seq_queue_info_set_owner(
        info: *mut snd_seq_queue_info_t,
        owner: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn snd_seq_queue_info_set_locked(
        info: *mut snd_seq_queue_info_t,
        locked: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn snd_seq_queue_info_set_flags(
        info: *mut snd_seq_queue_info_t,
        flags: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn snd_seq_create_queue(
        seq: *mut snd_seq_t,
        info: *mut snd_seq_queue_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_alloc_named_queue(
        seq: *mut snd_seq_t,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_alloc_queue(handle: *mut snd_seq_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_free_queue(
        handle: *mut snd_seq_t,
        q: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_get_queue_info(
        seq: *mut snd_seq_t,
        q: ::std::os::raw::c_int,
        info: *mut snd_seq_queue_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_set_queue_info(
        seq: *mut snd_seq_t,
        q: ::std::os::raw::c_int,
        info: *mut snd_seq_queue_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_query_named_queue(
        seq: *mut snd_seq_t,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_get_queue_usage(
        handle: *mut snd_seq_t,
        q: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_set_queue_usage(
        handle: *mut snd_seq_t,
        q: ::std::os::raw::c_int,
        used: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_queue_status_sizeof() -> usize;
}
extern "C" {
    pub fn snd_seq_queue_status_malloc(
        ptr: *mut *mut snd_seq_queue_status_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_queue_status_free(ptr: *mut snd_seq_queue_status_t);
}
extern "C" {
    pub fn snd_seq_queue_status_copy(
        dst: *mut snd_seq_queue_status_t,
        src: *const snd_seq_queue_status_t,
    );
}
extern "C" {
    pub fn snd_seq_queue_status_get_queue(
        info: *const snd_seq_queue_status_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_queue_status_get_events(
        info: *const snd_seq_queue_status_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_queue_status_get_tick_time(
        info: *const snd_seq_queue_status_t,
    ) -> snd_seq_tick_time_t;
}
extern "C" {
    pub fn snd_seq_queue_status_get_real_time(
        info: *const snd_seq_queue_status_t,
    ) -> *const snd_seq_real_time_t;
}
extern "C" {
    pub fn snd_seq_queue_status_get_status(
        info: *const snd_seq_queue_status_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_seq_get_queue_status(
        handle: *mut snd_seq_t,
        q: ::std::os::raw::c_int,
        status: *mut snd_seq_queue_status_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_queue_tempo_sizeof() -> usize;
}
extern "C" {
    pub fn snd_seq_queue_tempo_malloc(
        ptr: *mut *mut snd_seq_queue_tempo_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_queue_tempo_free(ptr: *mut snd_seq_queue_tempo_t);
}
extern "C" {
    pub fn snd_seq_queue_tempo_copy(
        dst: *mut snd_seq_queue_tempo_t,
        src: *const snd_seq_queue_tempo_t,
    );
}
extern "C" {
    pub fn snd_seq_queue_tempo_get_queue(
        info: *const snd_seq_queue_tempo_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_queue_tempo_get_tempo(
        info: *const snd_seq_queue_tempo_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_seq_queue_tempo_get_ppq(info: *const snd_seq_queue_tempo_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_queue_tempo_get_skew(
        info: *const snd_seq_queue_tempo_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_seq_queue_tempo_get_skew_base(
        info: *const snd_seq_queue_tempo_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_seq_queue_tempo_set_tempo(
        info: *mut snd_seq_queue_tempo_t,
        tempo: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn snd_seq_queue_tempo_set_ppq(
        info: *mut snd_seq_queue_tempo_t,
        ppq: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn snd_seq_queue_tempo_set_skew(
        info: *mut snd_seq_queue_tempo_t,
        skew: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn snd_seq_queue_tempo_set_skew_base(
        info: *mut snd_seq_queue_tempo_t,
        base: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn snd_seq_get_queue_tempo(
        handle: *mut snd_seq_t,
        q: ::std::os::raw::c_int,
        tempo: *mut snd_seq_queue_tempo_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_set_queue_tempo(
        handle: *mut snd_seq_t,
        q: ::std::os::raw::c_int,
        tempo: *mut snd_seq_queue_tempo_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum snd_seq_queue_timer_type_t {
    SND_SEQ_TIMER_ALSA = 0,
    SND_SEQ_TIMER_MIDI_CLOCK = 1,
    SND_SEQ_TIMER_MIDI_TICK = 2,
}
extern "C" {
    pub fn snd_seq_queue_timer_sizeof() -> usize;
}
extern "C" {
    pub fn snd_seq_queue_timer_malloc(
        ptr: *mut *mut snd_seq_queue_timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_queue_timer_free(ptr: *mut snd_seq_queue_timer_t);
}
extern "C" {
    pub fn snd_seq_queue_timer_copy(
        dst: *mut snd_seq_queue_timer_t,
        src: *const snd_seq_queue_timer_t,
    );
}
extern "C" {
    pub fn snd_seq_queue_timer_get_queue(
        info: *const snd_seq_queue_timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_queue_timer_get_type(
        info: *const snd_seq_queue_timer_t,
    ) -> snd_seq_queue_timer_type_t;
}
extern "C" {
    pub fn snd_seq_queue_timer_get_id(info: *const snd_seq_queue_timer_t) -> *const snd_timer_id_t;
}
extern "C" {
    pub fn snd_seq_queue_timer_get_resolution(
        info: *const snd_seq_queue_timer_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_seq_queue_timer_set_type(
        info: *mut snd_seq_queue_timer_t,
        type_: snd_seq_queue_timer_type_t,
    );
}
extern "C" {
    pub fn snd_seq_queue_timer_set_id(info: *mut snd_seq_queue_timer_t, id: *const snd_timer_id_t);
}
extern "C" {
    pub fn snd_seq_queue_timer_set_resolution(
        info: *mut snd_seq_queue_timer_t,
        resolution: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn snd_seq_get_queue_timer(
        handle: *mut snd_seq_t,
        q: ::std::os::raw::c_int,
        timer: *mut snd_seq_queue_timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_set_queue_timer(
        handle: *mut snd_seq_t,
        q: ::std::os::raw::c_int,
        timer: *mut snd_seq_queue_timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_free_event(ev: *mut snd_seq_event_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_event_length(ev: *mut snd_seq_event_t) -> isize;
}
extern "C" {
    pub fn snd_seq_event_output(
        handle: *mut snd_seq_t,
        ev: *mut snd_seq_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_event_output_buffer(
        handle: *mut snd_seq_t,
        ev: *mut snd_seq_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_event_output_direct(
        handle: *mut snd_seq_t,
        ev: *mut snd_seq_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_event_input(
        handle: *mut snd_seq_t,
        ev: *mut *mut snd_seq_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_event_input_pending(
        seq: *mut snd_seq_t,
        fetch_sequencer: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_drain_output(handle: *mut snd_seq_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_event_output_pending(seq: *mut snd_seq_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_extract_output(
        handle: *mut snd_seq_t,
        ev: *mut *mut snd_seq_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_drop_output(handle: *mut snd_seq_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_drop_output_buffer(handle: *mut snd_seq_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_drop_input(handle: *mut snd_seq_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_drop_input_buffer(handle: *mut snd_seq_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _snd_seq_remove_events {
    _unused: [u8; 0],
}
pub type snd_seq_remove_events_t = _snd_seq_remove_events;
extern "C" {
    pub fn snd_seq_remove_events_sizeof() -> usize;
}
extern "C" {
    pub fn snd_seq_remove_events_malloc(
        ptr: *mut *mut snd_seq_remove_events_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_remove_events_free(ptr: *mut snd_seq_remove_events_t);
}
extern "C" {
    pub fn snd_seq_remove_events_copy(
        dst: *mut snd_seq_remove_events_t,
        src: *const snd_seq_remove_events_t,
    );
}
extern "C" {
    pub fn snd_seq_remove_events_get_condition(
        info: *const snd_seq_remove_events_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn snd_seq_remove_events_get_queue(
        info: *const snd_seq_remove_events_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_remove_events_get_time(
        info: *const snd_seq_remove_events_t,
    ) -> *const snd_seq_timestamp_t;
}
extern "C" {
    pub fn snd_seq_remove_events_get_dest(
        info: *const snd_seq_remove_events_t,
    ) -> *const snd_seq_addr_t;
}
extern "C" {
    pub fn snd_seq_remove_events_get_channel(
        info: *const snd_seq_remove_events_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_remove_events_get_event_type(
        info: *const snd_seq_remove_events_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_remove_events_get_tag(
        info: *const snd_seq_remove_events_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_remove_events_set_condition(
        info: *mut snd_seq_remove_events_t,
        flags: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn snd_seq_remove_events_set_queue(
        info: *mut snd_seq_remove_events_t,
        queue: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn snd_seq_remove_events_set_time(
        info: *mut snd_seq_remove_events_t,
        time: *const snd_seq_timestamp_t,
    );
}
extern "C" {
    pub fn snd_seq_remove_events_set_dest(
        info: *mut snd_seq_remove_events_t,
        addr: *const snd_seq_addr_t,
    );
}
extern "C" {
    pub fn snd_seq_remove_events_set_channel(
        info: *mut snd_seq_remove_events_t,
        channel: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn snd_seq_remove_events_set_event_type(
        info: *mut snd_seq_remove_events_t,
        type_: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn snd_seq_remove_events_set_tag(
        info: *mut snd_seq_remove_events_t,
        tag: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn snd_seq_remove_events(
        handle: *mut snd_seq_t,
        info: *mut snd_seq_remove_events_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_set_bit(nr: ::std::os::raw::c_int, array: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn snd_seq_unset_bit(nr: ::std::os::raw::c_int, array: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn snd_seq_change_bit(
        nr: ::std::os::raw::c_int,
        array: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_get_bit(
        nr: ::std::os::raw::c_int,
        array: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub const SND_SEQ_EVFLG_RESULT: _bindgen_ty_4 = _bindgen_ty_4::SND_SEQ_EVFLG_RESULT;
pub const SND_SEQ_EVFLG_NOTE: _bindgen_ty_4 = _bindgen_ty_4::SND_SEQ_EVFLG_NOTE;
pub const SND_SEQ_EVFLG_CONTROL: _bindgen_ty_4 = _bindgen_ty_4::SND_SEQ_EVFLG_CONTROL;
pub const SND_SEQ_EVFLG_QUEUE: _bindgen_ty_4 = _bindgen_ty_4::SND_SEQ_EVFLG_QUEUE;
pub const SND_SEQ_EVFLG_SYSTEM: _bindgen_ty_4 = _bindgen_ty_4::SND_SEQ_EVFLG_SYSTEM;
pub const SND_SEQ_EVFLG_MESSAGE: _bindgen_ty_4 = _bindgen_ty_4::SND_SEQ_EVFLG_MESSAGE;
pub const SND_SEQ_EVFLG_CONNECTION: _bindgen_ty_4 = _bindgen_ty_4::SND_SEQ_EVFLG_CONNECTION;
pub const SND_SEQ_EVFLG_SAMPLE: _bindgen_ty_4 = _bindgen_ty_4::SND_SEQ_EVFLG_SAMPLE;
pub const SND_SEQ_EVFLG_USERS: _bindgen_ty_4 = _bindgen_ty_4::SND_SEQ_EVFLG_USERS;
pub const SND_SEQ_EVFLG_INSTR: _bindgen_ty_4 = _bindgen_ty_4::SND_SEQ_EVFLG_INSTR;
pub const SND_SEQ_EVFLG_QUOTE: _bindgen_ty_4 = _bindgen_ty_4::SND_SEQ_EVFLG_QUOTE;
pub const SND_SEQ_EVFLG_NONE: _bindgen_ty_4 = _bindgen_ty_4::SND_SEQ_EVFLG_NONE;
pub const SND_SEQ_EVFLG_RAW: _bindgen_ty_4 = _bindgen_ty_4::SND_SEQ_EVFLG_RAW;
pub const SND_SEQ_EVFLG_FIXED: _bindgen_ty_4 = _bindgen_ty_4::SND_SEQ_EVFLG_FIXED;
pub const SND_SEQ_EVFLG_VARIABLE: _bindgen_ty_4 = _bindgen_ty_4::SND_SEQ_EVFLG_VARIABLE;
pub const SND_SEQ_EVFLG_VARUSR: _bindgen_ty_4 = _bindgen_ty_4::SND_SEQ_EVFLG_VARUSR;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_4 {
    SND_SEQ_EVFLG_RESULT = 0,
    SND_SEQ_EVFLG_NOTE = 1,
    SND_SEQ_EVFLG_CONTROL = 2,
    SND_SEQ_EVFLG_QUEUE = 3,
    SND_SEQ_EVFLG_SYSTEM = 4,
    SND_SEQ_EVFLG_MESSAGE = 5,
    SND_SEQ_EVFLG_CONNECTION = 6,
    SND_SEQ_EVFLG_SAMPLE = 7,
    SND_SEQ_EVFLG_USERS = 8,
    SND_SEQ_EVFLG_INSTR = 9,
    SND_SEQ_EVFLG_QUOTE = 10,
    SND_SEQ_EVFLG_NONE = 11,
    SND_SEQ_EVFLG_RAW = 12,
    SND_SEQ_EVFLG_FIXED = 13,
    SND_SEQ_EVFLG_VARIABLE = 14,
    SND_SEQ_EVFLG_VARUSR = 15,
}
pub const SND_SEQ_EVFLG_NOTE_ONEARG: _bindgen_ty_5 = _bindgen_ty_5::SND_SEQ_EVFLG_NOTE_ONEARG;
pub const SND_SEQ_EVFLG_NOTE_TWOARG: _bindgen_ty_5 = _bindgen_ty_5::SND_SEQ_EVFLG_NOTE_TWOARG;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_5 {
    SND_SEQ_EVFLG_NOTE_ONEARG = 0,
    SND_SEQ_EVFLG_NOTE_TWOARG = 1,
}
pub const SND_SEQ_EVFLG_QUEUE_NOARG: _bindgen_ty_6 = _bindgen_ty_6::SND_SEQ_EVFLG_QUEUE_NOARG;
pub const SND_SEQ_EVFLG_QUEUE_TICK: _bindgen_ty_6 = _bindgen_ty_6::SND_SEQ_EVFLG_QUEUE_TICK;
pub const SND_SEQ_EVFLG_QUEUE_TIME: _bindgen_ty_6 = _bindgen_ty_6::SND_SEQ_EVFLG_QUEUE_TIME;
pub const SND_SEQ_EVFLG_QUEUE_VALUE: _bindgen_ty_6 = _bindgen_ty_6::SND_SEQ_EVFLG_QUEUE_VALUE;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_6 {
    SND_SEQ_EVFLG_QUEUE_NOARG = 0,
    SND_SEQ_EVFLG_QUEUE_TICK = 1,
    SND_SEQ_EVFLG_QUEUE_TIME = 2,
    SND_SEQ_EVFLG_QUEUE_VALUE = 3,
}
extern "C" {
    pub static mut snd_seq_event_types: [::std::os::raw::c_uint; 0usize];
}
extern "C" {
    pub fn snd_seq_control_queue(
        seq: *mut snd_seq_t,
        q: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
        ev: *mut snd_seq_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_create_simple_port(
        seq: *mut snd_seq_t,
        name: *const ::std::os::raw::c_char,
        caps: ::std::os::raw::c_uint,
        type_: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_delete_simple_port(
        seq: *mut snd_seq_t,
        port: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_connect_from(
        seq: *mut snd_seq_t,
        my_port: ::std::os::raw::c_int,
        src_client: ::std::os::raw::c_int,
        src_port: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_connect_to(
        seq: *mut snd_seq_t,
        my_port: ::std::os::raw::c_int,
        dest_client: ::std::os::raw::c_int,
        dest_port: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_disconnect_from(
        seq: *mut snd_seq_t,
        my_port: ::std::os::raw::c_int,
        src_client: ::std::os::raw::c_int,
        src_port: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_disconnect_to(
        seq: *mut snd_seq_t,
        my_port: ::std::os::raw::c_int,
        dest_client: ::std::os::raw::c_int,
        dest_port: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_set_client_name(
        seq: *mut snd_seq_t,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_set_client_event_filter(
        seq: *mut snd_seq_t,
        event_type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_set_client_pool_output(
        seq: *mut snd_seq_t,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_set_client_pool_output_room(
        seq: *mut snd_seq_t,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_set_client_pool_input(seq: *mut snd_seq_t, size: usize)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_sync_output_queue(seq: *mut snd_seq_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_parse_address(
        seq: *mut snd_seq_t,
        addr: *mut snd_seq_addr_t,
        str: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_reset_pool_output(seq: *mut snd_seq_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_seq_reset_pool_input(seq: *mut snd_seq_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct snd_midi_event {
    _unused: [u8; 0],
}
pub type snd_midi_event_t = snd_midi_event;
extern "C" {
    pub fn snd_midi_event_new(
        bufsize: usize,
        rdev: *mut *mut snd_midi_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_midi_event_resize_buffer(
        dev: *mut snd_midi_event_t,
        bufsize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_midi_event_free(dev: *mut snd_midi_event_t);
}
extern "C" {
    pub fn snd_midi_event_init(dev: *mut snd_midi_event_t);
}
extern "C" {
    pub fn snd_midi_event_reset_encode(dev: *mut snd_midi_event_t);
}
extern "C" {
    pub fn snd_midi_event_reset_decode(dev: *mut snd_midi_event_t);
}
extern "C" {
    pub fn snd_midi_event_no_status(dev: *mut snd_midi_event_t, on: ::std::os::raw::c_int);
}
extern "C" {
    pub fn snd_midi_event_encode(
        dev: *mut snd_midi_event_t,
        buf: *const ::std::os::raw::c_uchar,
        count: ::std::os::raw::c_long,
        ev: *mut snd_seq_event_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn snd_midi_event_encode_byte(
        dev: *mut snd_midi_event_t,
        c: ::std::os::raw::c_int,
        ev: *mut snd_seq_event_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snd_midi_event_decode(
        dev: *mut snd_midi_event_t,
        buf: *mut ::std::os::raw::c_uchar,
        count: ::std::os::raw::c_long,
        ev: *const snd_seq_event_t,
    ) -> ::std::os::raw::c_long;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
