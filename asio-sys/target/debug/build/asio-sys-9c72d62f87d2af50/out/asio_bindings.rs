/* automatically generated by rust-bindgen */

pub type LPVOID = * mut :: std :: os :: raw :: c_void ; pub type LONG = :: std :: os :: raw :: c_long ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _GUID { pub Data1 : :: std :: os :: raw :: c_ulong , pub Data2 : :: std :: os :: raw :: c_ushort , pub Data3 : :: std :: os :: raw :: c_ushort , pub Data4 : [ :: std :: os :: raw :: c_uchar ; 8usize ] , } # [ test ] fn bindgen_test_layout__GUID ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _GUID > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _GUID ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _GUID > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( _GUID ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _GUID > ( ) ) ) . Data1 as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _GUID ) , "::" , stringify ! ( Data1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _GUID > ( ) ) ) . Data2 as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( _GUID ) , "::" , stringify ! ( Data2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _GUID > ( ) ) ) . Data3 as * const _ as usize } , 6usize , concat ! ( "Offset of field: " , stringify ! ( _GUID ) , "::" , stringify ! ( Data3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _GUID > ( ) ) ) . Data4 as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _GUID ) , "::" , stringify ! ( Data4 ) ) ) ; } pub type GUID = _GUID ; pub type CLSID = GUID ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct asiodrvstruct { pub drvID : :: std :: os :: raw :: c_int , pub clsid : CLSID , pub dllpath : [ :: std :: os :: raw :: c_char ; 512usize ] , pub drvname : [ :: std :: os :: raw :: c_char ; 128usize ] , pub asiodrv : LPVOID , pub next : * mut asiodrvstruct , } # [ test ] fn bindgen_test_layout_asiodrvstruct ( ) { assert_eq ! ( :: std :: mem :: size_of :: < asiodrvstruct > ( ) , 680usize , concat ! ( "Size of: " , stringify ! ( asiodrvstruct ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < asiodrvstruct > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( asiodrvstruct ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < asiodrvstruct > ( ) ) ) . drvID as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( asiodrvstruct ) , "::" , stringify ! ( drvID ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < asiodrvstruct > ( ) ) ) . clsid as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( asiodrvstruct ) , "::" , stringify ! ( clsid ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < asiodrvstruct > ( ) ) ) . dllpath as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( asiodrvstruct ) , "::" , stringify ! ( dllpath ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < asiodrvstruct > ( ) ) ) . drvname as * const _ as usize } , 532usize , concat ! ( "Offset of field: " , stringify ! ( asiodrvstruct ) , "::" , stringify ! ( drvname ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < asiodrvstruct > ( ) ) ) . asiodrv as * const _ as usize } , 664usize , concat ! ( "Offset of field: " , stringify ! ( asiodrvstruct ) , "::" , stringify ! ( asiodrv ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < asiodrvstruct > ( ) ) ) . next as * const _ as usize } , 672usize , concat ! ( "Offset of field: " , stringify ! ( asiodrvstruct ) , "::" , stringify ! ( next ) ) ) ; } pub type ASIODRVSTRUCT = asiodrvstruct ; pub type LPASIODRVSTRUCT = * mut ASIODRVSTRUCT ; # [ repr ( C ) ] # [ derive ( Debug ) ] pub struct AsioDriverList { pub lpdrvlist : LPASIODRVSTRUCT , pub numdrv : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_AsioDriverList ( ) { assert_eq ! ( :: std :: mem :: size_of :: < AsioDriverList > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( AsioDriverList ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < AsioDriverList > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( AsioDriverList ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < AsioDriverList > ( ) ) ) . lpdrvlist as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( AsioDriverList ) , "::" , stringify ! ( lpdrvlist ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < AsioDriverList > ( ) ) ) . numdrv as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( AsioDriverList ) , "::" , stringify ! ( numdrv ) ) ) ; } extern "C" { # [ link_name = "\u{1}?asioOpenDriver@AsioDriverList@@QEAAJHPEAPEAX@Z" ] pub fn AsioDriverList_asioOpenDriver ( this : * mut AsioDriverList , arg1 : :: std :: os :: raw :: c_int , arg2 : * mut * mut :: std :: os :: raw :: c_void ) -> LONG ; } extern "C" { # [ link_name = "\u{1}?asioCloseDriver@AsioDriverList@@QEAAJH@Z" ] pub fn AsioDriverList_asioCloseDriver ( this : * mut AsioDriverList , arg1 : :: std :: os :: raw :: c_int ) -> LONG ; } extern "C" { # [ link_name = "\u{1}?asioGetNumDev@AsioDriverList@@QEAAJXZ" ] pub fn AsioDriverList_asioGetNumDev ( this : * mut AsioDriverList ) -> LONG ; } extern "C" { # [ link_name = "\u{1}?asioGetDriverName@AsioDriverList@@QEAAJHPEADH@Z" ] pub fn AsioDriverList_asioGetDriverName ( this : * mut AsioDriverList , arg1 : :: std :: os :: raw :: c_int , arg2 : * mut :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int ) -> LONG ; } extern "C" { # [ link_name = "\u{1}?asioGetDriverPath@AsioDriverList@@QEAAJHPEADH@Z" ] pub fn AsioDriverList_asioGetDriverPath ( this : * mut AsioDriverList , arg1 : :: std :: os :: raw :: c_int , arg2 : * mut :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int ) -> LONG ; } extern "C" { # [ link_name = "\u{1}?asioGetDriverCLSID@AsioDriverList@@QEAAJHPEAU_GUID@@@Z" ] pub fn AsioDriverList_asioGetDriverCLSID ( this : * mut AsioDriverList , arg1 : :: std :: os :: raw :: c_int , arg2 : * mut CLSID ) -> LONG ; } extern "C" { # [ link_name = "\u{1}??0AsioDriverList@@QEAA@XZ" ] pub fn AsioDriverList_AsioDriverList ( this : * mut AsioDriverList ) ; } extern "C" { # [ link_name = "\u{1}??_DAsioDriverList@@QEAAXXZ" ] pub fn AsioDriverList_AsioDriverList_destructor ( this : * mut AsioDriverList ) ; } impl AsioDriverList { # [ inline ] pub unsafe fn asioOpenDriver ( & mut self , arg1 : :: std :: os :: raw :: c_int , arg2 : * mut * mut :: std :: os :: raw :: c_void ) -> LONG { AsioDriverList_asioOpenDriver ( self , arg1 , arg2 ) } # [ inline ] pub unsafe fn asioCloseDriver ( & mut self , arg1 : :: std :: os :: raw :: c_int ) -> LONG { AsioDriverList_asioCloseDriver ( self , arg1 ) } # [ inline ] pub unsafe fn asioGetNumDev ( & mut self ) -> LONG { AsioDriverList_asioGetNumDev ( self ) } # [ inline ] pub unsafe fn asioGetDriverName ( & mut self , arg1 : :: std :: os :: raw :: c_int , arg2 : * mut :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int ) -> LONG { AsioDriverList_asioGetDriverName ( self , arg1 , arg2 , arg3 ) } # [ inline ] pub unsafe fn asioGetDriverPath ( & mut self , arg1 : :: std :: os :: raw :: c_int , arg2 : * mut :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int ) -> LONG { AsioDriverList_asioGetDriverPath ( self , arg1 , arg2 , arg3 ) } # [ inline ] pub unsafe fn asioGetDriverCLSID ( & mut self , arg1 : :: std :: os :: raw :: c_int , arg2 : * mut CLSID ) -> LONG { AsioDriverList_asioGetDriverCLSID ( self , arg1 , arg2 ) } # [ inline ] pub unsafe fn new ( ) -> Self { let mut __bindgen_tmp = :: std :: mem :: uninitialized ( ) ; AsioDriverList_AsioDriverList ( & mut __bindgen_tmp ) ; __bindgen_tmp } # [ inline ] pub unsafe fn destruct ( & mut self ) { AsioDriverList_AsioDriverList_destructor ( self ) } } # [ repr ( C ) ] # [ derive ( Debug ) ] pub struct AsioDrivers { pub _base : AsioDriverList , pub connID : :: std :: os :: raw :: c_ulong , pub curIndex : :: std :: os :: raw :: c_long , } # [ test ] fn bindgen_test_layout_AsioDrivers ( ) { assert_eq ! ( :: std :: mem :: size_of :: < AsioDrivers > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( AsioDrivers ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < AsioDrivers > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( AsioDrivers ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < AsioDrivers > ( ) ) ) . connID as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( AsioDrivers ) , "::" , stringify ! ( connID ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < AsioDrivers > ( ) ) ) . curIndex as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( AsioDrivers ) , "::" , stringify ! ( curIndex ) ) ) ; } extern "C" { # [ link_name = "\u{1}?getCurrentDriverName@AsioDrivers@@QEAA_NPEAD@Z" ] pub fn AsioDrivers_getCurrentDriverName ( this : * mut AsioDrivers , name : * mut :: std :: os :: raw :: c_char ) -> bool ; } extern "C" { # [ link_name = "\u{1}?getDriverNames@AsioDrivers@@QEAAJPEAPEADJ@Z" ] pub fn AsioDrivers_getDriverNames ( this : * mut AsioDrivers , names : * mut * mut :: std :: os :: raw :: c_char , maxDrivers : :: std :: os :: raw :: c_long ) -> :: std :: os :: raw :: c_long ; } extern "C" { # [ link_name = "\u{1}?loadDriver@AsioDrivers@@QEAA_NPEAD@Z" ] pub fn AsioDrivers_loadDriver ( this : * mut AsioDrivers , name : * mut :: std :: os :: raw :: c_char ) -> bool ; } extern "C" { # [ link_name = "\u{1}?removeCurrentDriver@AsioDrivers@@QEAAXXZ" ] pub fn AsioDrivers_removeCurrentDriver ( this : * mut AsioDrivers ) ; } extern "C" { # [ link_name = "\u{1}??0AsioDrivers@@QEAA@XZ" ] pub fn AsioDrivers_AsioDrivers ( this : * mut AsioDrivers ) ; } extern "C" { # [ link_name = "\u{1}??_DAsioDrivers@@QEAAXXZ" ] pub fn AsioDrivers_AsioDrivers_destructor ( this : * mut AsioDrivers ) ; } impl AsioDrivers { # [ inline ] pub unsafe fn getCurrentDriverName ( & mut self , name : * mut :: std :: os :: raw :: c_char ) -> bool { AsioDrivers_getCurrentDriverName ( self , name ) } # [ inline ] pub unsafe fn getDriverNames ( & mut self , names : * mut * mut :: std :: os :: raw :: c_char , maxDrivers : :: std :: os :: raw :: c_long ) -> :: std :: os :: raw :: c_long { AsioDrivers_getDriverNames ( self , names , maxDrivers ) } # [ inline ] pub unsafe fn loadDriver ( & mut self , name : * mut :: std :: os :: raw :: c_char ) -> bool { AsioDrivers_loadDriver ( self , name ) } # [ inline ] pub unsafe fn removeCurrentDriver ( & mut self ) { AsioDrivers_removeCurrentDriver ( self ) } # [ inline ] pub unsafe fn new ( ) -> Self { let mut __bindgen_tmp = :: std :: mem :: uninitialized ( ) ; AsioDrivers_AsioDrivers ( & mut __bindgen_tmp ) ; __bindgen_tmp } # [ inline ] pub unsafe fn destruct ( & mut self ) { AsioDrivers_AsioDrivers_destructor ( self ) } }